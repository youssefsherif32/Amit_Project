
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000027a8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000030  00800060  000027a8  0000283c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  00800090  00800090  0000286c  2**0
                  ALLOC
  3 .stab         0000207c  00000000  00000000  0000286c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001412  00000000  00000000  000048e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000160  00000000  00000000  00005cfa  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000018f  00000000  00000000  00005e5a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002045  00000000  00000000  00005fe9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001101  00000000  00000000  0000802e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000f82  00000000  00000000  0000912f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000180  00000000  00000000  0000a0b4  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c2  00000000  00000000  0000a234  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000088e  00000000  00000000  0000a4f6  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000ad84  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 ea       	ldi	r30, 0xA8	; 168
      68:	f7 e2       	ldi	r31, 0x27	; 39
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 39       	cpi	r26, 0x90	; 144
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a0 e9       	ldi	r26, 0x90	; 144
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a4 39       	cpi	r26, 0x94	; 148
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 9e 12 	call	0x253c	; 0x253c <main>
      8a:	0c 94 d2 13 	jmp	0x27a4	; 0x27a4 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 9b 13 	jmp	0x2736	; 0x2736 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 b7 13 	jmp	0x276e	; 0x276e <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 a7 13 	jmp	0x274e	; 0x274e <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 c3 13 	jmp	0x2786	; 0x2786 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 a7 13 	jmp	0x274e	; 0x274e <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 c3 13 	jmp	0x2786	; 0x2786 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 9b 13 	jmp	0x2736	; 0x2736 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 b7 13 	jmp	0x276e	; 0x276e <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 a3 13 	jmp	0x2746	; 0x2746 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e6       	ldi	r22, 0x60	; 96
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 bf 13 	jmp	0x277e	; 0x277e <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 a7 13 	jmp	0x274e	; 0x274e <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 c3 13 	jmp	0x2786	; 0x2786 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 a7 13 	jmp	0x274e	; 0x274e <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 c3 13 	jmp	0x2786	; 0x2786 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 a7 13 	jmp	0x274e	; 0x274e <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 c3 13 	jmp	0x2786	; 0x2786 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 ab 13 	jmp	0x2756	; 0x2756 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 c7 13 	jmp	0x278e	; 0x278e <__epilogue_restores__+0x20>

00000952 <__pack_f>:
     952:	df 92       	push	r13
     954:	ef 92       	push	r14
     956:	ff 92       	push	r15
     958:	0f 93       	push	r16
     95a:	1f 93       	push	r17
     95c:	fc 01       	movw	r30, r24
     95e:	e4 80       	ldd	r14, Z+4	; 0x04
     960:	f5 80       	ldd	r15, Z+5	; 0x05
     962:	06 81       	ldd	r16, Z+6	; 0x06
     964:	17 81       	ldd	r17, Z+7	; 0x07
     966:	d1 80       	ldd	r13, Z+1	; 0x01
     968:	80 81       	ld	r24, Z
     96a:	82 30       	cpi	r24, 0x02	; 2
     96c:	48 f4       	brcc	.+18     	; 0x980 <__pack_f+0x2e>
     96e:	80 e0       	ldi	r24, 0x00	; 0
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	a0 e1       	ldi	r26, 0x10	; 16
     974:	b0 e0       	ldi	r27, 0x00	; 0
     976:	e8 2a       	or	r14, r24
     978:	f9 2a       	or	r15, r25
     97a:	0a 2b       	or	r16, r26
     97c:	1b 2b       	or	r17, r27
     97e:	a5 c0       	rjmp	.+330    	; 0xaca <__pack_f+0x178>
     980:	84 30       	cpi	r24, 0x04	; 4
     982:	09 f4       	brne	.+2      	; 0x986 <__pack_f+0x34>
     984:	9f c0       	rjmp	.+318    	; 0xac4 <__pack_f+0x172>
     986:	82 30       	cpi	r24, 0x02	; 2
     988:	21 f4       	brne	.+8      	; 0x992 <__pack_f+0x40>
     98a:	ee 24       	eor	r14, r14
     98c:	ff 24       	eor	r15, r15
     98e:	87 01       	movw	r16, r14
     990:	05 c0       	rjmp	.+10     	; 0x99c <__pack_f+0x4a>
     992:	e1 14       	cp	r14, r1
     994:	f1 04       	cpc	r15, r1
     996:	01 05       	cpc	r16, r1
     998:	11 05       	cpc	r17, r1
     99a:	19 f4       	brne	.+6      	; 0x9a2 <__pack_f+0x50>
     99c:	e0 e0       	ldi	r30, 0x00	; 0
     99e:	f0 e0       	ldi	r31, 0x00	; 0
     9a0:	96 c0       	rjmp	.+300    	; 0xace <__pack_f+0x17c>
     9a2:	62 81       	ldd	r22, Z+2	; 0x02
     9a4:	73 81       	ldd	r23, Z+3	; 0x03
     9a6:	9f ef       	ldi	r25, 0xFF	; 255
     9a8:	62 38       	cpi	r22, 0x82	; 130
     9aa:	79 07       	cpc	r23, r25
     9ac:	0c f0       	brlt	.+2      	; 0x9b0 <__pack_f+0x5e>
     9ae:	5b c0       	rjmp	.+182    	; 0xa66 <__pack_f+0x114>
     9b0:	22 e8       	ldi	r18, 0x82	; 130
     9b2:	3f ef       	ldi	r19, 0xFF	; 255
     9b4:	26 1b       	sub	r18, r22
     9b6:	37 0b       	sbc	r19, r23
     9b8:	2a 31       	cpi	r18, 0x1A	; 26
     9ba:	31 05       	cpc	r19, r1
     9bc:	2c f0       	brlt	.+10     	; 0x9c8 <__pack_f+0x76>
     9be:	20 e0       	ldi	r18, 0x00	; 0
     9c0:	30 e0       	ldi	r19, 0x00	; 0
     9c2:	40 e0       	ldi	r20, 0x00	; 0
     9c4:	50 e0       	ldi	r21, 0x00	; 0
     9c6:	2a c0       	rjmp	.+84     	; 0xa1c <__pack_f+0xca>
     9c8:	b8 01       	movw	r22, r16
     9ca:	a7 01       	movw	r20, r14
     9cc:	02 2e       	mov	r0, r18
     9ce:	04 c0       	rjmp	.+8      	; 0x9d8 <__pack_f+0x86>
     9d0:	76 95       	lsr	r23
     9d2:	67 95       	ror	r22
     9d4:	57 95       	ror	r21
     9d6:	47 95       	ror	r20
     9d8:	0a 94       	dec	r0
     9da:	d2 f7       	brpl	.-12     	; 0x9d0 <__pack_f+0x7e>
     9dc:	81 e0       	ldi	r24, 0x01	; 1
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	a0 e0       	ldi	r26, 0x00	; 0
     9e2:	b0 e0       	ldi	r27, 0x00	; 0
     9e4:	04 c0       	rjmp	.+8      	; 0x9ee <__pack_f+0x9c>
     9e6:	88 0f       	add	r24, r24
     9e8:	99 1f       	adc	r25, r25
     9ea:	aa 1f       	adc	r26, r26
     9ec:	bb 1f       	adc	r27, r27
     9ee:	2a 95       	dec	r18
     9f0:	d2 f7       	brpl	.-12     	; 0x9e6 <__pack_f+0x94>
     9f2:	01 97       	sbiw	r24, 0x01	; 1
     9f4:	a1 09       	sbc	r26, r1
     9f6:	b1 09       	sbc	r27, r1
     9f8:	8e 21       	and	r24, r14
     9fa:	9f 21       	and	r25, r15
     9fc:	a0 23       	and	r26, r16
     9fe:	b1 23       	and	r27, r17
     a00:	00 97       	sbiw	r24, 0x00	; 0
     a02:	a1 05       	cpc	r26, r1
     a04:	b1 05       	cpc	r27, r1
     a06:	21 f0       	breq	.+8      	; 0xa10 <__pack_f+0xbe>
     a08:	81 e0       	ldi	r24, 0x01	; 1
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	a0 e0       	ldi	r26, 0x00	; 0
     a0e:	b0 e0       	ldi	r27, 0x00	; 0
     a10:	9a 01       	movw	r18, r20
     a12:	ab 01       	movw	r20, r22
     a14:	28 2b       	or	r18, r24
     a16:	39 2b       	or	r19, r25
     a18:	4a 2b       	or	r20, r26
     a1a:	5b 2b       	or	r21, r27
     a1c:	da 01       	movw	r26, r20
     a1e:	c9 01       	movw	r24, r18
     a20:	8f 77       	andi	r24, 0x7F	; 127
     a22:	90 70       	andi	r25, 0x00	; 0
     a24:	a0 70       	andi	r26, 0x00	; 0
     a26:	b0 70       	andi	r27, 0x00	; 0
     a28:	80 34       	cpi	r24, 0x40	; 64
     a2a:	91 05       	cpc	r25, r1
     a2c:	a1 05       	cpc	r26, r1
     a2e:	b1 05       	cpc	r27, r1
     a30:	39 f4       	brne	.+14     	; 0xa40 <__pack_f+0xee>
     a32:	27 ff       	sbrs	r18, 7
     a34:	09 c0       	rjmp	.+18     	; 0xa48 <__pack_f+0xf6>
     a36:	20 5c       	subi	r18, 0xC0	; 192
     a38:	3f 4f       	sbci	r19, 0xFF	; 255
     a3a:	4f 4f       	sbci	r20, 0xFF	; 255
     a3c:	5f 4f       	sbci	r21, 0xFF	; 255
     a3e:	04 c0       	rjmp	.+8      	; 0xa48 <__pack_f+0xf6>
     a40:	21 5c       	subi	r18, 0xC1	; 193
     a42:	3f 4f       	sbci	r19, 0xFF	; 255
     a44:	4f 4f       	sbci	r20, 0xFF	; 255
     a46:	5f 4f       	sbci	r21, 0xFF	; 255
     a48:	e0 e0       	ldi	r30, 0x00	; 0
     a4a:	f0 e0       	ldi	r31, 0x00	; 0
     a4c:	20 30       	cpi	r18, 0x00	; 0
     a4e:	a0 e0       	ldi	r26, 0x00	; 0
     a50:	3a 07       	cpc	r19, r26
     a52:	a0 e0       	ldi	r26, 0x00	; 0
     a54:	4a 07       	cpc	r20, r26
     a56:	a0 e4       	ldi	r26, 0x40	; 64
     a58:	5a 07       	cpc	r21, r26
     a5a:	10 f0       	brcs	.+4      	; 0xa60 <__pack_f+0x10e>
     a5c:	e1 e0       	ldi	r30, 0x01	; 1
     a5e:	f0 e0       	ldi	r31, 0x00	; 0
     a60:	79 01       	movw	r14, r18
     a62:	8a 01       	movw	r16, r20
     a64:	27 c0       	rjmp	.+78     	; 0xab4 <__pack_f+0x162>
     a66:	60 38       	cpi	r22, 0x80	; 128
     a68:	71 05       	cpc	r23, r1
     a6a:	64 f5       	brge	.+88     	; 0xac4 <__pack_f+0x172>
     a6c:	fb 01       	movw	r30, r22
     a6e:	e1 58       	subi	r30, 0x81	; 129
     a70:	ff 4f       	sbci	r31, 0xFF	; 255
     a72:	d8 01       	movw	r26, r16
     a74:	c7 01       	movw	r24, r14
     a76:	8f 77       	andi	r24, 0x7F	; 127
     a78:	90 70       	andi	r25, 0x00	; 0
     a7a:	a0 70       	andi	r26, 0x00	; 0
     a7c:	b0 70       	andi	r27, 0x00	; 0
     a7e:	80 34       	cpi	r24, 0x40	; 64
     a80:	91 05       	cpc	r25, r1
     a82:	a1 05       	cpc	r26, r1
     a84:	b1 05       	cpc	r27, r1
     a86:	39 f4       	brne	.+14     	; 0xa96 <__pack_f+0x144>
     a88:	e7 fe       	sbrs	r14, 7
     a8a:	0d c0       	rjmp	.+26     	; 0xaa6 <__pack_f+0x154>
     a8c:	80 e4       	ldi	r24, 0x40	; 64
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	a0 e0       	ldi	r26, 0x00	; 0
     a92:	b0 e0       	ldi	r27, 0x00	; 0
     a94:	04 c0       	rjmp	.+8      	; 0xa9e <__pack_f+0x14c>
     a96:	8f e3       	ldi	r24, 0x3F	; 63
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	e8 0e       	add	r14, r24
     aa0:	f9 1e       	adc	r15, r25
     aa2:	0a 1f       	adc	r16, r26
     aa4:	1b 1f       	adc	r17, r27
     aa6:	17 ff       	sbrs	r17, 7
     aa8:	05 c0       	rjmp	.+10     	; 0xab4 <__pack_f+0x162>
     aaa:	16 95       	lsr	r17
     aac:	07 95       	ror	r16
     aae:	f7 94       	ror	r15
     ab0:	e7 94       	ror	r14
     ab2:	31 96       	adiw	r30, 0x01	; 1
     ab4:	87 e0       	ldi	r24, 0x07	; 7
     ab6:	16 95       	lsr	r17
     ab8:	07 95       	ror	r16
     aba:	f7 94       	ror	r15
     abc:	e7 94       	ror	r14
     abe:	8a 95       	dec	r24
     ac0:	d1 f7       	brne	.-12     	; 0xab6 <__pack_f+0x164>
     ac2:	05 c0       	rjmp	.+10     	; 0xace <__pack_f+0x17c>
     ac4:	ee 24       	eor	r14, r14
     ac6:	ff 24       	eor	r15, r15
     ac8:	87 01       	movw	r16, r14
     aca:	ef ef       	ldi	r30, 0xFF	; 255
     acc:	f0 e0       	ldi	r31, 0x00	; 0
     ace:	6e 2f       	mov	r22, r30
     ad0:	67 95       	ror	r22
     ad2:	66 27       	eor	r22, r22
     ad4:	67 95       	ror	r22
     ad6:	90 2f       	mov	r25, r16
     ad8:	9f 77       	andi	r25, 0x7F	; 127
     ada:	d7 94       	ror	r13
     adc:	dd 24       	eor	r13, r13
     ade:	d7 94       	ror	r13
     ae0:	8e 2f       	mov	r24, r30
     ae2:	86 95       	lsr	r24
     ae4:	49 2f       	mov	r20, r25
     ae6:	46 2b       	or	r20, r22
     ae8:	58 2f       	mov	r21, r24
     aea:	5d 29       	or	r21, r13
     aec:	b7 01       	movw	r22, r14
     aee:	ca 01       	movw	r24, r20
     af0:	1f 91       	pop	r17
     af2:	0f 91       	pop	r16
     af4:	ff 90       	pop	r15
     af6:	ef 90       	pop	r14
     af8:	df 90       	pop	r13
     afa:	08 95       	ret

00000afc <__unpack_f>:
     afc:	fc 01       	movw	r30, r24
     afe:	db 01       	movw	r26, r22
     b00:	40 81       	ld	r20, Z
     b02:	51 81       	ldd	r21, Z+1	; 0x01
     b04:	22 81       	ldd	r18, Z+2	; 0x02
     b06:	62 2f       	mov	r22, r18
     b08:	6f 77       	andi	r22, 0x7F	; 127
     b0a:	70 e0       	ldi	r23, 0x00	; 0
     b0c:	22 1f       	adc	r18, r18
     b0e:	22 27       	eor	r18, r18
     b10:	22 1f       	adc	r18, r18
     b12:	93 81       	ldd	r25, Z+3	; 0x03
     b14:	89 2f       	mov	r24, r25
     b16:	88 0f       	add	r24, r24
     b18:	82 2b       	or	r24, r18
     b1a:	28 2f       	mov	r18, r24
     b1c:	30 e0       	ldi	r19, 0x00	; 0
     b1e:	99 1f       	adc	r25, r25
     b20:	99 27       	eor	r25, r25
     b22:	99 1f       	adc	r25, r25
     b24:	11 96       	adiw	r26, 0x01	; 1
     b26:	9c 93       	st	X, r25
     b28:	11 97       	sbiw	r26, 0x01	; 1
     b2a:	21 15       	cp	r18, r1
     b2c:	31 05       	cpc	r19, r1
     b2e:	a9 f5       	brne	.+106    	; 0xb9a <__unpack_f+0x9e>
     b30:	41 15       	cp	r20, r1
     b32:	51 05       	cpc	r21, r1
     b34:	61 05       	cpc	r22, r1
     b36:	71 05       	cpc	r23, r1
     b38:	11 f4       	brne	.+4      	; 0xb3e <__unpack_f+0x42>
     b3a:	82 e0       	ldi	r24, 0x02	; 2
     b3c:	37 c0       	rjmp	.+110    	; 0xbac <__unpack_f+0xb0>
     b3e:	82 e8       	ldi	r24, 0x82	; 130
     b40:	9f ef       	ldi	r25, 0xFF	; 255
     b42:	13 96       	adiw	r26, 0x03	; 3
     b44:	9c 93       	st	X, r25
     b46:	8e 93       	st	-X, r24
     b48:	12 97       	sbiw	r26, 0x02	; 2
     b4a:	9a 01       	movw	r18, r20
     b4c:	ab 01       	movw	r20, r22
     b4e:	67 e0       	ldi	r22, 0x07	; 7
     b50:	22 0f       	add	r18, r18
     b52:	33 1f       	adc	r19, r19
     b54:	44 1f       	adc	r20, r20
     b56:	55 1f       	adc	r21, r21
     b58:	6a 95       	dec	r22
     b5a:	d1 f7       	brne	.-12     	; 0xb50 <__unpack_f+0x54>
     b5c:	83 e0       	ldi	r24, 0x03	; 3
     b5e:	8c 93       	st	X, r24
     b60:	0d c0       	rjmp	.+26     	; 0xb7c <__unpack_f+0x80>
     b62:	22 0f       	add	r18, r18
     b64:	33 1f       	adc	r19, r19
     b66:	44 1f       	adc	r20, r20
     b68:	55 1f       	adc	r21, r21
     b6a:	12 96       	adiw	r26, 0x02	; 2
     b6c:	8d 91       	ld	r24, X+
     b6e:	9c 91       	ld	r25, X
     b70:	13 97       	sbiw	r26, 0x03	; 3
     b72:	01 97       	sbiw	r24, 0x01	; 1
     b74:	13 96       	adiw	r26, 0x03	; 3
     b76:	9c 93       	st	X, r25
     b78:	8e 93       	st	-X, r24
     b7a:	12 97       	sbiw	r26, 0x02	; 2
     b7c:	20 30       	cpi	r18, 0x00	; 0
     b7e:	80 e0       	ldi	r24, 0x00	; 0
     b80:	38 07       	cpc	r19, r24
     b82:	80 e0       	ldi	r24, 0x00	; 0
     b84:	48 07       	cpc	r20, r24
     b86:	80 e4       	ldi	r24, 0x40	; 64
     b88:	58 07       	cpc	r21, r24
     b8a:	58 f3       	brcs	.-42     	; 0xb62 <__unpack_f+0x66>
     b8c:	14 96       	adiw	r26, 0x04	; 4
     b8e:	2d 93       	st	X+, r18
     b90:	3d 93       	st	X+, r19
     b92:	4d 93       	st	X+, r20
     b94:	5c 93       	st	X, r21
     b96:	17 97       	sbiw	r26, 0x07	; 7
     b98:	08 95       	ret
     b9a:	2f 3f       	cpi	r18, 0xFF	; 255
     b9c:	31 05       	cpc	r19, r1
     b9e:	79 f4       	brne	.+30     	; 0xbbe <__unpack_f+0xc2>
     ba0:	41 15       	cp	r20, r1
     ba2:	51 05       	cpc	r21, r1
     ba4:	61 05       	cpc	r22, r1
     ba6:	71 05       	cpc	r23, r1
     ba8:	19 f4       	brne	.+6      	; 0xbb0 <__unpack_f+0xb4>
     baa:	84 e0       	ldi	r24, 0x04	; 4
     bac:	8c 93       	st	X, r24
     bae:	08 95       	ret
     bb0:	64 ff       	sbrs	r22, 4
     bb2:	03 c0       	rjmp	.+6      	; 0xbba <__unpack_f+0xbe>
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	8c 93       	st	X, r24
     bb8:	12 c0       	rjmp	.+36     	; 0xbde <__unpack_f+0xe2>
     bba:	1c 92       	st	X, r1
     bbc:	10 c0       	rjmp	.+32     	; 0xbde <__unpack_f+0xe2>
     bbe:	2f 57       	subi	r18, 0x7F	; 127
     bc0:	30 40       	sbci	r19, 0x00	; 0
     bc2:	13 96       	adiw	r26, 0x03	; 3
     bc4:	3c 93       	st	X, r19
     bc6:	2e 93       	st	-X, r18
     bc8:	12 97       	sbiw	r26, 0x02	; 2
     bca:	83 e0       	ldi	r24, 0x03	; 3
     bcc:	8c 93       	st	X, r24
     bce:	87 e0       	ldi	r24, 0x07	; 7
     bd0:	44 0f       	add	r20, r20
     bd2:	55 1f       	adc	r21, r21
     bd4:	66 1f       	adc	r22, r22
     bd6:	77 1f       	adc	r23, r23
     bd8:	8a 95       	dec	r24
     bda:	d1 f7       	brne	.-12     	; 0xbd0 <__unpack_f+0xd4>
     bdc:	70 64       	ori	r23, 0x40	; 64
     bde:	14 96       	adiw	r26, 0x04	; 4
     be0:	4d 93       	st	X+, r20
     be2:	5d 93       	st	X+, r21
     be4:	6d 93       	st	X+, r22
     be6:	7c 93       	st	X, r23
     be8:	17 97       	sbiw	r26, 0x07	; 7
     bea:	08 95       	ret

00000bec <__fpcmp_parts_f>:
     bec:	1f 93       	push	r17
     bee:	dc 01       	movw	r26, r24
     bf0:	fb 01       	movw	r30, r22
     bf2:	9c 91       	ld	r25, X
     bf4:	92 30       	cpi	r25, 0x02	; 2
     bf6:	08 f4       	brcc	.+2      	; 0xbfa <__fpcmp_parts_f+0xe>
     bf8:	47 c0       	rjmp	.+142    	; 0xc88 <__fpcmp_parts_f+0x9c>
     bfa:	80 81       	ld	r24, Z
     bfc:	82 30       	cpi	r24, 0x02	; 2
     bfe:	08 f4       	brcc	.+2      	; 0xc02 <__fpcmp_parts_f+0x16>
     c00:	43 c0       	rjmp	.+134    	; 0xc88 <__fpcmp_parts_f+0x9c>
     c02:	94 30       	cpi	r25, 0x04	; 4
     c04:	51 f4       	brne	.+20     	; 0xc1a <__fpcmp_parts_f+0x2e>
     c06:	11 96       	adiw	r26, 0x01	; 1
     c08:	1c 91       	ld	r17, X
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	99 f5       	brne	.+102    	; 0xc74 <__fpcmp_parts_f+0x88>
     c0e:	81 81       	ldd	r24, Z+1	; 0x01
     c10:	68 2f       	mov	r22, r24
     c12:	70 e0       	ldi	r23, 0x00	; 0
     c14:	61 1b       	sub	r22, r17
     c16:	71 09       	sbc	r23, r1
     c18:	3f c0       	rjmp	.+126    	; 0xc98 <__fpcmp_parts_f+0xac>
     c1a:	84 30       	cpi	r24, 0x04	; 4
     c1c:	21 f0       	breq	.+8      	; 0xc26 <__fpcmp_parts_f+0x3a>
     c1e:	92 30       	cpi	r25, 0x02	; 2
     c20:	31 f4       	brne	.+12     	; 0xc2e <__fpcmp_parts_f+0x42>
     c22:	82 30       	cpi	r24, 0x02	; 2
     c24:	b9 f1       	breq	.+110    	; 0xc94 <__fpcmp_parts_f+0xa8>
     c26:	81 81       	ldd	r24, Z+1	; 0x01
     c28:	88 23       	and	r24, r24
     c2a:	89 f1       	breq	.+98     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c2c:	2d c0       	rjmp	.+90     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c2e:	11 96       	adiw	r26, 0x01	; 1
     c30:	1c 91       	ld	r17, X
     c32:	11 97       	sbiw	r26, 0x01	; 1
     c34:	82 30       	cpi	r24, 0x02	; 2
     c36:	f1 f0       	breq	.+60     	; 0xc74 <__fpcmp_parts_f+0x88>
     c38:	81 81       	ldd	r24, Z+1	; 0x01
     c3a:	18 17       	cp	r17, r24
     c3c:	d9 f4       	brne	.+54     	; 0xc74 <__fpcmp_parts_f+0x88>
     c3e:	12 96       	adiw	r26, 0x02	; 2
     c40:	2d 91       	ld	r18, X+
     c42:	3c 91       	ld	r19, X
     c44:	13 97       	sbiw	r26, 0x03	; 3
     c46:	82 81       	ldd	r24, Z+2	; 0x02
     c48:	93 81       	ldd	r25, Z+3	; 0x03
     c4a:	82 17       	cp	r24, r18
     c4c:	93 07       	cpc	r25, r19
     c4e:	94 f0       	brlt	.+36     	; 0xc74 <__fpcmp_parts_f+0x88>
     c50:	28 17       	cp	r18, r24
     c52:	39 07       	cpc	r19, r25
     c54:	bc f0       	brlt	.+46     	; 0xc84 <__fpcmp_parts_f+0x98>
     c56:	14 96       	adiw	r26, 0x04	; 4
     c58:	8d 91       	ld	r24, X+
     c5a:	9d 91       	ld	r25, X+
     c5c:	0d 90       	ld	r0, X+
     c5e:	bc 91       	ld	r27, X
     c60:	a0 2d       	mov	r26, r0
     c62:	24 81       	ldd	r18, Z+4	; 0x04
     c64:	35 81       	ldd	r19, Z+5	; 0x05
     c66:	46 81       	ldd	r20, Z+6	; 0x06
     c68:	57 81       	ldd	r21, Z+7	; 0x07
     c6a:	28 17       	cp	r18, r24
     c6c:	39 07       	cpc	r19, r25
     c6e:	4a 07       	cpc	r20, r26
     c70:	5b 07       	cpc	r21, r27
     c72:	18 f4       	brcc	.+6      	; 0xc7a <__fpcmp_parts_f+0x8e>
     c74:	11 23       	and	r17, r17
     c76:	41 f0       	breq	.+16     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c78:	0a c0       	rjmp	.+20     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c7a:	82 17       	cp	r24, r18
     c7c:	93 07       	cpc	r25, r19
     c7e:	a4 07       	cpc	r26, r20
     c80:	b5 07       	cpc	r27, r21
     c82:	40 f4       	brcc	.+16     	; 0xc94 <__fpcmp_parts_f+0xa8>
     c84:	11 23       	and	r17, r17
     c86:	19 f0       	breq	.+6      	; 0xc8e <__fpcmp_parts_f+0xa2>
     c88:	61 e0       	ldi	r22, 0x01	; 1
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	05 c0       	rjmp	.+10     	; 0xc98 <__fpcmp_parts_f+0xac>
     c8e:	6f ef       	ldi	r22, 0xFF	; 255
     c90:	7f ef       	ldi	r23, 0xFF	; 255
     c92:	02 c0       	rjmp	.+4      	; 0xc98 <__fpcmp_parts_f+0xac>
     c94:	60 e0       	ldi	r22, 0x00	; 0
     c96:	70 e0       	ldi	r23, 0x00	; 0
     c98:	cb 01       	movw	r24, r22
     c9a:	1f 91       	pop	r17
     c9c:	08 95       	ret

00000c9e <SPI_MasterInit>:
 */

#include "master.h"

void SPI_MasterInit(void)
{
     c9e:	df 93       	push	r29
     ca0:	cf 93       	push	r28
     ca2:	cd b7       	in	r28, 0x3d	; 61
     ca4:	de b7       	in	r29, 0x3e	; 62
//	SET_BIT(SPCR,MSTR);
//	CLR_BIT(SPSR,SPI2X);
//	CLR_BIT(SPCR,SPR1);
//	SET_BIT(SPCR,SPR0);

SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR0);
     ca6:	ed e2       	ldi	r30, 0x2D	; 45
     ca8:	f0 e0       	ldi	r31, 0x00	; 0
     caa:	81 e5       	ldi	r24, 0x51	; 81
     cac:	80 83       	st	Z, r24
}
     cae:	cf 91       	pop	r28
     cb0:	df 91       	pop	r29
     cb2:	08 95       	ret

00000cb4 <SPI_MasterTransmit>:

void SPI_MasterTransmit(char cData)
{
     cb4:	df 93       	push	r29
     cb6:	cf 93       	push	r28
     cb8:	0f 92       	push	r0
     cba:	cd b7       	in	r28, 0x3d	; 61
     cbc:	de b7       	in	r29, 0x3e	; 62
     cbe:	89 83       	std	Y+1, r24	; 0x01
/* Start transmission */
SPDR = cData;
     cc0:	ef e2       	ldi	r30, 0x2F	; 47
     cc2:	f0 e0       	ldi	r31, 0x00	; 0
     cc4:	89 81       	ldd	r24, Y+1	; 0x01
     cc6:	80 83       	st	Z, r24
/* Wait for transmission complete */
while(!(SPSR & (1<<SPIF)))
     cc8:	ee e2       	ldi	r30, 0x2E	; 46
     cca:	f0 e0       	ldi	r31, 0x00	; 0
     ccc:	80 81       	ld	r24, Z
     cce:	88 23       	and	r24, r24
     cd0:	dc f7       	brge	.-10     	; 0xcc8 <SPI_MasterTransmit+0x14>
;

}
     cd2:	0f 90       	pop	r0
     cd4:	cf 91       	pop	r28
     cd6:	df 91       	pop	r29
     cd8:	08 95       	ret

00000cda <Dio_read>:
 *      Author: Mohamed Abdalla
 */
#include "Dio.h"


DIO_Level Dio_read(Channel_Type channel) {
     cda:	df 93       	push	r29
     cdc:	cf 93       	push	r28
     cde:	00 d0       	rcall	.+0      	; 0xce0 <Dio_read+0x6>
     ce0:	cd b7       	in	r28, 0x3d	; 61
     ce2:	de b7       	in	r29, 0x3e	; 62
     ce4:	89 83       	std	Y+1, r24	; 0x01

}
     ce6:	0f 90       	pop	r0
     ce8:	0f 90       	pop	r0
     cea:	cf 91       	pop	r28
     cec:	df 91       	pop	r29
     cee:	08 95       	ret

00000cf0 <Dio_write>:


void Dio_write(Channel_Type channel, DIO_Level level) {
     cf0:	df 93       	push	r29
     cf2:	cf 93       	push	r28
     cf4:	00 d0       	rcall	.+0      	; 0xcf6 <Dio_write+0x6>
     cf6:	00 d0       	rcall	.+0      	; 0xcf8 <Dio_write+0x8>
     cf8:	00 d0       	rcall	.+0      	; 0xcfa <Dio_write+0xa>
     cfa:	cd b7       	in	r28, 0x3d	; 61
     cfc:	de b7       	in	r29, 0x3e	; 62
     cfe:	8b 83       	std	Y+3, r24	; 0x03
     d00:	6c 83       	std	Y+4, r22	; 0x04
	DIO_Port port = channel / 8;
     d02:	8b 81       	ldd	r24, Y+3	; 0x03
     d04:	86 95       	lsr	r24
     d06:	86 95       	lsr	r24
     d08:	86 95       	lsr	r24
     d0a:	8a 83       	std	Y+2, r24	; 0x02
	DIO_Pin pin = channel % 8;
     d0c:	8b 81       	ldd	r24, Y+3	; 0x03
     d0e:	87 70       	andi	r24, 0x07	; 7
     d10:	89 83       	std	Y+1, r24	; 0x01

	switch (port) {
     d12:	8a 81       	ldd	r24, Y+2	; 0x02
     d14:	28 2f       	mov	r18, r24
     d16:	30 e0       	ldi	r19, 0x00	; 0
     d18:	3e 83       	std	Y+6, r19	; 0x06
     d1a:	2d 83       	std	Y+5, r18	; 0x05
     d1c:	8d 81       	ldd	r24, Y+5	; 0x05
     d1e:	9e 81       	ldd	r25, Y+6	; 0x06
     d20:	81 30       	cpi	r24, 0x01	; 1
     d22:	91 05       	cpc	r25, r1
     d24:	09 f4       	brne	.+2      	; 0xd28 <Dio_write+0x38>
     d26:	43 c0       	rjmp	.+134    	; 0xdae <Dio_write+0xbe>
     d28:	2d 81       	ldd	r18, Y+5	; 0x05
     d2a:	3e 81       	ldd	r19, Y+6	; 0x06
     d2c:	22 30       	cpi	r18, 0x02	; 2
     d2e:	31 05       	cpc	r19, r1
     d30:	2c f4       	brge	.+10     	; 0xd3c <Dio_write+0x4c>
     d32:	8d 81       	ldd	r24, Y+5	; 0x05
     d34:	9e 81       	ldd	r25, Y+6	; 0x06
     d36:	00 97       	sbiw	r24, 0x00	; 0
     d38:	71 f0       	breq	.+28     	; 0xd56 <Dio_write+0x66>
     d3a:	bc c0       	rjmp	.+376    	; 0xeb4 <Dio_write+0x1c4>
     d3c:	2d 81       	ldd	r18, Y+5	; 0x05
     d3e:	3e 81       	ldd	r19, Y+6	; 0x06
     d40:	22 30       	cpi	r18, 0x02	; 2
     d42:	31 05       	cpc	r19, r1
     d44:	09 f4       	brne	.+2      	; 0xd48 <Dio_write+0x58>
     d46:	5f c0       	rjmp	.+190    	; 0xe06 <Dio_write+0x116>
     d48:	8d 81       	ldd	r24, Y+5	; 0x05
     d4a:	9e 81       	ldd	r25, Y+6	; 0x06
     d4c:	83 30       	cpi	r24, 0x03	; 3
     d4e:	91 05       	cpc	r25, r1
     d50:	09 f4       	brne	.+2      	; 0xd54 <Dio_write+0x64>
     d52:	85 c0       	rjmp	.+266    	; 0xe5e <Dio_write+0x16e>
     d54:	af c0       	rjmp	.+350    	; 0xeb4 <Dio_write+0x1c4>
	case DIO_PortA:
		if (level == High) {
     d56:	8c 81       	ldd	r24, Y+4	; 0x04
     d58:	81 30       	cpi	r24, 0x01	; 1
     d5a:	a1 f4       	brne	.+40     	; 0xd84 <Dio_write+0x94>
			SET_BIT(PORTA, pin);
     d5c:	ab e3       	ldi	r26, 0x3B	; 59
     d5e:	b0 e0       	ldi	r27, 0x00	; 0
     d60:	eb e3       	ldi	r30, 0x3B	; 59
     d62:	f0 e0       	ldi	r31, 0x00	; 0
     d64:	80 81       	ld	r24, Z
     d66:	48 2f       	mov	r20, r24
     d68:	89 81       	ldd	r24, Y+1	; 0x01
     d6a:	28 2f       	mov	r18, r24
     d6c:	30 e0       	ldi	r19, 0x00	; 0
     d6e:	81 e0       	ldi	r24, 0x01	; 1
     d70:	90 e0       	ldi	r25, 0x00	; 0
     d72:	02 2e       	mov	r0, r18
     d74:	02 c0       	rjmp	.+4      	; 0xd7a <Dio_write+0x8a>
     d76:	88 0f       	add	r24, r24
     d78:	99 1f       	adc	r25, r25
     d7a:	0a 94       	dec	r0
     d7c:	e2 f7       	brpl	.-8      	; 0xd76 <Dio_write+0x86>
     d7e:	84 2b       	or	r24, r20
     d80:	8c 93       	st	X, r24
     d82:	98 c0       	rjmp	.+304    	; 0xeb4 <Dio_write+0x1c4>
		} else {
			CLR_BIT(PORTA, pin);
     d84:	ab e3       	ldi	r26, 0x3B	; 59
     d86:	b0 e0       	ldi	r27, 0x00	; 0
     d88:	eb e3       	ldi	r30, 0x3B	; 59
     d8a:	f0 e0       	ldi	r31, 0x00	; 0
     d8c:	80 81       	ld	r24, Z
     d8e:	48 2f       	mov	r20, r24
     d90:	89 81       	ldd	r24, Y+1	; 0x01
     d92:	28 2f       	mov	r18, r24
     d94:	30 e0       	ldi	r19, 0x00	; 0
     d96:	81 e0       	ldi	r24, 0x01	; 1
     d98:	90 e0       	ldi	r25, 0x00	; 0
     d9a:	02 2e       	mov	r0, r18
     d9c:	02 c0       	rjmp	.+4      	; 0xda2 <Dio_write+0xb2>
     d9e:	88 0f       	add	r24, r24
     da0:	99 1f       	adc	r25, r25
     da2:	0a 94       	dec	r0
     da4:	e2 f7       	brpl	.-8      	; 0xd9e <Dio_write+0xae>
     da6:	80 95       	com	r24
     da8:	84 23       	and	r24, r20
     daa:	8c 93       	st	X, r24
     dac:	83 c0       	rjmp	.+262    	; 0xeb4 <Dio_write+0x1c4>
		}
		break;
	case DIO_PortB:
		if (level == High) {
     dae:	8c 81       	ldd	r24, Y+4	; 0x04
     db0:	81 30       	cpi	r24, 0x01	; 1
     db2:	a1 f4       	brne	.+40     	; 0xddc <Dio_write+0xec>
			SET_BIT(PORTB, pin);
     db4:	a8 e3       	ldi	r26, 0x38	; 56
     db6:	b0 e0       	ldi	r27, 0x00	; 0
     db8:	e8 e3       	ldi	r30, 0x38	; 56
     dba:	f0 e0       	ldi	r31, 0x00	; 0
     dbc:	80 81       	ld	r24, Z
     dbe:	48 2f       	mov	r20, r24
     dc0:	89 81       	ldd	r24, Y+1	; 0x01
     dc2:	28 2f       	mov	r18, r24
     dc4:	30 e0       	ldi	r19, 0x00	; 0
     dc6:	81 e0       	ldi	r24, 0x01	; 1
     dc8:	90 e0       	ldi	r25, 0x00	; 0
     dca:	02 2e       	mov	r0, r18
     dcc:	02 c0       	rjmp	.+4      	; 0xdd2 <Dio_write+0xe2>
     dce:	88 0f       	add	r24, r24
     dd0:	99 1f       	adc	r25, r25
     dd2:	0a 94       	dec	r0
     dd4:	e2 f7       	brpl	.-8      	; 0xdce <Dio_write+0xde>
     dd6:	84 2b       	or	r24, r20
     dd8:	8c 93       	st	X, r24
     dda:	6c c0       	rjmp	.+216    	; 0xeb4 <Dio_write+0x1c4>
		} else {
			CLR_BIT(PORTB, pin);
     ddc:	a8 e3       	ldi	r26, 0x38	; 56
     dde:	b0 e0       	ldi	r27, 0x00	; 0
     de0:	e8 e3       	ldi	r30, 0x38	; 56
     de2:	f0 e0       	ldi	r31, 0x00	; 0
     de4:	80 81       	ld	r24, Z
     de6:	48 2f       	mov	r20, r24
     de8:	89 81       	ldd	r24, Y+1	; 0x01
     dea:	28 2f       	mov	r18, r24
     dec:	30 e0       	ldi	r19, 0x00	; 0
     dee:	81 e0       	ldi	r24, 0x01	; 1
     df0:	90 e0       	ldi	r25, 0x00	; 0
     df2:	02 2e       	mov	r0, r18
     df4:	02 c0       	rjmp	.+4      	; 0xdfa <Dio_write+0x10a>
     df6:	88 0f       	add	r24, r24
     df8:	99 1f       	adc	r25, r25
     dfa:	0a 94       	dec	r0
     dfc:	e2 f7       	brpl	.-8      	; 0xdf6 <Dio_write+0x106>
     dfe:	80 95       	com	r24
     e00:	84 23       	and	r24, r20
     e02:	8c 93       	st	X, r24
     e04:	57 c0       	rjmp	.+174    	; 0xeb4 <Dio_write+0x1c4>
		}
		break;
	case DIO_PortC:
		if (level == High) {
     e06:	8c 81       	ldd	r24, Y+4	; 0x04
     e08:	81 30       	cpi	r24, 0x01	; 1
     e0a:	a1 f4       	brne	.+40     	; 0xe34 <Dio_write+0x144>
			SET_BIT(PORTC, pin);
     e0c:	a5 e3       	ldi	r26, 0x35	; 53
     e0e:	b0 e0       	ldi	r27, 0x00	; 0
     e10:	e5 e3       	ldi	r30, 0x35	; 53
     e12:	f0 e0       	ldi	r31, 0x00	; 0
     e14:	80 81       	ld	r24, Z
     e16:	48 2f       	mov	r20, r24
     e18:	89 81       	ldd	r24, Y+1	; 0x01
     e1a:	28 2f       	mov	r18, r24
     e1c:	30 e0       	ldi	r19, 0x00	; 0
     e1e:	81 e0       	ldi	r24, 0x01	; 1
     e20:	90 e0       	ldi	r25, 0x00	; 0
     e22:	02 2e       	mov	r0, r18
     e24:	02 c0       	rjmp	.+4      	; 0xe2a <Dio_write+0x13a>
     e26:	88 0f       	add	r24, r24
     e28:	99 1f       	adc	r25, r25
     e2a:	0a 94       	dec	r0
     e2c:	e2 f7       	brpl	.-8      	; 0xe26 <Dio_write+0x136>
     e2e:	84 2b       	or	r24, r20
     e30:	8c 93       	st	X, r24
     e32:	40 c0       	rjmp	.+128    	; 0xeb4 <Dio_write+0x1c4>
		} else {
			CLR_BIT(PORTC, pin);
     e34:	a5 e3       	ldi	r26, 0x35	; 53
     e36:	b0 e0       	ldi	r27, 0x00	; 0
     e38:	e5 e3       	ldi	r30, 0x35	; 53
     e3a:	f0 e0       	ldi	r31, 0x00	; 0
     e3c:	80 81       	ld	r24, Z
     e3e:	48 2f       	mov	r20, r24
     e40:	89 81       	ldd	r24, Y+1	; 0x01
     e42:	28 2f       	mov	r18, r24
     e44:	30 e0       	ldi	r19, 0x00	; 0
     e46:	81 e0       	ldi	r24, 0x01	; 1
     e48:	90 e0       	ldi	r25, 0x00	; 0
     e4a:	02 2e       	mov	r0, r18
     e4c:	02 c0       	rjmp	.+4      	; 0xe52 <Dio_write+0x162>
     e4e:	88 0f       	add	r24, r24
     e50:	99 1f       	adc	r25, r25
     e52:	0a 94       	dec	r0
     e54:	e2 f7       	brpl	.-8      	; 0xe4e <Dio_write+0x15e>
     e56:	80 95       	com	r24
     e58:	84 23       	and	r24, r20
     e5a:	8c 93       	st	X, r24
     e5c:	2b c0       	rjmp	.+86     	; 0xeb4 <Dio_write+0x1c4>
		}
		break;
	case DIO_PortD:
		if (level == High) {
     e5e:	8c 81       	ldd	r24, Y+4	; 0x04
     e60:	81 30       	cpi	r24, 0x01	; 1
     e62:	a1 f4       	brne	.+40     	; 0xe8c <Dio_write+0x19c>
			SET_BIT(PORTD, pin);
     e64:	a2 e3       	ldi	r26, 0x32	; 50
     e66:	b0 e0       	ldi	r27, 0x00	; 0
     e68:	e2 e3       	ldi	r30, 0x32	; 50
     e6a:	f0 e0       	ldi	r31, 0x00	; 0
     e6c:	80 81       	ld	r24, Z
     e6e:	48 2f       	mov	r20, r24
     e70:	89 81       	ldd	r24, Y+1	; 0x01
     e72:	28 2f       	mov	r18, r24
     e74:	30 e0       	ldi	r19, 0x00	; 0
     e76:	81 e0       	ldi	r24, 0x01	; 1
     e78:	90 e0       	ldi	r25, 0x00	; 0
     e7a:	02 2e       	mov	r0, r18
     e7c:	02 c0       	rjmp	.+4      	; 0xe82 <Dio_write+0x192>
     e7e:	88 0f       	add	r24, r24
     e80:	99 1f       	adc	r25, r25
     e82:	0a 94       	dec	r0
     e84:	e2 f7       	brpl	.-8      	; 0xe7e <Dio_write+0x18e>
     e86:	84 2b       	or	r24, r20
     e88:	8c 93       	st	X, r24
     e8a:	14 c0       	rjmp	.+40     	; 0xeb4 <Dio_write+0x1c4>
		} else {
			CLR_BIT(PORTD, pin);
     e8c:	a2 e3       	ldi	r26, 0x32	; 50
     e8e:	b0 e0       	ldi	r27, 0x00	; 0
     e90:	e2 e3       	ldi	r30, 0x32	; 50
     e92:	f0 e0       	ldi	r31, 0x00	; 0
     e94:	80 81       	ld	r24, Z
     e96:	48 2f       	mov	r20, r24
     e98:	89 81       	ldd	r24, Y+1	; 0x01
     e9a:	28 2f       	mov	r18, r24
     e9c:	30 e0       	ldi	r19, 0x00	; 0
     e9e:	81 e0       	ldi	r24, 0x01	; 1
     ea0:	90 e0       	ldi	r25, 0x00	; 0
     ea2:	02 2e       	mov	r0, r18
     ea4:	02 c0       	rjmp	.+4      	; 0xeaa <Dio_write+0x1ba>
     ea6:	88 0f       	add	r24, r24
     ea8:	99 1f       	adc	r25, r25
     eaa:	0a 94       	dec	r0
     eac:	e2 f7       	brpl	.-8      	; 0xea6 <Dio_write+0x1b6>
     eae:	80 95       	com	r24
     eb0:	84 23       	and	r24, r20
     eb2:	8c 93       	st	X, r24
		break;
	default:
		break;
	}

}
     eb4:	26 96       	adiw	r28, 0x06	; 6
     eb6:	0f b6       	in	r0, 0x3f	; 63
     eb8:	f8 94       	cli
     eba:	de bf       	out	0x3e, r29	; 62
     ebc:	0f be       	out	0x3f, r0	; 63
     ebe:	cd bf       	out	0x3d, r28	; 61
     ec0:	cf 91       	pop	r28
     ec2:	df 91       	pop	r29
     ec4:	08 95       	ret

00000ec6 <Dio_Port_write>:

void Dio_Port_write(DIO_Port port, uint8 data) {
     ec6:	df 93       	push	r29
     ec8:	cf 93       	push	r28
     eca:	00 d0       	rcall	.+0      	; 0xecc <Dio_Port_write+0x6>
     ecc:	00 d0       	rcall	.+0      	; 0xece <Dio_Port_write+0x8>
     ece:	cd b7       	in	r28, 0x3d	; 61
     ed0:	de b7       	in	r29, 0x3e	; 62
     ed2:	89 83       	std	Y+1, r24	; 0x01
     ed4:	6a 83       	std	Y+2, r22	; 0x02

	switch (port) {
     ed6:	89 81       	ldd	r24, Y+1	; 0x01
     ed8:	28 2f       	mov	r18, r24
     eda:	30 e0       	ldi	r19, 0x00	; 0
     edc:	3c 83       	std	Y+4, r19	; 0x04
     ede:	2b 83       	std	Y+3, r18	; 0x03
     ee0:	8b 81       	ldd	r24, Y+3	; 0x03
     ee2:	9c 81       	ldd	r25, Y+4	; 0x04
     ee4:	81 30       	cpi	r24, 0x01	; 1
     ee6:	91 05       	cpc	r25, r1
     ee8:	d1 f0       	breq	.+52     	; 0xf1e <Dio_Port_write+0x58>
     eea:	2b 81       	ldd	r18, Y+3	; 0x03
     eec:	3c 81       	ldd	r19, Y+4	; 0x04
     eee:	22 30       	cpi	r18, 0x02	; 2
     ef0:	31 05       	cpc	r19, r1
     ef2:	2c f4       	brge	.+10     	; 0xefe <Dio_Port_write+0x38>
     ef4:	8b 81       	ldd	r24, Y+3	; 0x03
     ef6:	9c 81       	ldd	r25, Y+4	; 0x04
     ef8:	00 97       	sbiw	r24, 0x00	; 0
     efa:	61 f0       	breq	.+24     	; 0xf14 <Dio_Port_write+0x4e>
     efc:	1e c0       	rjmp	.+60     	; 0xf3a <Dio_Port_write+0x74>
     efe:	2b 81       	ldd	r18, Y+3	; 0x03
     f00:	3c 81       	ldd	r19, Y+4	; 0x04
     f02:	22 30       	cpi	r18, 0x02	; 2
     f04:	31 05       	cpc	r19, r1
     f06:	81 f0       	breq	.+32     	; 0xf28 <Dio_Port_write+0x62>
     f08:	8b 81       	ldd	r24, Y+3	; 0x03
     f0a:	9c 81       	ldd	r25, Y+4	; 0x04
     f0c:	83 30       	cpi	r24, 0x03	; 3
     f0e:	91 05       	cpc	r25, r1
     f10:	81 f0       	breq	.+32     	; 0xf32 <Dio_Port_write+0x6c>
     f12:	13 c0       	rjmp	.+38     	; 0xf3a <Dio_Port_write+0x74>
	case DIO_PortA:
		PORTA = data;
     f14:	eb e3       	ldi	r30, 0x3B	; 59
     f16:	f0 e0       	ldi	r31, 0x00	; 0
     f18:	8a 81       	ldd	r24, Y+2	; 0x02
     f1a:	80 83       	st	Z, r24
     f1c:	0e c0       	rjmp	.+28     	; 0xf3a <Dio_Port_write+0x74>
		break;
	case DIO_PortB:
		PORTB = data;
     f1e:	e8 e3       	ldi	r30, 0x38	; 56
     f20:	f0 e0       	ldi	r31, 0x00	; 0
     f22:	8a 81       	ldd	r24, Y+2	; 0x02
     f24:	80 83       	st	Z, r24
     f26:	09 c0       	rjmp	.+18     	; 0xf3a <Dio_Port_write+0x74>
		break;
	case DIO_PortC:
		PORTC = data;
     f28:	e5 e3       	ldi	r30, 0x35	; 53
     f2a:	f0 e0       	ldi	r31, 0x00	; 0
     f2c:	8a 81       	ldd	r24, Y+2	; 0x02
     f2e:	80 83       	st	Z, r24
     f30:	04 c0       	rjmp	.+8      	; 0xf3a <Dio_Port_write+0x74>
		break;
	case DIO_PortD:
		PORTD = data;
     f32:	e2 e3       	ldi	r30, 0x32	; 50
     f34:	f0 e0       	ldi	r31, 0x00	; 0
     f36:	8a 81       	ldd	r24, Y+2	; 0x02
     f38:	80 83       	st	Z, r24
		break;
	default:
		break;
	}
}
     f3a:	0f 90       	pop	r0
     f3c:	0f 90       	pop	r0
     f3e:	0f 90       	pop	r0
     f40:	0f 90       	pop	r0
     f42:	cf 91       	pop	r28
     f44:	df 91       	pop	r29
     f46:	08 95       	ret

00000f48 <Dio_init>:
		{DIO_PortD, DIO_Pin2, Output},
//		{DIO_PortD, DIO_Pin4, Output},
//		{DIO_PortD, DIO_Pin5, Output}
};

void Dio_init(void){
     f48:	df 93       	push	r29
     f4a:	cf 93       	push	r28
     f4c:	00 d0       	rcall	.+0      	; 0xf4e <Dio_init+0x6>
     f4e:	00 d0       	rcall	.+0      	; 0xf50 <Dio_init+0x8>
     f50:	cd b7       	in	r28, 0x3d	; 61
     f52:	de b7       	in	r29, 0x3e	; 62
	int count = sizeof(Pin_Cfgs)/ sizeof(Pin_Cfgs[0]);
     f54:	8a e0       	ldi	r24, 0x0A	; 10
     f56:	90 e0       	ldi	r25, 0x00	; 0
     f58:	9c 83       	std	Y+4, r25	; 0x04
     f5a:	8b 83       	std	Y+3, r24	; 0x03
	int i = 0;
     f5c:	1a 82       	std	Y+2, r1	; 0x02
     f5e:	19 82       	std	Y+1, r1	; 0x01
	for(i = 0; i < count ; i++){
     f60:	1a 82       	std	Y+2, r1	; 0x02
     f62:	19 82       	std	Y+1, r1	; 0x01
     f64:	57 c1       	rjmp	.+686    	; 0x1214 <Dio_init+0x2cc>
		if(Pin_Cfgs[i].PinPort == DIO_PortA){ //DDRA
     f66:	89 81       	ldd	r24, Y+1	; 0x01
     f68:	9a 81       	ldd	r25, Y+2	; 0x02
     f6a:	88 0f       	add	r24, r24
     f6c:	99 1f       	adc	r25, r25
     f6e:	88 0f       	add	r24, r24
     f70:	99 1f       	adc	r25, r25
     f72:	fc 01       	movw	r30, r24
     f74:	e8 59       	subi	r30, 0x98	; 152
     f76:	ff 4f       	sbci	r31, 0xFF	; 255
     f78:	80 81       	ld	r24, Z
     f7a:	88 23       	and	r24, r24
     f7c:	09 f0       	breq	.+2      	; 0xf80 <Dio_init+0x38>
     f7e:	48 c0       	rjmp	.+144    	; 0x1010 <Dio_init+0xc8>
			if(Pin_Cfgs[i].PinDir == Output){
     f80:	89 81       	ldd	r24, Y+1	; 0x01
     f82:	9a 81       	ldd	r25, Y+2	; 0x02
     f84:	88 0f       	add	r24, r24
     f86:	99 1f       	adc	r25, r25
     f88:	01 96       	adiw	r24, 0x01	; 1
     f8a:	88 0f       	add	r24, r24
     f8c:	99 1f       	adc	r25, r25
     f8e:	fc 01       	movw	r30, r24
     f90:	e8 59       	subi	r30, 0x98	; 152
     f92:	ff 4f       	sbci	r31, 0xFF	; 255
     f94:	80 81       	ld	r24, Z
     f96:	81 30       	cpi	r24, 0x01	; 1
     f98:	e9 f4       	brne	.+58     	; 0xfd4 <Dio_init+0x8c>
				SET_BIT(DDRA,Pin_Cfgs[i].Pin);
     f9a:	aa e3       	ldi	r26, 0x3A	; 58
     f9c:	b0 e0       	ldi	r27, 0x00	; 0
     f9e:	ea e3       	ldi	r30, 0x3A	; 58
     fa0:	f0 e0       	ldi	r31, 0x00	; 0
     fa2:	80 81       	ld	r24, Z
     fa4:	48 2f       	mov	r20, r24
     fa6:	89 81       	ldd	r24, Y+1	; 0x01
     fa8:	9a 81       	ldd	r25, Y+2	; 0x02
     faa:	88 0f       	add	r24, r24
     fac:	99 1f       	adc	r25, r25
     fae:	88 0f       	add	r24, r24
     fb0:	99 1f       	adc	r25, r25
     fb2:	fc 01       	movw	r30, r24
     fb4:	e7 59       	subi	r30, 0x97	; 151
     fb6:	ff 4f       	sbci	r31, 0xFF	; 255
     fb8:	80 81       	ld	r24, Z
     fba:	28 2f       	mov	r18, r24
     fbc:	30 e0       	ldi	r19, 0x00	; 0
     fbe:	81 e0       	ldi	r24, 0x01	; 1
     fc0:	90 e0       	ldi	r25, 0x00	; 0
     fc2:	02 2e       	mov	r0, r18
     fc4:	02 c0       	rjmp	.+4      	; 0xfca <Dio_init+0x82>
     fc6:	88 0f       	add	r24, r24
     fc8:	99 1f       	adc	r25, r25
     fca:	0a 94       	dec	r0
     fcc:	e2 f7       	brpl	.-8      	; 0xfc6 <Dio_init+0x7e>
     fce:	84 2b       	or	r24, r20
     fd0:	8c 93       	st	X, r24
     fd2:	1b c1       	rjmp	.+566    	; 0x120a <Dio_init+0x2c2>
			}
			else{
				CLR_BIT(DDRA,Pin_Cfgs[i].Pin);
     fd4:	aa e3       	ldi	r26, 0x3A	; 58
     fd6:	b0 e0       	ldi	r27, 0x00	; 0
     fd8:	ea e3       	ldi	r30, 0x3A	; 58
     fda:	f0 e0       	ldi	r31, 0x00	; 0
     fdc:	80 81       	ld	r24, Z
     fde:	48 2f       	mov	r20, r24
     fe0:	89 81       	ldd	r24, Y+1	; 0x01
     fe2:	9a 81       	ldd	r25, Y+2	; 0x02
     fe4:	88 0f       	add	r24, r24
     fe6:	99 1f       	adc	r25, r25
     fe8:	88 0f       	add	r24, r24
     fea:	99 1f       	adc	r25, r25
     fec:	fc 01       	movw	r30, r24
     fee:	e7 59       	subi	r30, 0x97	; 151
     ff0:	ff 4f       	sbci	r31, 0xFF	; 255
     ff2:	80 81       	ld	r24, Z
     ff4:	28 2f       	mov	r18, r24
     ff6:	30 e0       	ldi	r19, 0x00	; 0
     ff8:	81 e0       	ldi	r24, 0x01	; 1
     ffa:	90 e0       	ldi	r25, 0x00	; 0
     ffc:	02 2e       	mov	r0, r18
     ffe:	02 c0       	rjmp	.+4      	; 0x1004 <Dio_init+0xbc>
    1000:	88 0f       	add	r24, r24
    1002:	99 1f       	adc	r25, r25
    1004:	0a 94       	dec	r0
    1006:	e2 f7       	brpl	.-8      	; 0x1000 <Dio_init+0xb8>
    1008:	80 95       	com	r24
    100a:	84 23       	and	r24, r20
    100c:	8c 93       	st	X, r24
    100e:	fd c0       	rjmp	.+506    	; 0x120a <Dio_init+0x2c2>
			}
		}
		else if(Pin_Cfgs[i].PinPort == DIO_PortB){ //DDRB
    1010:	89 81       	ldd	r24, Y+1	; 0x01
    1012:	9a 81       	ldd	r25, Y+2	; 0x02
    1014:	88 0f       	add	r24, r24
    1016:	99 1f       	adc	r25, r25
    1018:	88 0f       	add	r24, r24
    101a:	99 1f       	adc	r25, r25
    101c:	fc 01       	movw	r30, r24
    101e:	e8 59       	subi	r30, 0x98	; 152
    1020:	ff 4f       	sbci	r31, 0xFF	; 255
    1022:	80 81       	ld	r24, Z
    1024:	81 30       	cpi	r24, 0x01	; 1
    1026:	09 f0       	breq	.+2      	; 0x102a <Dio_init+0xe2>
    1028:	48 c0       	rjmp	.+144    	; 0x10ba <Dio_init+0x172>
			if(Pin_Cfgs[i].PinDir == Output){
    102a:	89 81       	ldd	r24, Y+1	; 0x01
    102c:	9a 81       	ldd	r25, Y+2	; 0x02
    102e:	88 0f       	add	r24, r24
    1030:	99 1f       	adc	r25, r25
    1032:	01 96       	adiw	r24, 0x01	; 1
    1034:	88 0f       	add	r24, r24
    1036:	99 1f       	adc	r25, r25
    1038:	fc 01       	movw	r30, r24
    103a:	e8 59       	subi	r30, 0x98	; 152
    103c:	ff 4f       	sbci	r31, 0xFF	; 255
    103e:	80 81       	ld	r24, Z
    1040:	81 30       	cpi	r24, 0x01	; 1
    1042:	e9 f4       	brne	.+58     	; 0x107e <Dio_init+0x136>
				SET_BIT(DDRB,Pin_Cfgs[i].Pin);
    1044:	a7 e3       	ldi	r26, 0x37	; 55
    1046:	b0 e0       	ldi	r27, 0x00	; 0
    1048:	e7 e3       	ldi	r30, 0x37	; 55
    104a:	f0 e0       	ldi	r31, 0x00	; 0
    104c:	80 81       	ld	r24, Z
    104e:	48 2f       	mov	r20, r24
    1050:	89 81       	ldd	r24, Y+1	; 0x01
    1052:	9a 81       	ldd	r25, Y+2	; 0x02
    1054:	88 0f       	add	r24, r24
    1056:	99 1f       	adc	r25, r25
    1058:	88 0f       	add	r24, r24
    105a:	99 1f       	adc	r25, r25
    105c:	fc 01       	movw	r30, r24
    105e:	e7 59       	subi	r30, 0x97	; 151
    1060:	ff 4f       	sbci	r31, 0xFF	; 255
    1062:	80 81       	ld	r24, Z
    1064:	28 2f       	mov	r18, r24
    1066:	30 e0       	ldi	r19, 0x00	; 0
    1068:	81 e0       	ldi	r24, 0x01	; 1
    106a:	90 e0       	ldi	r25, 0x00	; 0
    106c:	02 2e       	mov	r0, r18
    106e:	02 c0       	rjmp	.+4      	; 0x1074 <Dio_init+0x12c>
    1070:	88 0f       	add	r24, r24
    1072:	99 1f       	adc	r25, r25
    1074:	0a 94       	dec	r0
    1076:	e2 f7       	brpl	.-8      	; 0x1070 <Dio_init+0x128>
    1078:	84 2b       	or	r24, r20
    107a:	8c 93       	st	X, r24
    107c:	c6 c0       	rjmp	.+396    	; 0x120a <Dio_init+0x2c2>
			}
			else{
				CLR_BIT(DDRB,Pin_Cfgs[i].Pin);
    107e:	a7 e3       	ldi	r26, 0x37	; 55
    1080:	b0 e0       	ldi	r27, 0x00	; 0
    1082:	e7 e3       	ldi	r30, 0x37	; 55
    1084:	f0 e0       	ldi	r31, 0x00	; 0
    1086:	80 81       	ld	r24, Z
    1088:	48 2f       	mov	r20, r24
    108a:	89 81       	ldd	r24, Y+1	; 0x01
    108c:	9a 81       	ldd	r25, Y+2	; 0x02
    108e:	88 0f       	add	r24, r24
    1090:	99 1f       	adc	r25, r25
    1092:	88 0f       	add	r24, r24
    1094:	99 1f       	adc	r25, r25
    1096:	fc 01       	movw	r30, r24
    1098:	e7 59       	subi	r30, 0x97	; 151
    109a:	ff 4f       	sbci	r31, 0xFF	; 255
    109c:	80 81       	ld	r24, Z
    109e:	28 2f       	mov	r18, r24
    10a0:	30 e0       	ldi	r19, 0x00	; 0
    10a2:	81 e0       	ldi	r24, 0x01	; 1
    10a4:	90 e0       	ldi	r25, 0x00	; 0
    10a6:	02 2e       	mov	r0, r18
    10a8:	02 c0       	rjmp	.+4      	; 0x10ae <Dio_init+0x166>
    10aa:	88 0f       	add	r24, r24
    10ac:	99 1f       	adc	r25, r25
    10ae:	0a 94       	dec	r0
    10b0:	e2 f7       	brpl	.-8      	; 0x10aa <Dio_init+0x162>
    10b2:	80 95       	com	r24
    10b4:	84 23       	and	r24, r20
    10b6:	8c 93       	st	X, r24
    10b8:	a8 c0       	rjmp	.+336    	; 0x120a <Dio_init+0x2c2>
			}
		}
		else if(Pin_Cfgs[i].PinPort == DIO_PortC){ //DDRC
    10ba:	89 81       	ldd	r24, Y+1	; 0x01
    10bc:	9a 81       	ldd	r25, Y+2	; 0x02
    10be:	88 0f       	add	r24, r24
    10c0:	99 1f       	adc	r25, r25
    10c2:	88 0f       	add	r24, r24
    10c4:	99 1f       	adc	r25, r25
    10c6:	fc 01       	movw	r30, r24
    10c8:	e8 59       	subi	r30, 0x98	; 152
    10ca:	ff 4f       	sbci	r31, 0xFF	; 255
    10cc:	80 81       	ld	r24, Z
    10ce:	82 30       	cpi	r24, 0x02	; 2
    10d0:	09 f0       	breq	.+2      	; 0x10d4 <Dio_init+0x18c>
    10d2:	48 c0       	rjmp	.+144    	; 0x1164 <Dio_init+0x21c>
			if(Pin_Cfgs[i].PinDir == Output){
    10d4:	89 81       	ldd	r24, Y+1	; 0x01
    10d6:	9a 81       	ldd	r25, Y+2	; 0x02
    10d8:	88 0f       	add	r24, r24
    10da:	99 1f       	adc	r25, r25
    10dc:	01 96       	adiw	r24, 0x01	; 1
    10de:	88 0f       	add	r24, r24
    10e0:	99 1f       	adc	r25, r25
    10e2:	fc 01       	movw	r30, r24
    10e4:	e8 59       	subi	r30, 0x98	; 152
    10e6:	ff 4f       	sbci	r31, 0xFF	; 255
    10e8:	80 81       	ld	r24, Z
    10ea:	81 30       	cpi	r24, 0x01	; 1
    10ec:	e9 f4       	brne	.+58     	; 0x1128 <Dio_init+0x1e0>
				SET_BIT(DDRC,Pin_Cfgs[i].Pin);
    10ee:	a4 e3       	ldi	r26, 0x34	; 52
    10f0:	b0 e0       	ldi	r27, 0x00	; 0
    10f2:	e4 e3       	ldi	r30, 0x34	; 52
    10f4:	f0 e0       	ldi	r31, 0x00	; 0
    10f6:	80 81       	ld	r24, Z
    10f8:	48 2f       	mov	r20, r24
    10fa:	89 81       	ldd	r24, Y+1	; 0x01
    10fc:	9a 81       	ldd	r25, Y+2	; 0x02
    10fe:	88 0f       	add	r24, r24
    1100:	99 1f       	adc	r25, r25
    1102:	88 0f       	add	r24, r24
    1104:	99 1f       	adc	r25, r25
    1106:	fc 01       	movw	r30, r24
    1108:	e7 59       	subi	r30, 0x97	; 151
    110a:	ff 4f       	sbci	r31, 0xFF	; 255
    110c:	80 81       	ld	r24, Z
    110e:	28 2f       	mov	r18, r24
    1110:	30 e0       	ldi	r19, 0x00	; 0
    1112:	81 e0       	ldi	r24, 0x01	; 1
    1114:	90 e0       	ldi	r25, 0x00	; 0
    1116:	02 2e       	mov	r0, r18
    1118:	02 c0       	rjmp	.+4      	; 0x111e <Dio_init+0x1d6>
    111a:	88 0f       	add	r24, r24
    111c:	99 1f       	adc	r25, r25
    111e:	0a 94       	dec	r0
    1120:	e2 f7       	brpl	.-8      	; 0x111a <Dio_init+0x1d2>
    1122:	84 2b       	or	r24, r20
    1124:	8c 93       	st	X, r24
    1126:	71 c0       	rjmp	.+226    	; 0x120a <Dio_init+0x2c2>
			}
			else{
				CLR_BIT(DDRC,Pin_Cfgs[i].Pin);
    1128:	a4 e3       	ldi	r26, 0x34	; 52
    112a:	b0 e0       	ldi	r27, 0x00	; 0
    112c:	e4 e3       	ldi	r30, 0x34	; 52
    112e:	f0 e0       	ldi	r31, 0x00	; 0
    1130:	80 81       	ld	r24, Z
    1132:	48 2f       	mov	r20, r24
    1134:	89 81       	ldd	r24, Y+1	; 0x01
    1136:	9a 81       	ldd	r25, Y+2	; 0x02
    1138:	88 0f       	add	r24, r24
    113a:	99 1f       	adc	r25, r25
    113c:	88 0f       	add	r24, r24
    113e:	99 1f       	adc	r25, r25
    1140:	fc 01       	movw	r30, r24
    1142:	e7 59       	subi	r30, 0x97	; 151
    1144:	ff 4f       	sbci	r31, 0xFF	; 255
    1146:	80 81       	ld	r24, Z
    1148:	28 2f       	mov	r18, r24
    114a:	30 e0       	ldi	r19, 0x00	; 0
    114c:	81 e0       	ldi	r24, 0x01	; 1
    114e:	90 e0       	ldi	r25, 0x00	; 0
    1150:	02 2e       	mov	r0, r18
    1152:	02 c0       	rjmp	.+4      	; 0x1158 <Dio_init+0x210>
    1154:	88 0f       	add	r24, r24
    1156:	99 1f       	adc	r25, r25
    1158:	0a 94       	dec	r0
    115a:	e2 f7       	brpl	.-8      	; 0x1154 <Dio_init+0x20c>
    115c:	80 95       	com	r24
    115e:	84 23       	and	r24, r20
    1160:	8c 93       	st	X, r24
    1162:	53 c0       	rjmp	.+166    	; 0x120a <Dio_init+0x2c2>
			}
		}
		else if(Pin_Cfgs[i].PinPort == DIO_PortD){ //DDRD
    1164:	89 81       	ldd	r24, Y+1	; 0x01
    1166:	9a 81       	ldd	r25, Y+2	; 0x02
    1168:	88 0f       	add	r24, r24
    116a:	99 1f       	adc	r25, r25
    116c:	88 0f       	add	r24, r24
    116e:	99 1f       	adc	r25, r25
    1170:	fc 01       	movw	r30, r24
    1172:	e8 59       	subi	r30, 0x98	; 152
    1174:	ff 4f       	sbci	r31, 0xFF	; 255
    1176:	80 81       	ld	r24, Z
    1178:	83 30       	cpi	r24, 0x03	; 3
    117a:	09 f0       	breq	.+2      	; 0x117e <Dio_init+0x236>
    117c:	46 c0       	rjmp	.+140    	; 0x120a <Dio_init+0x2c2>
			if(Pin_Cfgs[i].PinDir == Output){
    117e:	89 81       	ldd	r24, Y+1	; 0x01
    1180:	9a 81       	ldd	r25, Y+2	; 0x02
    1182:	88 0f       	add	r24, r24
    1184:	99 1f       	adc	r25, r25
    1186:	01 96       	adiw	r24, 0x01	; 1
    1188:	88 0f       	add	r24, r24
    118a:	99 1f       	adc	r25, r25
    118c:	fc 01       	movw	r30, r24
    118e:	e8 59       	subi	r30, 0x98	; 152
    1190:	ff 4f       	sbci	r31, 0xFF	; 255
    1192:	80 81       	ld	r24, Z
    1194:	81 30       	cpi	r24, 0x01	; 1
    1196:	e9 f4       	brne	.+58     	; 0x11d2 <Dio_init+0x28a>
				SET_BIT(DDRD,Pin_Cfgs[i].Pin);
    1198:	a1 e3       	ldi	r26, 0x31	; 49
    119a:	b0 e0       	ldi	r27, 0x00	; 0
    119c:	e1 e3       	ldi	r30, 0x31	; 49
    119e:	f0 e0       	ldi	r31, 0x00	; 0
    11a0:	80 81       	ld	r24, Z
    11a2:	48 2f       	mov	r20, r24
    11a4:	89 81       	ldd	r24, Y+1	; 0x01
    11a6:	9a 81       	ldd	r25, Y+2	; 0x02
    11a8:	88 0f       	add	r24, r24
    11aa:	99 1f       	adc	r25, r25
    11ac:	88 0f       	add	r24, r24
    11ae:	99 1f       	adc	r25, r25
    11b0:	fc 01       	movw	r30, r24
    11b2:	e7 59       	subi	r30, 0x97	; 151
    11b4:	ff 4f       	sbci	r31, 0xFF	; 255
    11b6:	80 81       	ld	r24, Z
    11b8:	28 2f       	mov	r18, r24
    11ba:	30 e0       	ldi	r19, 0x00	; 0
    11bc:	81 e0       	ldi	r24, 0x01	; 1
    11be:	90 e0       	ldi	r25, 0x00	; 0
    11c0:	02 2e       	mov	r0, r18
    11c2:	02 c0       	rjmp	.+4      	; 0x11c8 <Dio_init+0x280>
    11c4:	88 0f       	add	r24, r24
    11c6:	99 1f       	adc	r25, r25
    11c8:	0a 94       	dec	r0
    11ca:	e2 f7       	brpl	.-8      	; 0x11c4 <Dio_init+0x27c>
    11cc:	84 2b       	or	r24, r20
    11ce:	8c 93       	st	X, r24
    11d0:	1c c0       	rjmp	.+56     	; 0x120a <Dio_init+0x2c2>
			}
			else{
				CLR_BIT(DDRD,Pin_Cfgs[i].Pin);
    11d2:	a1 e3       	ldi	r26, 0x31	; 49
    11d4:	b0 e0       	ldi	r27, 0x00	; 0
    11d6:	e1 e3       	ldi	r30, 0x31	; 49
    11d8:	f0 e0       	ldi	r31, 0x00	; 0
    11da:	80 81       	ld	r24, Z
    11dc:	48 2f       	mov	r20, r24
    11de:	89 81       	ldd	r24, Y+1	; 0x01
    11e0:	9a 81       	ldd	r25, Y+2	; 0x02
    11e2:	88 0f       	add	r24, r24
    11e4:	99 1f       	adc	r25, r25
    11e6:	88 0f       	add	r24, r24
    11e8:	99 1f       	adc	r25, r25
    11ea:	fc 01       	movw	r30, r24
    11ec:	e7 59       	subi	r30, 0x97	; 151
    11ee:	ff 4f       	sbci	r31, 0xFF	; 255
    11f0:	80 81       	ld	r24, Z
    11f2:	28 2f       	mov	r18, r24
    11f4:	30 e0       	ldi	r19, 0x00	; 0
    11f6:	81 e0       	ldi	r24, 0x01	; 1
    11f8:	90 e0       	ldi	r25, 0x00	; 0
    11fa:	02 c0       	rjmp	.+4      	; 0x1200 <Dio_init+0x2b8>
    11fc:	88 0f       	add	r24, r24
    11fe:	99 1f       	adc	r25, r25
    1200:	2a 95       	dec	r18
    1202:	e2 f7       	brpl	.-8      	; 0x11fc <Dio_init+0x2b4>
    1204:	80 95       	com	r24
    1206:	84 23       	and	r24, r20
    1208:	8c 93       	st	X, r24
};

void Dio_init(void){
	int count = sizeof(Pin_Cfgs)/ sizeof(Pin_Cfgs[0]);
	int i = 0;
	for(i = 0; i < count ; i++){
    120a:	89 81       	ldd	r24, Y+1	; 0x01
    120c:	9a 81       	ldd	r25, Y+2	; 0x02
    120e:	01 96       	adiw	r24, 0x01	; 1
    1210:	9a 83       	std	Y+2, r25	; 0x02
    1212:	89 83       	std	Y+1, r24	; 0x01
    1214:	29 81       	ldd	r18, Y+1	; 0x01
    1216:	3a 81       	ldd	r19, Y+2	; 0x02
    1218:	8b 81       	ldd	r24, Y+3	; 0x03
    121a:	9c 81       	ldd	r25, Y+4	; 0x04
    121c:	28 17       	cp	r18, r24
    121e:	39 07       	cpc	r19, r25
    1220:	0c f4       	brge	.+2      	; 0x1224 <Dio_init+0x2dc>
    1222:	a1 ce       	rjmp	.-702    	; 0xf66 <Dio_init+0x1e>
			else{
				CLR_BIT(DDRD,Pin_Cfgs[i].Pin);
			}
		}
	}
}
    1224:	0f 90       	pop	r0
    1226:	0f 90       	pop	r0
    1228:	0f 90       	pop	r0
    122a:	0f 90       	pop	r0
    122c:	cf 91       	pop	r28
    122e:	df 91       	pop	r29
    1230:	08 95       	ret

00001232 <UART_init>:
 */


#include "uart.h"
void UART_init(unsigned int baud)
{
    1232:	df 93       	push	r29
    1234:	cf 93       	push	r28
    1236:	00 d0       	rcall	.+0      	; 0x1238 <UART_init+0x6>
    1238:	cd b7       	in	r28, 0x3d	; 61
    123a:	de b7       	in	r29, 0x3e	; 62
    123c:	9a 83       	std	Y+2, r25	; 0x02
    123e:	89 83       	std	Y+1, r24	; 0x01
	/* Set baud rate */
	UBRRH = (unsigned char)(baud>>8);
    1240:	e0 e4       	ldi	r30, 0x40	; 64
    1242:	f0 e0       	ldi	r31, 0x00	; 0
    1244:	89 81       	ldd	r24, Y+1	; 0x01
    1246:	9a 81       	ldd	r25, Y+2	; 0x02
    1248:	89 2f       	mov	r24, r25
    124a:	99 27       	eor	r25, r25
    124c:	80 83       	st	Z, r24
	UBRRL = (unsigned char)baud;
    124e:	e9 e2       	ldi	r30, 0x29	; 41
    1250:	f0 e0       	ldi	r31, 0x00	; 0
    1252:	89 81       	ldd	r24, Y+1	; 0x01
    1254:	80 83       	st	Z, r24
	/* Enable receiver and transmitter */
	UCSRB = (1<<RXEN)|(1<<TXEN);
    1256:	ea e2       	ldi	r30, 0x2A	; 42
    1258:	f0 e0       	ldi	r31, 0x00	; 0
    125a:	88 e1       	ldi	r24, 0x18	; 24
    125c:	80 83       	st	Z, r24
	/* Set frame format: 8data, 2stop bit */
	UCSRC = (1<<URSEL)|(1<<USBS)|(3<<UCSZ0);
    125e:	e0 e4       	ldi	r30, 0x40	; 64
    1260:	f0 e0       	ldi	r31, 0x00	; 0
    1262:	8e e8       	ldi	r24, 0x8E	; 142
    1264:	80 83       	st	Z, r24
}
    1266:	0f 90       	pop	r0
    1268:	0f 90       	pop	r0
    126a:	cf 91       	pop	r28
    126c:	df 91       	pop	r29
    126e:	08 95       	ret

00001270 <UART_send>:
void UART_send(unsigned char data)
{
    1270:	df 93       	push	r29
    1272:	cf 93       	push	r28
    1274:	0f 92       	push	r0
    1276:	cd b7       	in	r28, 0x3d	; 61
    1278:	de b7       	in	r29, 0x3e	; 62
    127a:	89 83       	std	Y+1, r24	; 0x01
	while (!(UCSRA&(1<<UDRE)))
    127c:	eb e2       	ldi	r30, 0x2B	; 43
    127e:	f0 e0       	ldi	r31, 0x00	; 0
    1280:	80 81       	ld	r24, Z
    1282:	88 2f       	mov	r24, r24
    1284:	90 e0       	ldi	r25, 0x00	; 0
    1286:	80 72       	andi	r24, 0x20	; 32
    1288:	90 70       	andi	r25, 0x00	; 0
    128a:	00 97       	sbiw	r24, 0x00	; 0
    128c:	b9 f3       	breq	.-18     	; 0x127c <UART_send+0xc>
	{
	}

	UDR=data;
    128e:	ec e2       	ldi	r30, 0x2C	; 44
    1290:	f0 e0       	ldi	r31, 0x00	; 0
    1292:	89 81       	ldd	r24, Y+1	; 0x01
    1294:	80 83       	st	Z, r24
}
    1296:	0f 90       	pop	r0
    1298:	cf 91       	pop	r28
    129a:	df 91       	pop	r29
    129c:	08 95       	ret

0000129e <UART_recieve>:
unsigned char UART_recieve()
{
    129e:	df 93       	push	r29
    12a0:	cf 93       	push	r28
    12a2:	cd b7       	in	r28, 0x3d	; 61
    12a4:	de b7       	in	r29, 0x3e	; 62
	while (!(UCSRA&(1<<RXC)))
    12a6:	eb e2       	ldi	r30, 0x2B	; 43
    12a8:	f0 e0       	ldi	r31, 0x00	; 0
    12aa:	80 81       	ld	r24, Z
    12ac:	88 23       	and	r24, r24
    12ae:	dc f7       	brge	.-10     	; 0x12a6 <UART_recieve+0x8>
	{
	}
	return UDR;
    12b0:	ec e2       	ldi	r30, 0x2C	; 44
    12b2:	f0 e0       	ldi	r31, 0x00	; 0
    12b4:	80 81       	ld	r24, Z
}
    12b6:	cf 91       	pop	r28
    12b8:	df 91       	pop	r29
    12ba:	08 95       	ret

000012bc <lcd_init>:
 *  Created on: Jul 31, 2021
 *      Author: Mohamed Abdulaal
 */
#include "lcd.h"

void lcd_init(){
    12bc:	df 93       	push	r29
    12be:	cf 93       	push	r28
    12c0:	cd b7       	in	r28, 0x3d	; 61
    12c2:	de b7       	in	r29, 0x3e	; 62
    12c4:	2e 97       	sbiw	r28, 0x0e	; 14
    12c6:	0f b6       	in	r0, 0x3f	; 63
    12c8:	f8 94       	cli
    12ca:	de bf       	out	0x3e, r29	; 62
    12cc:	0f be       	out	0x3f, r0	; 63
    12ce:	cd bf       	out	0x3d, r28	; 61
	Dio_write(RW,Low);
    12d0:	8a e0       	ldi	r24, 0x0A	; 10
    12d2:	60 e0       	ldi	r22, 0x00	; 0
    12d4:	0e 94 78 06 	call	0xcf0	; 0xcf0 <Dio_write>
    12d8:	80 e0       	ldi	r24, 0x00	; 0
    12da:	90 e0       	ldi	r25, 0x00	; 0
    12dc:	a0 ea       	ldi	r26, 0xA0	; 160
    12de:	b1 e4       	ldi	r27, 0x41	; 65
    12e0:	8b 87       	std	Y+11, r24	; 0x0b
    12e2:	9c 87       	std	Y+12, r25	; 0x0c
    12e4:	ad 87       	std	Y+13, r26	; 0x0d
    12e6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    12e8:	6b 85       	ldd	r22, Y+11	; 0x0b
    12ea:	7c 85       	ldd	r23, Y+12	; 0x0c
    12ec:	8d 85       	ldd	r24, Y+13	; 0x0d
    12ee:	9e 85       	ldd	r25, Y+14	; 0x0e
    12f0:	20 e0       	ldi	r18, 0x00	; 0
    12f2:	30 e0       	ldi	r19, 0x00	; 0
    12f4:	4a e7       	ldi	r20, 0x7A	; 122
    12f6:	55 e4       	ldi	r21, 0x45	; 69
    12f8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12fc:	dc 01       	movw	r26, r24
    12fe:	cb 01       	movw	r24, r22
    1300:	8f 83       	std	Y+7, r24	; 0x07
    1302:	98 87       	std	Y+8, r25	; 0x08
    1304:	a9 87       	std	Y+9, r26	; 0x09
    1306:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1308:	6f 81       	ldd	r22, Y+7	; 0x07
    130a:	78 85       	ldd	r23, Y+8	; 0x08
    130c:	89 85       	ldd	r24, Y+9	; 0x09
    130e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1310:	20 e0       	ldi	r18, 0x00	; 0
    1312:	30 e0       	ldi	r19, 0x00	; 0
    1314:	40 e8       	ldi	r20, 0x80	; 128
    1316:	5f e3       	ldi	r21, 0x3F	; 63
    1318:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    131c:	88 23       	and	r24, r24
    131e:	2c f4       	brge	.+10     	; 0x132a <lcd_init+0x6e>
		__ticks = 1;
    1320:	81 e0       	ldi	r24, 0x01	; 1
    1322:	90 e0       	ldi	r25, 0x00	; 0
    1324:	9e 83       	std	Y+6, r25	; 0x06
    1326:	8d 83       	std	Y+5, r24	; 0x05
    1328:	3f c0       	rjmp	.+126    	; 0x13a8 <lcd_init+0xec>
	else if (__tmp > 65535)
    132a:	6f 81       	ldd	r22, Y+7	; 0x07
    132c:	78 85       	ldd	r23, Y+8	; 0x08
    132e:	89 85       	ldd	r24, Y+9	; 0x09
    1330:	9a 85       	ldd	r25, Y+10	; 0x0a
    1332:	20 e0       	ldi	r18, 0x00	; 0
    1334:	3f ef       	ldi	r19, 0xFF	; 255
    1336:	4f e7       	ldi	r20, 0x7F	; 127
    1338:	57 e4       	ldi	r21, 0x47	; 71
    133a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    133e:	18 16       	cp	r1, r24
    1340:	4c f5       	brge	.+82     	; 0x1394 <lcd_init+0xd8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1342:	6b 85       	ldd	r22, Y+11	; 0x0b
    1344:	7c 85       	ldd	r23, Y+12	; 0x0c
    1346:	8d 85       	ldd	r24, Y+13	; 0x0d
    1348:	9e 85       	ldd	r25, Y+14	; 0x0e
    134a:	20 e0       	ldi	r18, 0x00	; 0
    134c:	30 e0       	ldi	r19, 0x00	; 0
    134e:	40 e2       	ldi	r20, 0x20	; 32
    1350:	51 e4       	ldi	r21, 0x41	; 65
    1352:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1356:	dc 01       	movw	r26, r24
    1358:	cb 01       	movw	r24, r22
    135a:	bc 01       	movw	r22, r24
    135c:	cd 01       	movw	r24, r26
    135e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1362:	dc 01       	movw	r26, r24
    1364:	cb 01       	movw	r24, r22
    1366:	9e 83       	std	Y+6, r25	; 0x06
    1368:	8d 83       	std	Y+5, r24	; 0x05
    136a:	0f c0       	rjmp	.+30     	; 0x138a <lcd_init+0xce>
    136c:	80 e9       	ldi	r24, 0x90	; 144
    136e:	91 e0       	ldi	r25, 0x01	; 1
    1370:	9c 83       	std	Y+4, r25	; 0x04
    1372:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1374:	8b 81       	ldd	r24, Y+3	; 0x03
    1376:	9c 81       	ldd	r25, Y+4	; 0x04
    1378:	01 97       	sbiw	r24, 0x01	; 1
    137a:	f1 f7       	brne	.-4      	; 0x1378 <lcd_init+0xbc>
    137c:	9c 83       	std	Y+4, r25	; 0x04
    137e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1380:	8d 81       	ldd	r24, Y+5	; 0x05
    1382:	9e 81       	ldd	r25, Y+6	; 0x06
    1384:	01 97       	sbiw	r24, 0x01	; 1
    1386:	9e 83       	std	Y+6, r25	; 0x06
    1388:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    138a:	8d 81       	ldd	r24, Y+5	; 0x05
    138c:	9e 81       	ldd	r25, Y+6	; 0x06
    138e:	00 97       	sbiw	r24, 0x00	; 0
    1390:	69 f7       	brne	.-38     	; 0x136c <lcd_init+0xb0>
    1392:	14 c0       	rjmp	.+40     	; 0x13bc <lcd_init+0x100>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1394:	6f 81       	ldd	r22, Y+7	; 0x07
    1396:	78 85       	ldd	r23, Y+8	; 0x08
    1398:	89 85       	ldd	r24, Y+9	; 0x09
    139a:	9a 85       	ldd	r25, Y+10	; 0x0a
    139c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13a0:	dc 01       	movw	r26, r24
    13a2:	cb 01       	movw	r24, r22
    13a4:	9e 83       	std	Y+6, r25	; 0x06
    13a6:	8d 83       	std	Y+5, r24	; 0x05
    13a8:	8d 81       	ldd	r24, Y+5	; 0x05
    13aa:	9e 81       	ldd	r25, Y+6	; 0x06
    13ac:	9a 83       	std	Y+2, r25	; 0x02
    13ae:	89 83       	std	Y+1, r24	; 0x01
    13b0:	89 81       	ldd	r24, Y+1	; 0x01
    13b2:	9a 81       	ldd	r25, Y+2	; 0x02
    13b4:	01 97       	sbiw	r24, 0x01	; 1
    13b6:	f1 f7       	brne	.-4      	; 0x13b4 <lcd_init+0xf8>
    13b8:	9a 83       	std	Y+2, r25	; 0x02
    13ba:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(20);		// LCD Power ON delay

	lcd_cmd(0x33);
    13bc:	83 e3       	ldi	r24, 0x33	; 51
    13be:	0e 94 f9 09 	call	0x13f2	; 0x13f2 <lcd_cmd>
	lcd_cmd(0x32); /* Send for 4 bit initialization of LCD  */
    13c2:	82 e3       	ldi	r24, 0x32	; 50
    13c4:	0e 94 f9 09 	call	0x13f2	; 0x13f2 <lcd_cmd>
	lcd_cmd(0x28); // Select 4 Bit Mode, 5*7 dots
    13c8:	88 e2       	ldi	r24, 0x28	; 40
    13ca:	0e 94 f9 09 	call	0x13f2	; 0x13f2 <lcd_cmd>
	lcd_cmd(0x0F);	// Display On, Cursor Blinking
    13ce:	8f e0       	ldi	r24, 0x0F	; 15
    13d0:	0e 94 f9 09 	call	0x13f2	; 0x13f2 <lcd_cmd>
	lcd_cmd(0x06);	// Entry Mode Increment cursor to right
    13d4:	86 e0       	ldi	r24, 0x06	; 6
    13d6:	0e 94 f9 09 	call	0x13f2	; 0x13f2 <lcd_cmd>
	lcd_cmd(0x01);	// Clear Display
    13da:	81 e0       	ldi	r24, 0x01	; 1
    13dc:	0e 94 f9 09 	call	0x13f2	; 0x13f2 <lcd_cmd>
//	LCD_Command(0x28);	/* 2 line, 5*7 matrix in 4-bit mode */
//	LCD_Command(0x0c);	/* Display on cursor off */
//	LCD_Command(0x06);	/* Increment cursor (shift cursor to right) */
//	LCD_Command(0x01);	/* Clear display screen */

}
    13e0:	2e 96       	adiw	r28, 0x0e	; 14
    13e2:	0f b6       	in	r0, 0x3f	; 63
    13e4:	f8 94       	cli
    13e6:	de bf       	out	0x3e, r29	; 62
    13e8:	0f be       	out	0x3f, r0	; 63
    13ea:	cd bf       	out	0x3d, r28	; 61
    13ec:	cf 91       	pop	r28
    13ee:	df 91       	pop	r29
    13f0:	08 95       	ret

000013f2 <lcd_cmd>:

void lcd_cmd(uint8 cmd){
    13f2:	0f 93       	push	r16
    13f4:	1f 93       	push	r17
    13f6:	df 93       	push	r29
    13f8:	cf 93       	push	r28
    13fa:	cd b7       	in	r28, 0x3d	; 61
    13fc:	de b7       	in	r29, 0x3e	; 62
    13fe:	c1 56       	subi	r28, 0x61	; 97
    1400:	d0 40       	sbci	r29, 0x00	; 0
    1402:	0f b6       	in	r0, 0x3f	; 63
    1404:	f8 94       	cli
    1406:	de bf       	out	0x3e, r29	; 62
    1408:	0f be       	out	0x3f, r0	; 63
    140a:	cd bf       	out	0x3d, r28	; 61
    140c:	fe 01       	movw	r30, r28
    140e:	ef 59       	subi	r30, 0x9F	; 159
    1410:	ff 4f       	sbci	r31, 0xFF	; 255
    1412:	80 83       	st	Z, r24
	Dio_write(RS, Low);
    1414:	89 e0       	ldi	r24, 0x09	; 9
    1416:	60 e0       	ldi	r22, 0x00	; 0
    1418:	0e 94 78 06 	call	0xcf0	; 0xcf0 <Dio_write>
	Dio_write(RW, Low);
    141c:	8a e0       	ldi	r24, 0x0A	; 10
    141e:	60 e0       	ldi	r22, 0x00	; 0
    1420:	0e 94 78 06 	call	0xcf0	; 0xcf0 <Dio_write>

	if(GET_BIT(cmd,7)){ Dio_write(D7,High);}else{ Dio_write(D7,Low);}
    1424:	fe 01       	movw	r30, r28
    1426:	ef 59       	subi	r30, 0x9F	; 159
    1428:	ff 4f       	sbci	r31, 0xFF	; 255
    142a:	80 81       	ld	r24, Z
    142c:	88 23       	and	r24, r24
    142e:	2c f4       	brge	.+10     	; 0x143a <lcd_cmd+0x48>
    1430:	87 e0       	ldi	r24, 0x07	; 7
    1432:	61 e0       	ldi	r22, 0x01	; 1
    1434:	0e 94 78 06 	call	0xcf0	; 0xcf0 <Dio_write>
    1438:	04 c0       	rjmp	.+8      	; 0x1442 <lcd_cmd+0x50>
    143a:	87 e0       	ldi	r24, 0x07	; 7
    143c:	60 e0       	ldi	r22, 0x00	; 0
    143e:	0e 94 78 06 	call	0xcf0	; 0xcf0 <Dio_write>
	if(GET_BIT(cmd,6)){ Dio_write(D6,High);}else{ Dio_write(D6,Low);}
    1442:	fe 01       	movw	r30, r28
    1444:	ef 59       	subi	r30, 0x9F	; 159
    1446:	ff 4f       	sbci	r31, 0xFF	; 255
    1448:	80 81       	ld	r24, Z
    144a:	88 2f       	mov	r24, r24
    144c:	90 e0       	ldi	r25, 0x00	; 0
    144e:	80 74       	andi	r24, 0x40	; 64
    1450:	90 70       	andi	r25, 0x00	; 0
    1452:	00 97       	sbiw	r24, 0x00	; 0
    1454:	29 f0       	breq	.+10     	; 0x1460 <lcd_cmd+0x6e>
    1456:	86 e0       	ldi	r24, 0x06	; 6
    1458:	61 e0       	ldi	r22, 0x01	; 1
    145a:	0e 94 78 06 	call	0xcf0	; 0xcf0 <Dio_write>
    145e:	04 c0       	rjmp	.+8      	; 0x1468 <lcd_cmd+0x76>
    1460:	86 e0       	ldi	r24, 0x06	; 6
    1462:	60 e0       	ldi	r22, 0x00	; 0
    1464:	0e 94 78 06 	call	0xcf0	; 0xcf0 <Dio_write>
	if(GET_BIT(cmd,5)){ Dio_write(D5,High);}else{ Dio_write(D5,Low);}
    1468:	fe 01       	movw	r30, r28
    146a:	ef 59       	subi	r30, 0x9F	; 159
    146c:	ff 4f       	sbci	r31, 0xFF	; 255
    146e:	80 81       	ld	r24, Z
    1470:	88 2f       	mov	r24, r24
    1472:	90 e0       	ldi	r25, 0x00	; 0
    1474:	80 72       	andi	r24, 0x20	; 32
    1476:	90 70       	andi	r25, 0x00	; 0
    1478:	00 97       	sbiw	r24, 0x00	; 0
    147a:	29 f0       	breq	.+10     	; 0x1486 <lcd_cmd+0x94>
    147c:	85 e0       	ldi	r24, 0x05	; 5
    147e:	61 e0       	ldi	r22, 0x01	; 1
    1480:	0e 94 78 06 	call	0xcf0	; 0xcf0 <Dio_write>
    1484:	04 c0       	rjmp	.+8      	; 0x148e <lcd_cmd+0x9c>
    1486:	85 e0       	ldi	r24, 0x05	; 5
    1488:	60 e0       	ldi	r22, 0x00	; 0
    148a:	0e 94 78 06 	call	0xcf0	; 0xcf0 <Dio_write>
	if(GET_BIT(cmd,4)){ Dio_write(D4,High);}else{ Dio_write(D4,Low);}
    148e:	fe 01       	movw	r30, r28
    1490:	ef 59       	subi	r30, 0x9F	; 159
    1492:	ff 4f       	sbci	r31, 0xFF	; 255
    1494:	80 81       	ld	r24, Z
    1496:	88 2f       	mov	r24, r24
    1498:	90 e0       	ldi	r25, 0x00	; 0
    149a:	80 71       	andi	r24, 0x10	; 16
    149c:	90 70       	andi	r25, 0x00	; 0
    149e:	00 97       	sbiw	r24, 0x00	; 0
    14a0:	29 f0       	breq	.+10     	; 0x14ac <lcd_cmd+0xba>
    14a2:	84 e0       	ldi	r24, 0x04	; 4
    14a4:	61 e0       	ldi	r22, 0x01	; 1
    14a6:	0e 94 78 06 	call	0xcf0	; 0xcf0 <Dio_write>
    14aa:	04 c0       	rjmp	.+8      	; 0x14b4 <lcd_cmd+0xc2>
    14ac:	84 e0       	ldi	r24, 0x04	; 4
    14ae:	60 e0       	ldi	r22, 0x00	; 0
    14b0:	0e 94 78 06 	call	0xcf0	; 0xcf0 <Dio_write>
	Dio_write(E,High);
    14b4:	8b e0       	ldi	r24, 0x0B	; 11
    14b6:	61 e0       	ldi	r22, 0x01	; 1
    14b8:	0e 94 78 06 	call	0xcf0	; 0xcf0 <Dio_write>
    14bc:	fe 01       	movw	r30, r28
    14be:	e3 5a       	subi	r30, 0xA3	; 163
    14c0:	ff 4f       	sbci	r31, 0xFF	; 255
    14c2:	80 e0       	ldi	r24, 0x00	; 0
    14c4:	90 e0       	ldi	r25, 0x00	; 0
    14c6:	a0 e2       	ldi	r26, 0x20	; 32
    14c8:	b1 e4       	ldi	r27, 0x41	; 65
    14ca:	80 83       	st	Z, r24
    14cc:	91 83       	std	Z+1, r25	; 0x01
    14ce:	a2 83       	std	Z+2, r26	; 0x02
    14d0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    14d2:	8e 01       	movw	r16, r28
    14d4:	07 5a       	subi	r16, 0xA7	; 167
    14d6:	1f 4f       	sbci	r17, 0xFF	; 255
    14d8:	fe 01       	movw	r30, r28
    14da:	e3 5a       	subi	r30, 0xA3	; 163
    14dc:	ff 4f       	sbci	r31, 0xFF	; 255
    14de:	60 81       	ld	r22, Z
    14e0:	71 81       	ldd	r23, Z+1	; 0x01
    14e2:	82 81       	ldd	r24, Z+2	; 0x02
    14e4:	93 81       	ldd	r25, Z+3	; 0x03
    14e6:	2b ea       	ldi	r18, 0xAB	; 171
    14e8:	3a ea       	ldi	r19, 0xAA	; 170
    14ea:	4a ea       	ldi	r20, 0xAA	; 170
    14ec:	50 e4       	ldi	r21, 0x40	; 64
    14ee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14f2:	dc 01       	movw	r26, r24
    14f4:	cb 01       	movw	r24, r22
    14f6:	f8 01       	movw	r30, r16
    14f8:	80 83       	st	Z, r24
    14fa:	91 83       	std	Z+1, r25	; 0x01
    14fc:	a2 83       	std	Z+2, r26	; 0x02
    14fe:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1500:	fe 01       	movw	r30, r28
    1502:	e7 5a       	subi	r30, 0xA7	; 167
    1504:	ff 4f       	sbci	r31, 0xFF	; 255
    1506:	60 81       	ld	r22, Z
    1508:	71 81       	ldd	r23, Z+1	; 0x01
    150a:	82 81       	ldd	r24, Z+2	; 0x02
    150c:	93 81       	ldd	r25, Z+3	; 0x03
    150e:	20 e0       	ldi	r18, 0x00	; 0
    1510:	30 e0       	ldi	r19, 0x00	; 0
    1512:	40 e8       	ldi	r20, 0x80	; 128
    1514:	5f e3       	ldi	r21, 0x3F	; 63
    1516:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    151a:	88 23       	and	r24, r24
    151c:	34 f4       	brge	.+12     	; 0x152a <lcd_cmd+0x138>
		__ticks = 1;
    151e:	fe 01       	movw	r30, r28
    1520:	e8 5a       	subi	r30, 0xA8	; 168
    1522:	ff 4f       	sbci	r31, 0xFF	; 255
    1524:	81 e0       	ldi	r24, 0x01	; 1
    1526:	80 83       	st	Z, r24
    1528:	e0 c0       	rjmp	.+448    	; 0x16ea <lcd_cmd+0x2f8>
	else if (__tmp > 255)
    152a:	fe 01       	movw	r30, r28
    152c:	e7 5a       	subi	r30, 0xA7	; 167
    152e:	ff 4f       	sbci	r31, 0xFF	; 255
    1530:	60 81       	ld	r22, Z
    1532:	71 81       	ldd	r23, Z+1	; 0x01
    1534:	82 81       	ldd	r24, Z+2	; 0x02
    1536:	93 81       	ldd	r25, Z+3	; 0x03
    1538:	20 e0       	ldi	r18, 0x00	; 0
    153a:	30 e0       	ldi	r19, 0x00	; 0
    153c:	4f e7       	ldi	r20, 0x7F	; 127
    153e:	53 e4       	ldi	r21, 0x43	; 67
    1540:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1544:	18 16       	cp	r1, r24
    1546:	0c f0       	brlt	.+2      	; 0x154a <lcd_cmd+0x158>
    1548:	c0 c0       	rjmp	.+384    	; 0x16ca <lcd_cmd+0x2d8>
	{
		_delay_ms(__us / 1000.0);
    154a:	fe 01       	movw	r30, r28
    154c:	e3 5a       	subi	r30, 0xA3	; 163
    154e:	ff 4f       	sbci	r31, 0xFF	; 255
    1550:	60 81       	ld	r22, Z
    1552:	71 81       	ldd	r23, Z+1	; 0x01
    1554:	82 81       	ldd	r24, Z+2	; 0x02
    1556:	93 81       	ldd	r25, Z+3	; 0x03
    1558:	20 e0       	ldi	r18, 0x00	; 0
    155a:	30 e0       	ldi	r19, 0x00	; 0
    155c:	4a e7       	ldi	r20, 0x7A	; 122
    155e:	54 e4       	ldi	r21, 0x44	; 68
    1560:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1564:	dc 01       	movw	r26, r24
    1566:	cb 01       	movw	r24, r22
    1568:	fe 01       	movw	r30, r28
    156a:	ec 5a       	subi	r30, 0xAC	; 172
    156c:	ff 4f       	sbci	r31, 0xFF	; 255
    156e:	80 83       	st	Z, r24
    1570:	91 83       	std	Z+1, r25	; 0x01
    1572:	a2 83       	std	Z+2, r26	; 0x02
    1574:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1576:	8e 01       	movw	r16, r28
    1578:	00 5b       	subi	r16, 0xB0	; 176
    157a:	1f 4f       	sbci	r17, 0xFF	; 255
    157c:	fe 01       	movw	r30, r28
    157e:	ec 5a       	subi	r30, 0xAC	; 172
    1580:	ff 4f       	sbci	r31, 0xFF	; 255
    1582:	60 81       	ld	r22, Z
    1584:	71 81       	ldd	r23, Z+1	; 0x01
    1586:	82 81       	ldd	r24, Z+2	; 0x02
    1588:	93 81       	ldd	r25, Z+3	; 0x03
    158a:	20 e0       	ldi	r18, 0x00	; 0
    158c:	30 e0       	ldi	r19, 0x00	; 0
    158e:	4a e7       	ldi	r20, 0x7A	; 122
    1590:	55 e4       	ldi	r21, 0x45	; 69
    1592:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1596:	dc 01       	movw	r26, r24
    1598:	cb 01       	movw	r24, r22
    159a:	f8 01       	movw	r30, r16
    159c:	80 83       	st	Z, r24
    159e:	91 83       	std	Z+1, r25	; 0x01
    15a0:	a2 83       	std	Z+2, r26	; 0x02
    15a2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    15a4:	fe 01       	movw	r30, r28
    15a6:	e0 5b       	subi	r30, 0xB0	; 176
    15a8:	ff 4f       	sbci	r31, 0xFF	; 255
    15aa:	60 81       	ld	r22, Z
    15ac:	71 81       	ldd	r23, Z+1	; 0x01
    15ae:	82 81       	ldd	r24, Z+2	; 0x02
    15b0:	93 81       	ldd	r25, Z+3	; 0x03
    15b2:	20 e0       	ldi	r18, 0x00	; 0
    15b4:	30 e0       	ldi	r19, 0x00	; 0
    15b6:	40 e8       	ldi	r20, 0x80	; 128
    15b8:	5f e3       	ldi	r21, 0x3F	; 63
    15ba:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    15be:	88 23       	and	r24, r24
    15c0:	44 f4       	brge	.+16     	; 0x15d2 <lcd_cmd+0x1e0>
		__ticks = 1;
    15c2:	fe 01       	movw	r30, r28
    15c4:	e2 5b       	subi	r30, 0xB2	; 178
    15c6:	ff 4f       	sbci	r31, 0xFF	; 255
    15c8:	81 e0       	ldi	r24, 0x01	; 1
    15ca:	90 e0       	ldi	r25, 0x00	; 0
    15cc:	91 83       	std	Z+1, r25	; 0x01
    15ce:	80 83       	st	Z, r24
    15d0:	64 c0       	rjmp	.+200    	; 0x169a <lcd_cmd+0x2a8>
	else if (__tmp > 65535)
    15d2:	fe 01       	movw	r30, r28
    15d4:	e0 5b       	subi	r30, 0xB0	; 176
    15d6:	ff 4f       	sbci	r31, 0xFF	; 255
    15d8:	60 81       	ld	r22, Z
    15da:	71 81       	ldd	r23, Z+1	; 0x01
    15dc:	82 81       	ldd	r24, Z+2	; 0x02
    15de:	93 81       	ldd	r25, Z+3	; 0x03
    15e0:	20 e0       	ldi	r18, 0x00	; 0
    15e2:	3f ef       	ldi	r19, 0xFF	; 255
    15e4:	4f e7       	ldi	r20, 0x7F	; 127
    15e6:	57 e4       	ldi	r21, 0x47	; 71
    15e8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    15ec:	18 16       	cp	r1, r24
    15ee:	0c f0       	brlt	.+2      	; 0x15f2 <lcd_cmd+0x200>
    15f0:	43 c0       	rjmp	.+134    	; 0x1678 <lcd_cmd+0x286>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    15f2:	fe 01       	movw	r30, r28
    15f4:	ec 5a       	subi	r30, 0xAC	; 172
    15f6:	ff 4f       	sbci	r31, 0xFF	; 255
    15f8:	60 81       	ld	r22, Z
    15fa:	71 81       	ldd	r23, Z+1	; 0x01
    15fc:	82 81       	ldd	r24, Z+2	; 0x02
    15fe:	93 81       	ldd	r25, Z+3	; 0x03
    1600:	20 e0       	ldi	r18, 0x00	; 0
    1602:	30 e0       	ldi	r19, 0x00	; 0
    1604:	40 e2       	ldi	r20, 0x20	; 32
    1606:	51 e4       	ldi	r21, 0x41	; 65
    1608:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    160c:	dc 01       	movw	r26, r24
    160e:	cb 01       	movw	r24, r22
    1610:	8e 01       	movw	r16, r28
    1612:	02 5b       	subi	r16, 0xB2	; 178
    1614:	1f 4f       	sbci	r17, 0xFF	; 255
    1616:	bc 01       	movw	r22, r24
    1618:	cd 01       	movw	r24, r26
    161a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    161e:	dc 01       	movw	r26, r24
    1620:	cb 01       	movw	r24, r22
    1622:	f8 01       	movw	r30, r16
    1624:	91 83       	std	Z+1, r25	; 0x01
    1626:	80 83       	st	Z, r24
    1628:	1f c0       	rjmp	.+62     	; 0x1668 <lcd_cmd+0x276>
    162a:	fe 01       	movw	r30, r28
    162c:	e4 5b       	subi	r30, 0xB4	; 180
    162e:	ff 4f       	sbci	r31, 0xFF	; 255
    1630:	80 e9       	ldi	r24, 0x90	; 144
    1632:	91 e0       	ldi	r25, 0x01	; 1
    1634:	91 83       	std	Z+1, r25	; 0x01
    1636:	80 83       	st	Z, r24
    1638:	fe 01       	movw	r30, r28
    163a:	e4 5b       	subi	r30, 0xB4	; 180
    163c:	ff 4f       	sbci	r31, 0xFF	; 255
    163e:	80 81       	ld	r24, Z
    1640:	91 81       	ldd	r25, Z+1	; 0x01
    1642:	01 97       	sbiw	r24, 0x01	; 1
    1644:	f1 f7       	brne	.-4      	; 0x1642 <lcd_cmd+0x250>
    1646:	fe 01       	movw	r30, r28
    1648:	e4 5b       	subi	r30, 0xB4	; 180
    164a:	ff 4f       	sbci	r31, 0xFF	; 255
    164c:	91 83       	std	Z+1, r25	; 0x01
    164e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1650:	de 01       	movw	r26, r28
    1652:	a2 5b       	subi	r26, 0xB2	; 178
    1654:	bf 4f       	sbci	r27, 0xFF	; 255
    1656:	fe 01       	movw	r30, r28
    1658:	e2 5b       	subi	r30, 0xB2	; 178
    165a:	ff 4f       	sbci	r31, 0xFF	; 255
    165c:	80 81       	ld	r24, Z
    165e:	91 81       	ldd	r25, Z+1	; 0x01
    1660:	01 97       	sbiw	r24, 0x01	; 1
    1662:	11 96       	adiw	r26, 0x01	; 1
    1664:	9c 93       	st	X, r25
    1666:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1668:	fe 01       	movw	r30, r28
    166a:	e2 5b       	subi	r30, 0xB2	; 178
    166c:	ff 4f       	sbci	r31, 0xFF	; 255
    166e:	80 81       	ld	r24, Z
    1670:	91 81       	ldd	r25, Z+1	; 0x01
    1672:	00 97       	sbiw	r24, 0x00	; 0
    1674:	d1 f6       	brne	.-76     	; 0x162a <lcd_cmd+0x238>
    1676:	4b c0       	rjmp	.+150    	; 0x170e <lcd_cmd+0x31c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1678:	8e 01       	movw	r16, r28
    167a:	02 5b       	subi	r16, 0xB2	; 178
    167c:	1f 4f       	sbci	r17, 0xFF	; 255
    167e:	fe 01       	movw	r30, r28
    1680:	e0 5b       	subi	r30, 0xB0	; 176
    1682:	ff 4f       	sbci	r31, 0xFF	; 255
    1684:	60 81       	ld	r22, Z
    1686:	71 81       	ldd	r23, Z+1	; 0x01
    1688:	82 81       	ldd	r24, Z+2	; 0x02
    168a:	93 81       	ldd	r25, Z+3	; 0x03
    168c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1690:	dc 01       	movw	r26, r24
    1692:	cb 01       	movw	r24, r22
    1694:	f8 01       	movw	r30, r16
    1696:	91 83       	std	Z+1, r25	; 0x01
    1698:	80 83       	st	Z, r24
    169a:	de 01       	movw	r26, r28
    169c:	a6 5b       	subi	r26, 0xB6	; 182
    169e:	bf 4f       	sbci	r27, 0xFF	; 255
    16a0:	fe 01       	movw	r30, r28
    16a2:	e2 5b       	subi	r30, 0xB2	; 178
    16a4:	ff 4f       	sbci	r31, 0xFF	; 255
    16a6:	80 81       	ld	r24, Z
    16a8:	91 81       	ldd	r25, Z+1	; 0x01
    16aa:	11 96       	adiw	r26, 0x01	; 1
    16ac:	9c 93       	st	X, r25
    16ae:	8e 93       	st	-X, r24
    16b0:	fe 01       	movw	r30, r28
    16b2:	e6 5b       	subi	r30, 0xB6	; 182
    16b4:	ff 4f       	sbci	r31, 0xFF	; 255
    16b6:	80 81       	ld	r24, Z
    16b8:	91 81       	ldd	r25, Z+1	; 0x01
    16ba:	01 97       	sbiw	r24, 0x01	; 1
    16bc:	f1 f7       	brne	.-4      	; 0x16ba <lcd_cmd+0x2c8>
    16be:	fe 01       	movw	r30, r28
    16c0:	e6 5b       	subi	r30, 0xB6	; 182
    16c2:	ff 4f       	sbci	r31, 0xFF	; 255
    16c4:	91 83       	std	Z+1, r25	; 0x01
    16c6:	80 83       	st	Z, r24
    16c8:	22 c0       	rjmp	.+68     	; 0x170e <lcd_cmd+0x31c>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    16ca:	8e 01       	movw	r16, r28
    16cc:	08 5a       	subi	r16, 0xA8	; 168
    16ce:	1f 4f       	sbci	r17, 0xFF	; 255
    16d0:	fe 01       	movw	r30, r28
    16d2:	e7 5a       	subi	r30, 0xA7	; 167
    16d4:	ff 4f       	sbci	r31, 0xFF	; 255
    16d6:	60 81       	ld	r22, Z
    16d8:	71 81       	ldd	r23, Z+1	; 0x01
    16da:	82 81       	ldd	r24, Z+2	; 0x02
    16dc:	93 81       	ldd	r25, Z+3	; 0x03
    16de:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16e2:	dc 01       	movw	r26, r24
    16e4:	cb 01       	movw	r24, r22
    16e6:	f8 01       	movw	r30, r16
    16e8:	80 83       	st	Z, r24
    16ea:	de 01       	movw	r26, r28
    16ec:	a7 5b       	subi	r26, 0xB7	; 183
    16ee:	bf 4f       	sbci	r27, 0xFF	; 255
    16f0:	fe 01       	movw	r30, r28
    16f2:	e8 5a       	subi	r30, 0xA8	; 168
    16f4:	ff 4f       	sbci	r31, 0xFF	; 255
    16f6:	80 81       	ld	r24, Z
    16f8:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    16fa:	fe 01       	movw	r30, r28
    16fc:	e7 5b       	subi	r30, 0xB7	; 183
    16fe:	ff 4f       	sbci	r31, 0xFF	; 255
    1700:	80 81       	ld	r24, Z
    1702:	8a 95       	dec	r24
    1704:	f1 f7       	brne	.-4      	; 0x1702 <lcd_cmd+0x310>
    1706:	fe 01       	movw	r30, r28
    1708:	e7 5b       	subi	r30, 0xB7	; 183
    170a:	ff 4f       	sbci	r31, 0xFF	; 255
    170c:	80 83       	st	Z, r24
	_delay_us(10);
	Dio_write(E,Low);
    170e:	8b e0       	ldi	r24, 0x0B	; 11
    1710:	60 e0       	ldi	r22, 0x00	; 0
    1712:	0e 94 78 06 	call	0xcf0	; 0xcf0 <Dio_write>
    1716:	fe 01       	movw	r30, r28
    1718:	eb 5b       	subi	r30, 0xBB	; 187
    171a:	ff 4f       	sbci	r31, 0xFF	; 255
    171c:	80 e0       	ldi	r24, 0x00	; 0
    171e:	90 e0       	ldi	r25, 0x00	; 0
    1720:	a8 e4       	ldi	r26, 0x48	; 72
    1722:	b3 e4       	ldi	r27, 0x43	; 67
    1724:	80 83       	st	Z, r24
    1726:	91 83       	std	Z+1, r25	; 0x01
    1728:	a2 83       	std	Z+2, r26	; 0x02
    172a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    172c:	8e 01       	movw	r16, r28
    172e:	0f 5b       	subi	r16, 0xBF	; 191
    1730:	1f 4f       	sbci	r17, 0xFF	; 255
    1732:	fe 01       	movw	r30, r28
    1734:	eb 5b       	subi	r30, 0xBB	; 187
    1736:	ff 4f       	sbci	r31, 0xFF	; 255
    1738:	60 81       	ld	r22, Z
    173a:	71 81       	ldd	r23, Z+1	; 0x01
    173c:	82 81       	ldd	r24, Z+2	; 0x02
    173e:	93 81       	ldd	r25, Z+3	; 0x03
    1740:	2b ea       	ldi	r18, 0xAB	; 171
    1742:	3a ea       	ldi	r19, 0xAA	; 170
    1744:	4a ea       	ldi	r20, 0xAA	; 170
    1746:	50 e4       	ldi	r21, 0x40	; 64
    1748:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    174c:	dc 01       	movw	r26, r24
    174e:	cb 01       	movw	r24, r22
    1750:	f8 01       	movw	r30, r16
    1752:	80 83       	st	Z, r24
    1754:	91 83       	std	Z+1, r25	; 0x01
    1756:	a2 83       	std	Z+2, r26	; 0x02
    1758:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    175a:	fe 01       	movw	r30, r28
    175c:	ef 5b       	subi	r30, 0xBF	; 191
    175e:	ff 4f       	sbci	r31, 0xFF	; 255
    1760:	60 81       	ld	r22, Z
    1762:	71 81       	ldd	r23, Z+1	; 0x01
    1764:	82 81       	ldd	r24, Z+2	; 0x02
    1766:	93 81       	ldd	r25, Z+3	; 0x03
    1768:	20 e0       	ldi	r18, 0x00	; 0
    176a:	30 e0       	ldi	r19, 0x00	; 0
    176c:	40 e8       	ldi	r20, 0x80	; 128
    176e:	5f e3       	ldi	r21, 0x3F	; 63
    1770:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1774:	88 23       	and	r24, r24
    1776:	34 f4       	brge	.+12     	; 0x1784 <lcd_cmd+0x392>
		__ticks = 1;
    1778:	81 e0       	ldi	r24, 0x01	; 1
    177a:	fe 01       	movw	r30, r28
    177c:	e0 5c       	subi	r30, 0xC0	; 192
    177e:	ff 4f       	sbci	r31, 0xFF	; 255
    1780:	80 83       	st	Z, r24
    1782:	9d c0       	rjmp	.+314    	; 0x18be <lcd_cmd+0x4cc>
	else if (__tmp > 255)
    1784:	fe 01       	movw	r30, r28
    1786:	ef 5b       	subi	r30, 0xBF	; 191
    1788:	ff 4f       	sbci	r31, 0xFF	; 255
    178a:	60 81       	ld	r22, Z
    178c:	71 81       	ldd	r23, Z+1	; 0x01
    178e:	82 81       	ldd	r24, Z+2	; 0x02
    1790:	93 81       	ldd	r25, Z+3	; 0x03
    1792:	20 e0       	ldi	r18, 0x00	; 0
    1794:	30 e0       	ldi	r19, 0x00	; 0
    1796:	4f e7       	ldi	r20, 0x7F	; 127
    1798:	53 e4       	ldi	r21, 0x43	; 67
    179a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    179e:	18 16       	cp	r1, r24
    17a0:	0c f0       	brlt	.+2      	; 0x17a4 <lcd_cmd+0x3b2>
    17a2:	7e c0       	rjmp	.+252    	; 0x18a0 <lcd_cmd+0x4ae>
	{
		_delay_ms(__us / 1000.0);
    17a4:	fe 01       	movw	r30, r28
    17a6:	eb 5b       	subi	r30, 0xBB	; 187
    17a8:	ff 4f       	sbci	r31, 0xFF	; 255
    17aa:	60 81       	ld	r22, Z
    17ac:	71 81       	ldd	r23, Z+1	; 0x01
    17ae:	82 81       	ldd	r24, Z+2	; 0x02
    17b0:	93 81       	ldd	r25, Z+3	; 0x03
    17b2:	20 e0       	ldi	r18, 0x00	; 0
    17b4:	30 e0       	ldi	r19, 0x00	; 0
    17b6:	4a e7       	ldi	r20, 0x7A	; 122
    17b8:	54 e4       	ldi	r21, 0x44	; 68
    17ba:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    17be:	dc 01       	movw	r26, r24
    17c0:	cb 01       	movw	r24, r22
    17c2:	8c af       	std	Y+60, r24	; 0x3c
    17c4:	9d af       	std	Y+61, r25	; 0x3d
    17c6:	ae af       	std	Y+62, r26	; 0x3e
    17c8:	bf af       	std	Y+63, r27	; 0x3f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    17ca:	6c ad       	ldd	r22, Y+60	; 0x3c
    17cc:	7d ad       	ldd	r23, Y+61	; 0x3d
    17ce:	8e ad       	ldd	r24, Y+62	; 0x3e
    17d0:	9f ad       	ldd	r25, Y+63	; 0x3f
    17d2:	20 e0       	ldi	r18, 0x00	; 0
    17d4:	30 e0       	ldi	r19, 0x00	; 0
    17d6:	4a e7       	ldi	r20, 0x7A	; 122
    17d8:	55 e4       	ldi	r21, 0x45	; 69
    17da:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17de:	dc 01       	movw	r26, r24
    17e0:	cb 01       	movw	r24, r22
    17e2:	88 af       	std	Y+56, r24	; 0x38
    17e4:	99 af       	std	Y+57, r25	; 0x39
    17e6:	aa af       	std	Y+58, r26	; 0x3a
    17e8:	bb af       	std	Y+59, r27	; 0x3b
	if (__tmp < 1.0)
    17ea:	68 ad       	ldd	r22, Y+56	; 0x38
    17ec:	79 ad       	ldd	r23, Y+57	; 0x39
    17ee:	8a ad       	ldd	r24, Y+58	; 0x3a
    17f0:	9b ad       	ldd	r25, Y+59	; 0x3b
    17f2:	20 e0       	ldi	r18, 0x00	; 0
    17f4:	30 e0       	ldi	r19, 0x00	; 0
    17f6:	40 e8       	ldi	r20, 0x80	; 128
    17f8:	5f e3       	ldi	r21, 0x3F	; 63
    17fa:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    17fe:	88 23       	and	r24, r24
    1800:	2c f4       	brge	.+10     	; 0x180c <lcd_cmd+0x41a>
		__ticks = 1;
    1802:	81 e0       	ldi	r24, 0x01	; 1
    1804:	90 e0       	ldi	r25, 0x00	; 0
    1806:	9f ab       	std	Y+55, r25	; 0x37
    1808:	8e ab       	std	Y+54, r24	; 0x36
    180a:	3f c0       	rjmp	.+126    	; 0x188a <lcd_cmd+0x498>
	else if (__tmp > 65535)
    180c:	68 ad       	ldd	r22, Y+56	; 0x38
    180e:	79 ad       	ldd	r23, Y+57	; 0x39
    1810:	8a ad       	ldd	r24, Y+58	; 0x3a
    1812:	9b ad       	ldd	r25, Y+59	; 0x3b
    1814:	20 e0       	ldi	r18, 0x00	; 0
    1816:	3f ef       	ldi	r19, 0xFF	; 255
    1818:	4f e7       	ldi	r20, 0x7F	; 127
    181a:	57 e4       	ldi	r21, 0x47	; 71
    181c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1820:	18 16       	cp	r1, r24
    1822:	4c f5       	brge	.+82     	; 0x1876 <lcd_cmd+0x484>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1824:	6c ad       	ldd	r22, Y+60	; 0x3c
    1826:	7d ad       	ldd	r23, Y+61	; 0x3d
    1828:	8e ad       	ldd	r24, Y+62	; 0x3e
    182a:	9f ad       	ldd	r25, Y+63	; 0x3f
    182c:	20 e0       	ldi	r18, 0x00	; 0
    182e:	30 e0       	ldi	r19, 0x00	; 0
    1830:	40 e2       	ldi	r20, 0x20	; 32
    1832:	51 e4       	ldi	r21, 0x41	; 65
    1834:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1838:	dc 01       	movw	r26, r24
    183a:	cb 01       	movw	r24, r22
    183c:	bc 01       	movw	r22, r24
    183e:	cd 01       	movw	r24, r26
    1840:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1844:	dc 01       	movw	r26, r24
    1846:	cb 01       	movw	r24, r22
    1848:	9f ab       	std	Y+55, r25	; 0x37
    184a:	8e ab       	std	Y+54, r24	; 0x36
    184c:	0f c0       	rjmp	.+30     	; 0x186c <lcd_cmd+0x47a>
    184e:	80 e9       	ldi	r24, 0x90	; 144
    1850:	91 e0       	ldi	r25, 0x01	; 1
    1852:	9d ab       	std	Y+53, r25	; 0x35
    1854:	8c ab       	std	Y+52, r24	; 0x34
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1856:	8c a9       	ldd	r24, Y+52	; 0x34
    1858:	9d a9       	ldd	r25, Y+53	; 0x35
    185a:	01 97       	sbiw	r24, 0x01	; 1
    185c:	f1 f7       	brne	.-4      	; 0x185a <lcd_cmd+0x468>
    185e:	9d ab       	std	Y+53, r25	; 0x35
    1860:	8c ab       	std	Y+52, r24	; 0x34
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1862:	8e a9       	ldd	r24, Y+54	; 0x36
    1864:	9f a9       	ldd	r25, Y+55	; 0x37
    1866:	01 97       	sbiw	r24, 0x01	; 1
    1868:	9f ab       	std	Y+55, r25	; 0x37
    186a:	8e ab       	std	Y+54, r24	; 0x36
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    186c:	8e a9       	ldd	r24, Y+54	; 0x36
    186e:	9f a9       	ldd	r25, Y+55	; 0x37
    1870:	00 97       	sbiw	r24, 0x00	; 0
    1872:	69 f7       	brne	.-38     	; 0x184e <lcd_cmd+0x45c>
    1874:	2d c0       	rjmp	.+90     	; 0x18d0 <lcd_cmd+0x4de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1876:	68 ad       	ldd	r22, Y+56	; 0x38
    1878:	79 ad       	ldd	r23, Y+57	; 0x39
    187a:	8a ad       	ldd	r24, Y+58	; 0x3a
    187c:	9b ad       	ldd	r25, Y+59	; 0x3b
    187e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1882:	dc 01       	movw	r26, r24
    1884:	cb 01       	movw	r24, r22
    1886:	9f ab       	std	Y+55, r25	; 0x37
    1888:	8e ab       	std	Y+54, r24	; 0x36
    188a:	8e a9       	ldd	r24, Y+54	; 0x36
    188c:	9f a9       	ldd	r25, Y+55	; 0x37
    188e:	9b ab       	std	Y+51, r25	; 0x33
    1890:	8a ab       	std	Y+50, r24	; 0x32
    1892:	8a a9       	ldd	r24, Y+50	; 0x32
    1894:	9b a9       	ldd	r25, Y+51	; 0x33
    1896:	01 97       	sbiw	r24, 0x01	; 1
    1898:	f1 f7       	brne	.-4      	; 0x1896 <lcd_cmd+0x4a4>
    189a:	9b ab       	std	Y+51, r25	; 0x33
    189c:	8a ab       	std	Y+50, r24	; 0x32
    189e:	18 c0       	rjmp	.+48     	; 0x18d0 <lcd_cmd+0x4de>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    18a0:	fe 01       	movw	r30, r28
    18a2:	ef 5b       	subi	r30, 0xBF	; 191
    18a4:	ff 4f       	sbci	r31, 0xFF	; 255
    18a6:	60 81       	ld	r22, Z
    18a8:	71 81       	ldd	r23, Z+1	; 0x01
    18aa:	82 81       	ldd	r24, Z+2	; 0x02
    18ac:	93 81       	ldd	r25, Z+3	; 0x03
    18ae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18b2:	dc 01       	movw	r26, r24
    18b4:	cb 01       	movw	r24, r22
    18b6:	fe 01       	movw	r30, r28
    18b8:	e0 5c       	subi	r30, 0xC0	; 192
    18ba:	ff 4f       	sbci	r31, 0xFF	; 255
    18bc:	80 83       	st	Z, r24
    18be:	fe 01       	movw	r30, r28
    18c0:	e0 5c       	subi	r30, 0xC0	; 192
    18c2:	ff 4f       	sbci	r31, 0xFF	; 255
    18c4:	80 81       	ld	r24, Z
    18c6:	89 ab       	std	Y+49, r24	; 0x31
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    18c8:	89 a9       	ldd	r24, Y+49	; 0x31
    18ca:	8a 95       	dec	r24
    18cc:	f1 f7       	brne	.-4      	; 0x18ca <lcd_cmd+0x4d8>
    18ce:	89 ab       	std	Y+49, r24	; 0x31
	_delay_us(200);

	if(GET_BIT(cmd,3)){ Dio_write(D7,High);}else{ Dio_write(D7,Low);}
    18d0:	fe 01       	movw	r30, r28
    18d2:	ef 59       	subi	r30, 0x9F	; 159
    18d4:	ff 4f       	sbci	r31, 0xFF	; 255
    18d6:	80 81       	ld	r24, Z
    18d8:	88 2f       	mov	r24, r24
    18da:	90 e0       	ldi	r25, 0x00	; 0
    18dc:	88 70       	andi	r24, 0x08	; 8
    18de:	90 70       	andi	r25, 0x00	; 0
    18e0:	00 97       	sbiw	r24, 0x00	; 0
    18e2:	29 f0       	breq	.+10     	; 0x18ee <lcd_cmd+0x4fc>
    18e4:	87 e0       	ldi	r24, 0x07	; 7
    18e6:	61 e0       	ldi	r22, 0x01	; 1
    18e8:	0e 94 78 06 	call	0xcf0	; 0xcf0 <Dio_write>
    18ec:	04 c0       	rjmp	.+8      	; 0x18f6 <lcd_cmd+0x504>
    18ee:	87 e0       	ldi	r24, 0x07	; 7
    18f0:	60 e0       	ldi	r22, 0x00	; 0
    18f2:	0e 94 78 06 	call	0xcf0	; 0xcf0 <Dio_write>
	if(GET_BIT(cmd,2)){ Dio_write(D6,High);}else{ Dio_write(D6,Low);}
    18f6:	fe 01       	movw	r30, r28
    18f8:	ef 59       	subi	r30, 0x9F	; 159
    18fa:	ff 4f       	sbci	r31, 0xFF	; 255
    18fc:	80 81       	ld	r24, Z
    18fe:	88 2f       	mov	r24, r24
    1900:	90 e0       	ldi	r25, 0x00	; 0
    1902:	84 70       	andi	r24, 0x04	; 4
    1904:	90 70       	andi	r25, 0x00	; 0
    1906:	00 97       	sbiw	r24, 0x00	; 0
    1908:	29 f0       	breq	.+10     	; 0x1914 <lcd_cmd+0x522>
    190a:	86 e0       	ldi	r24, 0x06	; 6
    190c:	61 e0       	ldi	r22, 0x01	; 1
    190e:	0e 94 78 06 	call	0xcf0	; 0xcf0 <Dio_write>
    1912:	04 c0       	rjmp	.+8      	; 0x191c <lcd_cmd+0x52a>
    1914:	86 e0       	ldi	r24, 0x06	; 6
    1916:	60 e0       	ldi	r22, 0x00	; 0
    1918:	0e 94 78 06 	call	0xcf0	; 0xcf0 <Dio_write>
	if(GET_BIT(cmd,1)){ Dio_write(D5,High);}else{ Dio_write(D5,Low);}
    191c:	fe 01       	movw	r30, r28
    191e:	ef 59       	subi	r30, 0x9F	; 159
    1920:	ff 4f       	sbci	r31, 0xFF	; 255
    1922:	80 81       	ld	r24, Z
    1924:	88 2f       	mov	r24, r24
    1926:	90 e0       	ldi	r25, 0x00	; 0
    1928:	82 70       	andi	r24, 0x02	; 2
    192a:	90 70       	andi	r25, 0x00	; 0
    192c:	00 97       	sbiw	r24, 0x00	; 0
    192e:	29 f0       	breq	.+10     	; 0x193a <lcd_cmd+0x548>
    1930:	85 e0       	ldi	r24, 0x05	; 5
    1932:	61 e0       	ldi	r22, 0x01	; 1
    1934:	0e 94 78 06 	call	0xcf0	; 0xcf0 <Dio_write>
    1938:	04 c0       	rjmp	.+8      	; 0x1942 <lcd_cmd+0x550>
    193a:	85 e0       	ldi	r24, 0x05	; 5
    193c:	60 e0       	ldi	r22, 0x00	; 0
    193e:	0e 94 78 06 	call	0xcf0	; 0xcf0 <Dio_write>
	if(GET_BIT(cmd,0)){ Dio_write(D4,High);}else{ Dio_write(D4,Low);}
    1942:	fe 01       	movw	r30, r28
    1944:	ef 59       	subi	r30, 0x9F	; 159
    1946:	ff 4f       	sbci	r31, 0xFF	; 255
    1948:	80 81       	ld	r24, Z
    194a:	88 2f       	mov	r24, r24
    194c:	90 e0       	ldi	r25, 0x00	; 0
    194e:	81 70       	andi	r24, 0x01	; 1
    1950:	90 70       	andi	r25, 0x00	; 0
    1952:	88 23       	and	r24, r24
    1954:	29 f0       	breq	.+10     	; 0x1960 <lcd_cmd+0x56e>
    1956:	84 e0       	ldi	r24, 0x04	; 4
    1958:	61 e0       	ldi	r22, 0x01	; 1
    195a:	0e 94 78 06 	call	0xcf0	; 0xcf0 <Dio_write>
    195e:	04 c0       	rjmp	.+8      	; 0x1968 <lcd_cmd+0x576>
    1960:	84 e0       	ldi	r24, 0x04	; 4
    1962:	60 e0       	ldi	r22, 0x00	; 0
    1964:	0e 94 78 06 	call	0xcf0	; 0xcf0 <Dio_write>
	Dio_write(E,High);
    1968:	8b e0       	ldi	r24, 0x0B	; 11
    196a:	61 e0       	ldi	r22, 0x01	; 1
    196c:	0e 94 78 06 	call	0xcf0	; 0xcf0 <Dio_write>
    1970:	80 e0       	ldi	r24, 0x00	; 0
    1972:	90 e0       	ldi	r25, 0x00	; 0
    1974:	a0 e2       	ldi	r26, 0x20	; 32
    1976:	b1 e4       	ldi	r27, 0x41	; 65
    1978:	8d a7       	std	Y+45, r24	; 0x2d
    197a:	9e a7       	std	Y+46, r25	; 0x2e
    197c:	af a7       	std	Y+47, r26	; 0x2f
    197e:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1980:	6d a5       	ldd	r22, Y+45	; 0x2d
    1982:	7e a5       	ldd	r23, Y+46	; 0x2e
    1984:	8f a5       	ldd	r24, Y+47	; 0x2f
    1986:	98 a9       	ldd	r25, Y+48	; 0x30
    1988:	2b ea       	ldi	r18, 0xAB	; 171
    198a:	3a ea       	ldi	r19, 0xAA	; 170
    198c:	4a ea       	ldi	r20, 0xAA	; 170
    198e:	50 e4       	ldi	r21, 0x40	; 64
    1990:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1994:	dc 01       	movw	r26, r24
    1996:	cb 01       	movw	r24, r22
    1998:	89 a7       	std	Y+41, r24	; 0x29
    199a:	9a a7       	std	Y+42, r25	; 0x2a
    199c:	ab a7       	std	Y+43, r26	; 0x2b
    199e:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    19a0:	69 a5       	ldd	r22, Y+41	; 0x29
    19a2:	7a a5       	ldd	r23, Y+42	; 0x2a
    19a4:	8b a5       	ldd	r24, Y+43	; 0x2b
    19a6:	9c a5       	ldd	r25, Y+44	; 0x2c
    19a8:	20 e0       	ldi	r18, 0x00	; 0
    19aa:	30 e0       	ldi	r19, 0x00	; 0
    19ac:	40 e8       	ldi	r20, 0x80	; 128
    19ae:	5f e3       	ldi	r21, 0x3F	; 63
    19b0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    19b4:	88 23       	and	r24, r24
    19b6:	1c f4       	brge	.+6      	; 0x19be <lcd_cmd+0x5cc>
		__ticks = 1;
    19b8:	81 e0       	ldi	r24, 0x01	; 1
    19ba:	88 a7       	std	Y+40, r24	; 0x28
    19bc:	91 c0       	rjmp	.+290    	; 0x1ae0 <lcd_cmd+0x6ee>
	else if (__tmp > 255)
    19be:	69 a5       	ldd	r22, Y+41	; 0x29
    19c0:	7a a5       	ldd	r23, Y+42	; 0x2a
    19c2:	8b a5       	ldd	r24, Y+43	; 0x2b
    19c4:	9c a5       	ldd	r25, Y+44	; 0x2c
    19c6:	20 e0       	ldi	r18, 0x00	; 0
    19c8:	30 e0       	ldi	r19, 0x00	; 0
    19ca:	4f e7       	ldi	r20, 0x7F	; 127
    19cc:	53 e4       	ldi	r21, 0x43	; 67
    19ce:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    19d2:	18 16       	cp	r1, r24
    19d4:	0c f0       	brlt	.+2      	; 0x19d8 <lcd_cmd+0x5e6>
    19d6:	7b c0       	rjmp	.+246    	; 0x1ace <lcd_cmd+0x6dc>
	{
		_delay_ms(__us / 1000.0);
    19d8:	6d a5       	ldd	r22, Y+45	; 0x2d
    19da:	7e a5       	ldd	r23, Y+46	; 0x2e
    19dc:	8f a5       	ldd	r24, Y+47	; 0x2f
    19de:	98 a9       	ldd	r25, Y+48	; 0x30
    19e0:	20 e0       	ldi	r18, 0x00	; 0
    19e2:	30 e0       	ldi	r19, 0x00	; 0
    19e4:	4a e7       	ldi	r20, 0x7A	; 122
    19e6:	54 e4       	ldi	r21, 0x44	; 68
    19e8:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    19ec:	dc 01       	movw	r26, r24
    19ee:	cb 01       	movw	r24, r22
    19f0:	8c a3       	std	Y+36, r24	; 0x24
    19f2:	9d a3       	std	Y+37, r25	; 0x25
    19f4:	ae a3       	std	Y+38, r26	; 0x26
    19f6:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19f8:	6c a1       	ldd	r22, Y+36	; 0x24
    19fa:	7d a1       	ldd	r23, Y+37	; 0x25
    19fc:	8e a1       	ldd	r24, Y+38	; 0x26
    19fe:	9f a1       	ldd	r25, Y+39	; 0x27
    1a00:	20 e0       	ldi	r18, 0x00	; 0
    1a02:	30 e0       	ldi	r19, 0x00	; 0
    1a04:	4a e7       	ldi	r20, 0x7A	; 122
    1a06:	55 e4       	ldi	r21, 0x45	; 69
    1a08:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a0c:	dc 01       	movw	r26, r24
    1a0e:	cb 01       	movw	r24, r22
    1a10:	88 a3       	std	Y+32, r24	; 0x20
    1a12:	99 a3       	std	Y+33, r25	; 0x21
    1a14:	aa a3       	std	Y+34, r26	; 0x22
    1a16:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    1a18:	68 a1       	ldd	r22, Y+32	; 0x20
    1a1a:	79 a1       	ldd	r23, Y+33	; 0x21
    1a1c:	8a a1       	ldd	r24, Y+34	; 0x22
    1a1e:	9b a1       	ldd	r25, Y+35	; 0x23
    1a20:	20 e0       	ldi	r18, 0x00	; 0
    1a22:	30 e0       	ldi	r19, 0x00	; 0
    1a24:	40 e8       	ldi	r20, 0x80	; 128
    1a26:	5f e3       	ldi	r21, 0x3F	; 63
    1a28:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1a2c:	88 23       	and	r24, r24
    1a2e:	2c f4       	brge	.+10     	; 0x1a3a <lcd_cmd+0x648>
		__ticks = 1;
    1a30:	81 e0       	ldi	r24, 0x01	; 1
    1a32:	90 e0       	ldi	r25, 0x00	; 0
    1a34:	9f 8f       	std	Y+31, r25	; 0x1f
    1a36:	8e 8f       	std	Y+30, r24	; 0x1e
    1a38:	3f c0       	rjmp	.+126    	; 0x1ab8 <lcd_cmd+0x6c6>
	else if (__tmp > 65535)
    1a3a:	68 a1       	ldd	r22, Y+32	; 0x20
    1a3c:	79 a1       	ldd	r23, Y+33	; 0x21
    1a3e:	8a a1       	ldd	r24, Y+34	; 0x22
    1a40:	9b a1       	ldd	r25, Y+35	; 0x23
    1a42:	20 e0       	ldi	r18, 0x00	; 0
    1a44:	3f ef       	ldi	r19, 0xFF	; 255
    1a46:	4f e7       	ldi	r20, 0x7F	; 127
    1a48:	57 e4       	ldi	r21, 0x47	; 71
    1a4a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1a4e:	18 16       	cp	r1, r24
    1a50:	4c f5       	brge	.+82     	; 0x1aa4 <lcd_cmd+0x6b2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a52:	6c a1       	ldd	r22, Y+36	; 0x24
    1a54:	7d a1       	ldd	r23, Y+37	; 0x25
    1a56:	8e a1       	ldd	r24, Y+38	; 0x26
    1a58:	9f a1       	ldd	r25, Y+39	; 0x27
    1a5a:	20 e0       	ldi	r18, 0x00	; 0
    1a5c:	30 e0       	ldi	r19, 0x00	; 0
    1a5e:	40 e2       	ldi	r20, 0x20	; 32
    1a60:	51 e4       	ldi	r21, 0x41	; 65
    1a62:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a66:	dc 01       	movw	r26, r24
    1a68:	cb 01       	movw	r24, r22
    1a6a:	bc 01       	movw	r22, r24
    1a6c:	cd 01       	movw	r24, r26
    1a6e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a72:	dc 01       	movw	r26, r24
    1a74:	cb 01       	movw	r24, r22
    1a76:	9f 8f       	std	Y+31, r25	; 0x1f
    1a78:	8e 8f       	std	Y+30, r24	; 0x1e
    1a7a:	0f c0       	rjmp	.+30     	; 0x1a9a <lcd_cmd+0x6a8>
    1a7c:	80 e9       	ldi	r24, 0x90	; 144
    1a7e:	91 e0       	ldi	r25, 0x01	; 1
    1a80:	9d 8f       	std	Y+29, r25	; 0x1d
    1a82:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1a84:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1a86:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1a88:	01 97       	sbiw	r24, 0x01	; 1
    1a8a:	f1 f7       	brne	.-4      	; 0x1a88 <lcd_cmd+0x696>
    1a8c:	9d 8f       	std	Y+29, r25	; 0x1d
    1a8e:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a90:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1a92:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1a94:	01 97       	sbiw	r24, 0x01	; 1
    1a96:	9f 8f       	std	Y+31, r25	; 0x1f
    1a98:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a9a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1a9c:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1a9e:	00 97       	sbiw	r24, 0x00	; 0
    1aa0:	69 f7       	brne	.-38     	; 0x1a7c <lcd_cmd+0x68a>
    1aa2:	24 c0       	rjmp	.+72     	; 0x1aec <lcd_cmd+0x6fa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1aa4:	68 a1       	ldd	r22, Y+32	; 0x20
    1aa6:	79 a1       	ldd	r23, Y+33	; 0x21
    1aa8:	8a a1       	ldd	r24, Y+34	; 0x22
    1aaa:	9b a1       	ldd	r25, Y+35	; 0x23
    1aac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ab0:	dc 01       	movw	r26, r24
    1ab2:	cb 01       	movw	r24, r22
    1ab4:	9f 8f       	std	Y+31, r25	; 0x1f
    1ab6:	8e 8f       	std	Y+30, r24	; 0x1e
    1ab8:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1aba:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1abc:	9b 8f       	std	Y+27, r25	; 0x1b
    1abe:	8a 8f       	std	Y+26, r24	; 0x1a
    1ac0:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1ac2:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1ac4:	01 97       	sbiw	r24, 0x01	; 1
    1ac6:	f1 f7       	brne	.-4      	; 0x1ac4 <lcd_cmd+0x6d2>
    1ac8:	9b 8f       	std	Y+27, r25	; 0x1b
    1aca:	8a 8f       	std	Y+26, r24	; 0x1a
    1acc:	0f c0       	rjmp	.+30     	; 0x1aec <lcd_cmd+0x6fa>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1ace:	69 a5       	ldd	r22, Y+41	; 0x29
    1ad0:	7a a5       	ldd	r23, Y+42	; 0x2a
    1ad2:	8b a5       	ldd	r24, Y+43	; 0x2b
    1ad4:	9c a5       	ldd	r25, Y+44	; 0x2c
    1ad6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ada:	dc 01       	movw	r26, r24
    1adc:	cb 01       	movw	r24, r22
    1ade:	88 a7       	std	Y+40, r24	; 0x28
    1ae0:	88 a5       	ldd	r24, Y+40	; 0x28
    1ae2:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1ae4:	89 8d       	ldd	r24, Y+25	; 0x19
    1ae6:	8a 95       	dec	r24
    1ae8:	f1 f7       	brne	.-4      	; 0x1ae6 <lcd_cmd+0x6f4>
    1aea:	89 8f       	std	Y+25, r24	; 0x19
	_delay_us(10);
	Dio_write(E,Low);
    1aec:	8b e0       	ldi	r24, 0x0B	; 11
    1aee:	60 e0       	ldi	r22, 0x00	; 0
    1af0:	0e 94 78 06 	call	0xcf0	; 0xcf0 <Dio_write>
    1af4:	80 e0       	ldi	r24, 0x00	; 0
    1af6:	90 e0       	ldi	r25, 0x00	; 0
    1af8:	a8 e4       	ldi	r26, 0x48	; 72
    1afa:	b3 e4       	ldi	r27, 0x43	; 67
    1afc:	8d 8b       	std	Y+21, r24	; 0x15
    1afe:	9e 8b       	std	Y+22, r25	; 0x16
    1b00:	af 8b       	std	Y+23, r26	; 0x17
    1b02:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1b04:	6d 89       	ldd	r22, Y+21	; 0x15
    1b06:	7e 89       	ldd	r23, Y+22	; 0x16
    1b08:	8f 89       	ldd	r24, Y+23	; 0x17
    1b0a:	98 8d       	ldd	r25, Y+24	; 0x18
    1b0c:	2b ea       	ldi	r18, 0xAB	; 171
    1b0e:	3a ea       	ldi	r19, 0xAA	; 170
    1b10:	4a ea       	ldi	r20, 0xAA	; 170
    1b12:	50 e4       	ldi	r21, 0x40	; 64
    1b14:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b18:	dc 01       	movw	r26, r24
    1b1a:	cb 01       	movw	r24, r22
    1b1c:	89 8b       	std	Y+17, r24	; 0x11
    1b1e:	9a 8b       	std	Y+18, r25	; 0x12
    1b20:	ab 8b       	std	Y+19, r26	; 0x13
    1b22:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    1b24:	69 89       	ldd	r22, Y+17	; 0x11
    1b26:	7a 89       	ldd	r23, Y+18	; 0x12
    1b28:	8b 89       	ldd	r24, Y+19	; 0x13
    1b2a:	9c 89       	ldd	r25, Y+20	; 0x14
    1b2c:	20 e0       	ldi	r18, 0x00	; 0
    1b2e:	30 e0       	ldi	r19, 0x00	; 0
    1b30:	40 e8       	ldi	r20, 0x80	; 128
    1b32:	5f e3       	ldi	r21, 0x3F	; 63
    1b34:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1b38:	88 23       	and	r24, r24
    1b3a:	1c f4       	brge	.+6      	; 0x1b42 <lcd_cmd+0x750>
		__ticks = 1;
    1b3c:	81 e0       	ldi	r24, 0x01	; 1
    1b3e:	88 8b       	std	Y+16, r24	; 0x10
    1b40:	91 c0       	rjmp	.+290    	; 0x1c64 <lcd_cmd+0x872>
	else if (__tmp > 255)
    1b42:	69 89       	ldd	r22, Y+17	; 0x11
    1b44:	7a 89       	ldd	r23, Y+18	; 0x12
    1b46:	8b 89       	ldd	r24, Y+19	; 0x13
    1b48:	9c 89       	ldd	r25, Y+20	; 0x14
    1b4a:	20 e0       	ldi	r18, 0x00	; 0
    1b4c:	30 e0       	ldi	r19, 0x00	; 0
    1b4e:	4f e7       	ldi	r20, 0x7F	; 127
    1b50:	53 e4       	ldi	r21, 0x43	; 67
    1b52:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1b56:	18 16       	cp	r1, r24
    1b58:	0c f0       	brlt	.+2      	; 0x1b5c <lcd_cmd+0x76a>
    1b5a:	7b c0       	rjmp	.+246    	; 0x1c52 <lcd_cmd+0x860>
	{
		_delay_ms(__us / 1000.0);
    1b5c:	6d 89       	ldd	r22, Y+21	; 0x15
    1b5e:	7e 89       	ldd	r23, Y+22	; 0x16
    1b60:	8f 89       	ldd	r24, Y+23	; 0x17
    1b62:	98 8d       	ldd	r25, Y+24	; 0x18
    1b64:	20 e0       	ldi	r18, 0x00	; 0
    1b66:	30 e0       	ldi	r19, 0x00	; 0
    1b68:	4a e7       	ldi	r20, 0x7A	; 122
    1b6a:	54 e4       	ldi	r21, 0x44	; 68
    1b6c:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1b70:	dc 01       	movw	r26, r24
    1b72:	cb 01       	movw	r24, r22
    1b74:	8c 87       	std	Y+12, r24	; 0x0c
    1b76:	9d 87       	std	Y+13, r25	; 0x0d
    1b78:	ae 87       	std	Y+14, r26	; 0x0e
    1b7a:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b7c:	6c 85       	ldd	r22, Y+12	; 0x0c
    1b7e:	7d 85       	ldd	r23, Y+13	; 0x0d
    1b80:	8e 85       	ldd	r24, Y+14	; 0x0e
    1b82:	9f 85       	ldd	r25, Y+15	; 0x0f
    1b84:	20 e0       	ldi	r18, 0x00	; 0
    1b86:	30 e0       	ldi	r19, 0x00	; 0
    1b88:	4a e7       	ldi	r20, 0x7A	; 122
    1b8a:	55 e4       	ldi	r21, 0x45	; 69
    1b8c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b90:	dc 01       	movw	r26, r24
    1b92:	cb 01       	movw	r24, r22
    1b94:	88 87       	std	Y+8, r24	; 0x08
    1b96:	99 87       	std	Y+9, r25	; 0x09
    1b98:	aa 87       	std	Y+10, r26	; 0x0a
    1b9a:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    1b9c:	68 85       	ldd	r22, Y+8	; 0x08
    1b9e:	79 85       	ldd	r23, Y+9	; 0x09
    1ba0:	8a 85       	ldd	r24, Y+10	; 0x0a
    1ba2:	9b 85       	ldd	r25, Y+11	; 0x0b
    1ba4:	20 e0       	ldi	r18, 0x00	; 0
    1ba6:	30 e0       	ldi	r19, 0x00	; 0
    1ba8:	40 e8       	ldi	r20, 0x80	; 128
    1baa:	5f e3       	ldi	r21, 0x3F	; 63
    1bac:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1bb0:	88 23       	and	r24, r24
    1bb2:	2c f4       	brge	.+10     	; 0x1bbe <lcd_cmd+0x7cc>
		__ticks = 1;
    1bb4:	81 e0       	ldi	r24, 0x01	; 1
    1bb6:	90 e0       	ldi	r25, 0x00	; 0
    1bb8:	9f 83       	std	Y+7, r25	; 0x07
    1bba:	8e 83       	std	Y+6, r24	; 0x06
    1bbc:	3f c0       	rjmp	.+126    	; 0x1c3c <lcd_cmd+0x84a>
	else if (__tmp > 65535)
    1bbe:	68 85       	ldd	r22, Y+8	; 0x08
    1bc0:	79 85       	ldd	r23, Y+9	; 0x09
    1bc2:	8a 85       	ldd	r24, Y+10	; 0x0a
    1bc4:	9b 85       	ldd	r25, Y+11	; 0x0b
    1bc6:	20 e0       	ldi	r18, 0x00	; 0
    1bc8:	3f ef       	ldi	r19, 0xFF	; 255
    1bca:	4f e7       	ldi	r20, 0x7F	; 127
    1bcc:	57 e4       	ldi	r21, 0x47	; 71
    1bce:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1bd2:	18 16       	cp	r1, r24
    1bd4:	4c f5       	brge	.+82     	; 0x1c28 <lcd_cmd+0x836>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1bd6:	6c 85       	ldd	r22, Y+12	; 0x0c
    1bd8:	7d 85       	ldd	r23, Y+13	; 0x0d
    1bda:	8e 85       	ldd	r24, Y+14	; 0x0e
    1bdc:	9f 85       	ldd	r25, Y+15	; 0x0f
    1bde:	20 e0       	ldi	r18, 0x00	; 0
    1be0:	30 e0       	ldi	r19, 0x00	; 0
    1be2:	40 e2       	ldi	r20, 0x20	; 32
    1be4:	51 e4       	ldi	r21, 0x41	; 65
    1be6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bea:	dc 01       	movw	r26, r24
    1bec:	cb 01       	movw	r24, r22
    1bee:	bc 01       	movw	r22, r24
    1bf0:	cd 01       	movw	r24, r26
    1bf2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bf6:	dc 01       	movw	r26, r24
    1bf8:	cb 01       	movw	r24, r22
    1bfa:	9f 83       	std	Y+7, r25	; 0x07
    1bfc:	8e 83       	std	Y+6, r24	; 0x06
    1bfe:	0f c0       	rjmp	.+30     	; 0x1c1e <lcd_cmd+0x82c>
    1c00:	80 e9       	ldi	r24, 0x90	; 144
    1c02:	91 e0       	ldi	r25, 0x01	; 1
    1c04:	9d 83       	std	Y+5, r25	; 0x05
    1c06:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1c08:	8c 81       	ldd	r24, Y+4	; 0x04
    1c0a:	9d 81       	ldd	r25, Y+5	; 0x05
    1c0c:	01 97       	sbiw	r24, 0x01	; 1
    1c0e:	f1 f7       	brne	.-4      	; 0x1c0c <lcd_cmd+0x81a>
    1c10:	9d 83       	std	Y+5, r25	; 0x05
    1c12:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c14:	8e 81       	ldd	r24, Y+6	; 0x06
    1c16:	9f 81       	ldd	r25, Y+7	; 0x07
    1c18:	01 97       	sbiw	r24, 0x01	; 1
    1c1a:	9f 83       	std	Y+7, r25	; 0x07
    1c1c:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c1e:	8e 81       	ldd	r24, Y+6	; 0x06
    1c20:	9f 81       	ldd	r25, Y+7	; 0x07
    1c22:	00 97       	sbiw	r24, 0x00	; 0
    1c24:	69 f7       	brne	.-38     	; 0x1c00 <lcd_cmd+0x80e>
    1c26:	24 c0       	rjmp	.+72     	; 0x1c70 <lcd_cmd+0x87e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c28:	68 85       	ldd	r22, Y+8	; 0x08
    1c2a:	79 85       	ldd	r23, Y+9	; 0x09
    1c2c:	8a 85       	ldd	r24, Y+10	; 0x0a
    1c2e:	9b 85       	ldd	r25, Y+11	; 0x0b
    1c30:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c34:	dc 01       	movw	r26, r24
    1c36:	cb 01       	movw	r24, r22
    1c38:	9f 83       	std	Y+7, r25	; 0x07
    1c3a:	8e 83       	std	Y+6, r24	; 0x06
    1c3c:	8e 81       	ldd	r24, Y+6	; 0x06
    1c3e:	9f 81       	ldd	r25, Y+7	; 0x07
    1c40:	9b 83       	std	Y+3, r25	; 0x03
    1c42:	8a 83       	std	Y+2, r24	; 0x02
    1c44:	8a 81       	ldd	r24, Y+2	; 0x02
    1c46:	9b 81       	ldd	r25, Y+3	; 0x03
    1c48:	01 97       	sbiw	r24, 0x01	; 1
    1c4a:	f1 f7       	brne	.-4      	; 0x1c48 <lcd_cmd+0x856>
    1c4c:	9b 83       	std	Y+3, r25	; 0x03
    1c4e:	8a 83       	std	Y+2, r24	; 0x02
    1c50:	0f c0       	rjmp	.+30     	; 0x1c70 <lcd_cmd+0x87e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1c52:	69 89       	ldd	r22, Y+17	; 0x11
    1c54:	7a 89       	ldd	r23, Y+18	; 0x12
    1c56:	8b 89       	ldd	r24, Y+19	; 0x13
    1c58:	9c 89       	ldd	r25, Y+20	; 0x14
    1c5a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c5e:	dc 01       	movw	r26, r24
    1c60:	cb 01       	movw	r24, r22
    1c62:	88 8b       	std	Y+16, r24	; 0x10
    1c64:	88 89       	ldd	r24, Y+16	; 0x10
    1c66:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1c68:	89 81       	ldd	r24, Y+1	; 0x01
    1c6a:	8a 95       	dec	r24
    1c6c:	f1 f7       	brne	.-4      	; 0x1c6a <lcd_cmd+0x878>
    1c6e:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(200);
}
    1c70:	cf 59       	subi	r28, 0x9F	; 159
    1c72:	df 4f       	sbci	r29, 0xFF	; 255
    1c74:	0f b6       	in	r0, 0x3f	; 63
    1c76:	f8 94       	cli
    1c78:	de bf       	out	0x3e, r29	; 62
    1c7a:	0f be       	out	0x3f, r0	; 63
    1c7c:	cd bf       	out	0x3d, r28	; 61
    1c7e:	cf 91       	pop	r28
    1c80:	df 91       	pop	r29
    1c82:	1f 91       	pop	r17
    1c84:	0f 91       	pop	r16
    1c86:	08 95       	ret

00001c88 <lcd_data>:

void lcd_data(uint8 data){
    1c88:	0f 93       	push	r16
    1c8a:	1f 93       	push	r17
    1c8c:	df 93       	push	r29
    1c8e:	cf 93       	push	r28
    1c90:	cd b7       	in	r28, 0x3d	; 61
    1c92:	de b7       	in	r29, 0x3e	; 62
    1c94:	c1 56       	subi	r28, 0x61	; 97
    1c96:	d0 40       	sbci	r29, 0x00	; 0
    1c98:	0f b6       	in	r0, 0x3f	; 63
    1c9a:	f8 94       	cli
    1c9c:	de bf       	out	0x3e, r29	; 62
    1c9e:	0f be       	out	0x3f, r0	; 63
    1ca0:	cd bf       	out	0x3d, r28	; 61
    1ca2:	fe 01       	movw	r30, r28
    1ca4:	ef 59       	subi	r30, 0x9F	; 159
    1ca6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ca8:	80 83       	st	Z, r24
	Dio_write(RS, High);
    1caa:	89 e0       	ldi	r24, 0x09	; 9
    1cac:	61 e0       	ldi	r22, 0x01	; 1
    1cae:	0e 94 78 06 	call	0xcf0	; 0xcf0 <Dio_write>
	Dio_write(RW, Low);
    1cb2:	8a e0       	ldi	r24, 0x0A	; 10
    1cb4:	60 e0       	ldi	r22, 0x00	; 0
    1cb6:	0e 94 78 06 	call	0xcf0	; 0xcf0 <Dio_write>

	if(GET_BIT(data,3)){ Dio_write(D7,High);}else{ Dio_write(D7,Low);}
    1cba:	fe 01       	movw	r30, r28
    1cbc:	ef 59       	subi	r30, 0x9F	; 159
    1cbe:	ff 4f       	sbci	r31, 0xFF	; 255
    1cc0:	80 81       	ld	r24, Z
    1cc2:	88 2f       	mov	r24, r24
    1cc4:	90 e0       	ldi	r25, 0x00	; 0
    1cc6:	88 70       	andi	r24, 0x08	; 8
    1cc8:	90 70       	andi	r25, 0x00	; 0
    1cca:	00 97       	sbiw	r24, 0x00	; 0
    1ccc:	29 f0       	breq	.+10     	; 0x1cd8 <lcd_data+0x50>
    1cce:	87 e0       	ldi	r24, 0x07	; 7
    1cd0:	61 e0       	ldi	r22, 0x01	; 1
    1cd2:	0e 94 78 06 	call	0xcf0	; 0xcf0 <Dio_write>
    1cd6:	04 c0       	rjmp	.+8      	; 0x1ce0 <lcd_data+0x58>
    1cd8:	87 e0       	ldi	r24, 0x07	; 7
    1cda:	60 e0       	ldi	r22, 0x00	; 0
    1cdc:	0e 94 78 06 	call	0xcf0	; 0xcf0 <Dio_write>
	if(GET_BIT(data,2)){ Dio_write(D6,High);}else{ Dio_write(D6,Low);}
    1ce0:	fe 01       	movw	r30, r28
    1ce2:	ef 59       	subi	r30, 0x9F	; 159
    1ce4:	ff 4f       	sbci	r31, 0xFF	; 255
    1ce6:	80 81       	ld	r24, Z
    1ce8:	88 2f       	mov	r24, r24
    1cea:	90 e0       	ldi	r25, 0x00	; 0
    1cec:	84 70       	andi	r24, 0x04	; 4
    1cee:	90 70       	andi	r25, 0x00	; 0
    1cf0:	00 97       	sbiw	r24, 0x00	; 0
    1cf2:	29 f0       	breq	.+10     	; 0x1cfe <lcd_data+0x76>
    1cf4:	86 e0       	ldi	r24, 0x06	; 6
    1cf6:	61 e0       	ldi	r22, 0x01	; 1
    1cf8:	0e 94 78 06 	call	0xcf0	; 0xcf0 <Dio_write>
    1cfc:	04 c0       	rjmp	.+8      	; 0x1d06 <lcd_data+0x7e>
    1cfe:	86 e0       	ldi	r24, 0x06	; 6
    1d00:	60 e0       	ldi	r22, 0x00	; 0
    1d02:	0e 94 78 06 	call	0xcf0	; 0xcf0 <Dio_write>
	if(GET_BIT(data,1)){ Dio_write(D5,High);}else{ Dio_write(D5,Low);}
    1d06:	fe 01       	movw	r30, r28
    1d08:	ef 59       	subi	r30, 0x9F	; 159
    1d0a:	ff 4f       	sbci	r31, 0xFF	; 255
    1d0c:	80 81       	ld	r24, Z
    1d0e:	88 2f       	mov	r24, r24
    1d10:	90 e0       	ldi	r25, 0x00	; 0
    1d12:	82 70       	andi	r24, 0x02	; 2
    1d14:	90 70       	andi	r25, 0x00	; 0
    1d16:	00 97       	sbiw	r24, 0x00	; 0
    1d18:	29 f0       	breq	.+10     	; 0x1d24 <lcd_data+0x9c>
    1d1a:	85 e0       	ldi	r24, 0x05	; 5
    1d1c:	61 e0       	ldi	r22, 0x01	; 1
    1d1e:	0e 94 78 06 	call	0xcf0	; 0xcf0 <Dio_write>
    1d22:	04 c0       	rjmp	.+8      	; 0x1d2c <lcd_data+0xa4>
    1d24:	85 e0       	ldi	r24, 0x05	; 5
    1d26:	60 e0       	ldi	r22, 0x00	; 0
    1d28:	0e 94 78 06 	call	0xcf0	; 0xcf0 <Dio_write>
	if(GET_BIT(data,0)){ Dio_write(D4,High);}else{ Dio_write(D4,Low);}
    1d2c:	fe 01       	movw	r30, r28
    1d2e:	ef 59       	subi	r30, 0x9F	; 159
    1d30:	ff 4f       	sbci	r31, 0xFF	; 255
    1d32:	80 81       	ld	r24, Z
    1d34:	88 2f       	mov	r24, r24
    1d36:	90 e0       	ldi	r25, 0x00	; 0
    1d38:	81 70       	andi	r24, 0x01	; 1
    1d3a:	90 70       	andi	r25, 0x00	; 0
    1d3c:	88 23       	and	r24, r24
    1d3e:	29 f0       	breq	.+10     	; 0x1d4a <lcd_data+0xc2>
    1d40:	84 e0       	ldi	r24, 0x04	; 4
    1d42:	61 e0       	ldi	r22, 0x01	; 1
    1d44:	0e 94 78 06 	call	0xcf0	; 0xcf0 <Dio_write>
    1d48:	04 c0       	rjmp	.+8      	; 0x1d52 <lcd_data+0xca>
    1d4a:	84 e0       	ldi	r24, 0x04	; 4
    1d4c:	60 e0       	ldi	r22, 0x00	; 0
    1d4e:	0e 94 78 06 	call	0xcf0	; 0xcf0 <Dio_write>
	Dio_write(E,High);
    1d52:	8b e0       	ldi	r24, 0x0B	; 11
    1d54:	61 e0       	ldi	r22, 0x01	; 1
    1d56:	0e 94 78 06 	call	0xcf0	; 0xcf0 <Dio_write>
    1d5a:	fe 01       	movw	r30, r28
    1d5c:	e3 5a       	subi	r30, 0xA3	; 163
    1d5e:	ff 4f       	sbci	r31, 0xFF	; 255
    1d60:	80 e0       	ldi	r24, 0x00	; 0
    1d62:	90 e0       	ldi	r25, 0x00	; 0
    1d64:	a0 e2       	ldi	r26, 0x20	; 32
    1d66:	b1 e4       	ldi	r27, 0x41	; 65
    1d68:	80 83       	st	Z, r24
    1d6a:	91 83       	std	Z+1, r25	; 0x01
    1d6c:	a2 83       	std	Z+2, r26	; 0x02
    1d6e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1d70:	8e 01       	movw	r16, r28
    1d72:	07 5a       	subi	r16, 0xA7	; 167
    1d74:	1f 4f       	sbci	r17, 0xFF	; 255
    1d76:	fe 01       	movw	r30, r28
    1d78:	e3 5a       	subi	r30, 0xA3	; 163
    1d7a:	ff 4f       	sbci	r31, 0xFF	; 255
    1d7c:	60 81       	ld	r22, Z
    1d7e:	71 81       	ldd	r23, Z+1	; 0x01
    1d80:	82 81       	ldd	r24, Z+2	; 0x02
    1d82:	93 81       	ldd	r25, Z+3	; 0x03
    1d84:	2b ea       	ldi	r18, 0xAB	; 171
    1d86:	3a ea       	ldi	r19, 0xAA	; 170
    1d88:	4a ea       	ldi	r20, 0xAA	; 170
    1d8a:	50 e4       	ldi	r21, 0x40	; 64
    1d8c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d90:	dc 01       	movw	r26, r24
    1d92:	cb 01       	movw	r24, r22
    1d94:	f8 01       	movw	r30, r16
    1d96:	80 83       	st	Z, r24
    1d98:	91 83       	std	Z+1, r25	; 0x01
    1d9a:	a2 83       	std	Z+2, r26	; 0x02
    1d9c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1d9e:	fe 01       	movw	r30, r28
    1da0:	e7 5a       	subi	r30, 0xA7	; 167
    1da2:	ff 4f       	sbci	r31, 0xFF	; 255
    1da4:	60 81       	ld	r22, Z
    1da6:	71 81       	ldd	r23, Z+1	; 0x01
    1da8:	82 81       	ldd	r24, Z+2	; 0x02
    1daa:	93 81       	ldd	r25, Z+3	; 0x03
    1dac:	20 e0       	ldi	r18, 0x00	; 0
    1dae:	30 e0       	ldi	r19, 0x00	; 0
    1db0:	40 e8       	ldi	r20, 0x80	; 128
    1db2:	5f e3       	ldi	r21, 0x3F	; 63
    1db4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1db8:	88 23       	and	r24, r24
    1dba:	34 f4       	brge	.+12     	; 0x1dc8 <lcd_data+0x140>
		__ticks = 1;
    1dbc:	fe 01       	movw	r30, r28
    1dbe:	e8 5a       	subi	r30, 0xA8	; 168
    1dc0:	ff 4f       	sbci	r31, 0xFF	; 255
    1dc2:	81 e0       	ldi	r24, 0x01	; 1
    1dc4:	80 83       	st	Z, r24
    1dc6:	e0 c0       	rjmp	.+448    	; 0x1f88 <lcd_data+0x300>
	else if (__tmp > 255)
    1dc8:	fe 01       	movw	r30, r28
    1dca:	e7 5a       	subi	r30, 0xA7	; 167
    1dcc:	ff 4f       	sbci	r31, 0xFF	; 255
    1dce:	60 81       	ld	r22, Z
    1dd0:	71 81       	ldd	r23, Z+1	; 0x01
    1dd2:	82 81       	ldd	r24, Z+2	; 0x02
    1dd4:	93 81       	ldd	r25, Z+3	; 0x03
    1dd6:	20 e0       	ldi	r18, 0x00	; 0
    1dd8:	30 e0       	ldi	r19, 0x00	; 0
    1dda:	4f e7       	ldi	r20, 0x7F	; 127
    1ddc:	53 e4       	ldi	r21, 0x43	; 67
    1dde:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1de2:	18 16       	cp	r1, r24
    1de4:	0c f0       	brlt	.+2      	; 0x1de8 <lcd_data+0x160>
    1de6:	c0 c0       	rjmp	.+384    	; 0x1f68 <lcd_data+0x2e0>
	{
		_delay_ms(__us / 1000.0);
    1de8:	fe 01       	movw	r30, r28
    1dea:	e3 5a       	subi	r30, 0xA3	; 163
    1dec:	ff 4f       	sbci	r31, 0xFF	; 255
    1dee:	60 81       	ld	r22, Z
    1df0:	71 81       	ldd	r23, Z+1	; 0x01
    1df2:	82 81       	ldd	r24, Z+2	; 0x02
    1df4:	93 81       	ldd	r25, Z+3	; 0x03
    1df6:	20 e0       	ldi	r18, 0x00	; 0
    1df8:	30 e0       	ldi	r19, 0x00	; 0
    1dfa:	4a e7       	ldi	r20, 0x7A	; 122
    1dfc:	54 e4       	ldi	r21, 0x44	; 68
    1dfe:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1e02:	dc 01       	movw	r26, r24
    1e04:	cb 01       	movw	r24, r22
    1e06:	fe 01       	movw	r30, r28
    1e08:	ec 5a       	subi	r30, 0xAC	; 172
    1e0a:	ff 4f       	sbci	r31, 0xFF	; 255
    1e0c:	80 83       	st	Z, r24
    1e0e:	91 83       	std	Z+1, r25	; 0x01
    1e10:	a2 83       	std	Z+2, r26	; 0x02
    1e12:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e14:	8e 01       	movw	r16, r28
    1e16:	00 5b       	subi	r16, 0xB0	; 176
    1e18:	1f 4f       	sbci	r17, 0xFF	; 255
    1e1a:	fe 01       	movw	r30, r28
    1e1c:	ec 5a       	subi	r30, 0xAC	; 172
    1e1e:	ff 4f       	sbci	r31, 0xFF	; 255
    1e20:	60 81       	ld	r22, Z
    1e22:	71 81       	ldd	r23, Z+1	; 0x01
    1e24:	82 81       	ldd	r24, Z+2	; 0x02
    1e26:	93 81       	ldd	r25, Z+3	; 0x03
    1e28:	20 e0       	ldi	r18, 0x00	; 0
    1e2a:	30 e0       	ldi	r19, 0x00	; 0
    1e2c:	4a e7       	ldi	r20, 0x7A	; 122
    1e2e:	55 e4       	ldi	r21, 0x45	; 69
    1e30:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e34:	dc 01       	movw	r26, r24
    1e36:	cb 01       	movw	r24, r22
    1e38:	f8 01       	movw	r30, r16
    1e3a:	80 83       	st	Z, r24
    1e3c:	91 83       	std	Z+1, r25	; 0x01
    1e3e:	a2 83       	std	Z+2, r26	; 0x02
    1e40:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1e42:	fe 01       	movw	r30, r28
    1e44:	e0 5b       	subi	r30, 0xB0	; 176
    1e46:	ff 4f       	sbci	r31, 0xFF	; 255
    1e48:	60 81       	ld	r22, Z
    1e4a:	71 81       	ldd	r23, Z+1	; 0x01
    1e4c:	82 81       	ldd	r24, Z+2	; 0x02
    1e4e:	93 81       	ldd	r25, Z+3	; 0x03
    1e50:	20 e0       	ldi	r18, 0x00	; 0
    1e52:	30 e0       	ldi	r19, 0x00	; 0
    1e54:	40 e8       	ldi	r20, 0x80	; 128
    1e56:	5f e3       	ldi	r21, 0x3F	; 63
    1e58:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1e5c:	88 23       	and	r24, r24
    1e5e:	44 f4       	brge	.+16     	; 0x1e70 <lcd_data+0x1e8>
		__ticks = 1;
    1e60:	fe 01       	movw	r30, r28
    1e62:	e2 5b       	subi	r30, 0xB2	; 178
    1e64:	ff 4f       	sbci	r31, 0xFF	; 255
    1e66:	81 e0       	ldi	r24, 0x01	; 1
    1e68:	90 e0       	ldi	r25, 0x00	; 0
    1e6a:	91 83       	std	Z+1, r25	; 0x01
    1e6c:	80 83       	st	Z, r24
    1e6e:	64 c0       	rjmp	.+200    	; 0x1f38 <lcd_data+0x2b0>
	else if (__tmp > 65535)
    1e70:	fe 01       	movw	r30, r28
    1e72:	e0 5b       	subi	r30, 0xB0	; 176
    1e74:	ff 4f       	sbci	r31, 0xFF	; 255
    1e76:	60 81       	ld	r22, Z
    1e78:	71 81       	ldd	r23, Z+1	; 0x01
    1e7a:	82 81       	ldd	r24, Z+2	; 0x02
    1e7c:	93 81       	ldd	r25, Z+3	; 0x03
    1e7e:	20 e0       	ldi	r18, 0x00	; 0
    1e80:	3f ef       	ldi	r19, 0xFF	; 255
    1e82:	4f e7       	ldi	r20, 0x7F	; 127
    1e84:	57 e4       	ldi	r21, 0x47	; 71
    1e86:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1e8a:	18 16       	cp	r1, r24
    1e8c:	0c f0       	brlt	.+2      	; 0x1e90 <lcd_data+0x208>
    1e8e:	43 c0       	rjmp	.+134    	; 0x1f16 <lcd_data+0x28e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e90:	fe 01       	movw	r30, r28
    1e92:	ec 5a       	subi	r30, 0xAC	; 172
    1e94:	ff 4f       	sbci	r31, 0xFF	; 255
    1e96:	60 81       	ld	r22, Z
    1e98:	71 81       	ldd	r23, Z+1	; 0x01
    1e9a:	82 81       	ldd	r24, Z+2	; 0x02
    1e9c:	93 81       	ldd	r25, Z+3	; 0x03
    1e9e:	20 e0       	ldi	r18, 0x00	; 0
    1ea0:	30 e0       	ldi	r19, 0x00	; 0
    1ea2:	40 e2       	ldi	r20, 0x20	; 32
    1ea4:	51 e4       	ldi	r21, 0x41	; 65
    1ea6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1eaa:	dc 01       	movw	r26, r24
    1eac:	cb 01       	movw	r24, r22
    1eae:	8e 01       	movw	r16, r28
    1eb0:	02 5b       	subi	r16, 0xB2	; 178
    1eb2:	1f 4f       	sbci	r17, 0xFF	; 255
    1eb4:	bc 01       	movw	r22, r24
    1eb6:	cd 01       	movw	r24, r26
    1eb8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ebc:	dc 01       	movw	r26, r24
    1ebe:	cb 01       	movw	r24, r22
    1ec0:	f8 01       	movw	r30, r16
    1ec2:	91 83       	std	Z+1, r25	; 0x01
    1ec4:	80 83       	st	Z, r24
    1ec6:	1f c0       	rjmp	.+62     	; 0x1f06 <lcd_data+0x27e>
    1ec8:	fe 01       	movw	r30, r28
    1eca:	e4 5b       	subi	r30, 0xB4	; 180
    1ecc:	ff 4f       	sbci	r31, 0xFF	; 255
    1ece:	80 e9       	ldi	r24, 0x90	; 144
    1ed0:	91 e0       	ldi	r25, 0x01	; 1
    1ed2:	91 83       	std	Z+1, r25	; 0x01
    1ed4:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1ed6:	fe 01       	movw	r30, r28
    1ed8:	e4 5b       	subi	r30, 0xB4	; 180
    1eda:	ff 4f       	sbci	r31, 0xFF	; 255
    1edc:	80 81       	ld	r24, Z
    1ede:	91 81       	ldd	r25, Z+1	; 0x01
    1ee0:	01 97       	sbiw	r24, 0x01	; 1
    1ee2:	f1 f7       	brne	.-4      	; 0x1ee0 <lcd_data+0x258>
    1ee4:	fe 01       	movw	r30, r28
    1ee6:	e4 5b       	subi	r30, 0xB4	; 180
    1ee8:	ff 4f       	sbci	r31, 0xFF	; 255
    1eea:	91 83       	std	Z+1, r25	; 0x01
    1eec:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1eee:	de 01       	movw	r26, r28
    1ef0:	a2 5b       	subi	r26, 0xB2	; 178
    1ef2:	bf 4f       	sbci	r27, 0xFF	; 255
    1ef4:	fe 01       	movw	r30, r28
    1ef6:	e2 5b       	subi	r30, 0xB2	; 178
    1ef8:	ff 4f       	sbci	r31, 0xFF	; 255
    1efa:	80 81       	ld	r24, Z
    1efc:	91 81       	ldd	r25, Z+1	; 0x01
    1efe:	01 97       	sbiw	r24, 0x01	; 1
    1f00:	11 96       	adiw	r26, 0x01	; 1
    1f02:	9c 93       	st	X, r25
    1f04:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f06:	fe 01       	movw	r30, r28
    1f08:	e2 5b       	subi	r30, 0xB2	; 178
    1f0a:	ff 4f       	sbci	r31, 0xFF	; 255
    1f0c:	80 81       	ld	r24, Z
    1f0e:	91 81       	ldd	r25, Z+1	; 0x01
    1f10:	00 97       	sbiw	r24, 0x00	; 0
    1f12:	d1 f6       	brne	.-76     	; 0x1ec8 <lcd_data+0x240>
    1f14:	4b c0       	rjmp	.+150    	; 0x1fac <lcd_data+0x324>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f16:	8e 01       	movw	r16, r28
    1f18:	02 5b       	subi	r16, 0xB2	; 178
    1f1a:	1f 4f       	sbci	r17, 0xFF	; 255
    1f1c:	fe 01       	movw	r30, r28
    1f1e:	e0 5b       	subi	r30, 0xB0	; 176
    1f20:	ff 4f       	sbci	r31, 0xFF	; 255
    1f22:	60 81       	ld	r22, Z
    1f24:	71 81       	ldd	r23, Z+1	; 0x01
    1f26:	82 81       	ldd	r24, Z+2	; 0x02
    1f28:	93 81       	ldd	r25, Z+3	; 0x03
    1f2a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f2e:	dc 01       	movw	r26, r24
    1f30:	cb 01       	movw	r24, r22
    1f32:	f8 01       	movw	r30, r16
    1f34:	91 83       	std	Z+1, r25	; 0x01
    1f36:	80 83       	st	Z, r24
    1f38:	de 01       	movw	r26, r28
    1f3a:	a6 5b       	subi	r26, 0xB6	; 182
    1f3c:	bf 4f       	sbci	r27, 0xFF	; 255
    1f3e:	fe 01       	movw	r30, r28
    1f40:	e2 5b       	subi	r30, 0xB2	; 178
    1f42:	ff 4f       	sbci	r31, 0xFF	; 255
    1f44:	80 81       	ld	r24, Z
    1f46:	91 81       	ldd	r25, Z+1	; 0x01
    1f48:	11 96       	adiw	r26, 0x01	; 1
    1f4a:	9c 93       	st	X, r25
    1f4c:	8e 93       	st	-X, r24
    1f4e:	fe 01       	movw	r30, r28
    1f50:	e6 5b       	subi	r30, 0xB6	; 182
    1f52:	ff 4f       	sbci	r31, 0xFF	; 255
    1f54:	80 81       	ld	r24, Z
    1f56:	91 81       	ldd	r25, Z+1	; 0x01
    1f58:	01 97       	sbiw	r24, 0x01	; 1
    1f5a:	f1 f7       	brne	.-4      	; 0x1f58 <lcd_data+0x2d0>
    1f5c:	fe 01       	movw	r30, r28
    1f5e:	e6 5b       	subi	r30, 0xB6	; 182
    1f60:	ff 4f       	sbci	r31, 0xFF	; 255
    1f62:	91 83       	std	Z+1, r25	; 0x01
    1f64:	80 83       	st	Z, r24
    1f66:	22 c0       	rjmp	.+68     	; 0x1fac <lcd_data+0x324>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1f68:	8e 01       	movw	r16, r28
    1f6a:	08 5a       	subi	r16, 0xA8	; 168
    1f6c:	1f 4f       	sbci	r17, 0xFF	; 255
    1f6e:	fe 01       	movw	r30, r28
    1f70:	e7 5a       	subi	r30, 0xA7	; 167
    1f72:	ff 4f       	sbci	r31, 0xFF	; 255
    1f74:	60 81       	ld	r22, Z
    1f76:	71 81       	ldd	r23, Z+1	; 0x01
    1f78:	82 81       	ldd	r24, Z+2	; 0x02
    1f7a:	93 81       	ldd	r25, Z+3	; 0x03
    1f7c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f80:	dc 01       	movw	r26, r24
    1f82:	cb 01       	movw	r24, r22
    1f84:	f8 01       	movw	r30, r16
    1f86:	80 83       	st	Z, r24
    1f88:	de 01       	movw	r26, r28
    1f8a:	a7 5b       	subi	r26, 0xB7	; 183
    1f8c:	bf 4f       	sbci	r27, 0xFF	; 255
    1f8e:	fe 01       	movw	r30, r28
    1f90:	e8 5a       	subi	r30, 0xA8	; 168
    1f92:	ff 4f       	sbci	r31, 0xFF	; 255
    1f94:	80 81       	ld	r24, Z
    1f96:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1f98:	fe 01       	movw	r30, r28
    1f9a:	e7 5b       	subi	r30, 0xB7	; 183
    1f9c:	ff 4f       	sbci	r31, 0xFF	; 255
    1f9e:	80 81       	ld	r24, Z
    1fa0:	8a 95       	dec	r24
    1fa2:	f1 f7       	brne	.-4      	; 0x1fa0 <lcd_data+0x318>
    1fa4:	fe 01       	movw	r30, r28
    1fa6:	e7 5b       	subi	r30, 0xB7	; 183
    1fa8:	ff 4f       	sbci	r31, 0xFF	; 255
    1faa:	80 83       	st	Z, r24
	_delay_us(10);
	Dio_write(E,Low);
    1fac:	8b e0       	ldi	r24, 0x0B	; 11
    1fae:	60 e0       	ldi	r22, 0x00	; 0
    1fb0:	0e 94 78 06 	call	0xcf0	; 0xcf0 <Dio_write>
    1fb4:	fe 01       	movw	r30, r28
    1fb6:	eb 5b       	subi	r30, 0xBB	; 187
    1fb8:	ff 4f       	sbci	r31, 0xFF	; 255
    1fba:	80 e0       	ldi	r24, 0x00	; 0
    1fbc:	90 e0       	ldi	r25, 0x00	; 0
    1fbe:	a8 e4       	ldi	r26, 0x48	; 72
    1fc0:	b3 e4       	ldi	r27, 0x43	; 67
    1fc2:	80 83       	st	Z, r24
    1fc4:	91 83       	std	Z+1, r25	; 0x01
    1fc6:	a2 83       	std	Z+2, r26	; 0x02
    1fc8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1fca:	8e 01       	movw	r16, r28
    1fcc:	0f 5b       	subi	r16, 0xBF	; 191
    1fce:	1f 4f       	sbci	r17, 0xFF	; 255
    1fd0:	fe 01       	movw	r30, r28
    1fd2:	eb 5b       	subi	r30, 0xBB	; 187
    1fd4:	ff 4f       	sbci	r31, 0xFF	; 255
    1fd6:	60 81       	ld	r22, Z
    1fd8:	71 81       	ldd	r23, Z+1	; 0x01
    1fda:	82 81       	ldd	r24, Z+2	; 0x02
    1fdc:	93 81       	ldd	r25, Z+3	; 0x03
    1fde:	2b ea       	ldi	r18, 0xAB	; 171
    1fe0:	3a ea       	ldi	r19, 0xAA	; 170
    1fe2:	4a ea       	ldi	r20, 0xAA	; 170
    1fe4:	50 e4       	ldi	r21, 0x40	; 64
    1fe6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fea:	dc 01       	movw	r26, r24
    1fec:	cb 01       	movw	r24, r22
    1fee:	f8 01       	movw	r30, r16
    1ff0:	80 83       	st	Z, r24
    1ff2:	91 83       	std	Z+1, r25	; 0x01
    1ff4:	a2 83       	std	Z+2, r26	; 0x02
    1ff6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1ff8:	fe 01       	movw	r30, r28
    1ffa:	ef 5b       	subi	r30, 0xBF	; 191
    1ffc:	ff 4f       	sbci	r31, 0xFF	; 255
    1ffe:	60 81       	ld	r22, Z
    2000:	71 81       	ldd	r23, Z+1	; 0x01
    2002:	82 81       	ldd	r24, Z+2	; 0x02
    2004:	93 81       	ldd	r25, Z+3	; 0x03
    2006:	20 e0       	ldi	r18, 0x00	; 0
    2008:	30 e0       	ldi	r19, 0x00	; 0
    200a:	40 e8       	ldi	r20, 0x80	; 128
    200c:	5f e3       	ldi	r21, 0x3F	; 63
    200e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2012:	88 23       	and	r24, r24
    2014:	34 f4       	brge	.+12     	; 0x2022 <lcd_data+0x39a>
		__ticks = 1;
    2016:	81 e0       	ldi	r24, 0x01	; 1
    2018:	fe 01       	movw	r30, r28
    201a:	e0 5c       	subi	r30, 0xC0	; 192
    201c:	ff 4f       	sbci	r31, 0xFF	; 255
    201e:	80 83       	st	Z, r24
    2020:	9d c0       	rjmp	.+314    	; 0x215c <lcd_data+0x4d4>
	else if (__tmp > 255)
    2022:	fe 01       	movw	r30, r28
    2024:	ef 5b       	subi	r30, 0xBF	; 191
    2026:	ff 4f       	sbci	r31, 0xFF	; 255
    2028:	60 81       	ld	r22, Z
    202a:	71 81       	ldd	r23, Z+1	; 0x01
    202c:	82 81       	ldd	r24, Z+2	; 0x02
    202e:	93 81       	ldd	r25, Z+3	; 0x03
    2030:	20 e0       	ldi	r18, 0x00	; 0
    2032:	30 e0       	ldi	r19, 0x00	; 0
    2034:	4f e7       	ldi	r20, 0x7F	; 127
    2036:	53 e4       	ldi	r21, 0x43	; 67
    2038:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    203c:	18 16       	cp	r1, r24
    203e:	0c f0       	brlt	.+2      	; 0x2042 <lcd_data+0x3ba>
    2040:	7e c0       	rjmp	.+252    	; 0x213e <lcd_data+0x4b6>
	{
		_delay_ms(__us / 1000.0);
    2042:	fe 01       	movw	r30, r28
    2044:	eb 5b       	subi	r30, 0xBB	; 187
    2046:	ff 4f       	sbci	r31, 0xFF	; 255
    2048:	60 81       	ld	r22, Z
    204a:	71 81       	ldd	r23, Z+1	; 0x01
    204c:	82 81       	ldd	r24, Z+2	; 0x02
    204e:	93 81       	ldd	r25, Z+3	; 0x03
    2050:	20 e0       	ldi	r18, 0x00	; 0
    2052:	30 e0       	ldi	r19, 0x00	; 0
    2054:	4a e7       	ldi	r20, 0x7A	; 122
    2056:	54 e4       	ldi	r21, 0x44	; 68
    2058:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    205c:	dc 01       	movw	r26, r24
    205e:	cb 01       	movw	r24, r22
    2060:	8c af       	std	Y+60, r24	; 0x3c
    2062:	9d af       	std	Y+61, r25	; 0x3d
    2064:	ae af       	std	Y+62, r26	; 0x3e
    2066:	bf af       	std	Y+63, r27	; 0x3f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2068:	6c ad       	ldd	r22, Y+60	; 0x3c
    206a:	7d ad       	ldd	r23, Y+61	; 0x3d
    206c:	8e ad       	ldd	r24, Y+62	; 0x3e
    206e:	9f ad       	ldd	r25, Y+63	; 0x3f
    2070:	20 e0       	ldi	r18, 0x00	; 0
    2072:	30 e0       	ldi	r19, 0x00	; 0
    2074:	4a e7       	ldi	r20, 0x7A	; 122
    2076:	55 e4       	ldi	r21, 0x45	; 69
    2078:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    207c:	dc 01       	movw	r26, r24
    207e:	cb 01       	movw	r24, r22
    2080:	88 af       	std	Y+56, r24	; 0x38
    2082:	99 af       	std	Y+57, r25	; 0x39
    2084:	aa af       	std	Y+58, r26	; 0x3a
    2086:	bb af       	std	Y+59, r27	; 0x3b
	if (__tmp < 1.0)
    2088:	68 ad       	ldd	r22, Y+56	; 0x38
    208a:	79 ad       	ldd	r23, Y+57	; 0x39
    208c:	8a ad       	ldd	r24, Y+58	; 0x3a
    208e:	9b ad       	ldd	r25, Y+59	; 0x3b
    2090:	20 e0       	ldi	r18, 0x00	; 0
    2092:	30 e0       	ldi	r19, 0x00	; 0
    2094:	40 e8       	ldi	r20, 0x80	; 128
    2096:	5f e3       	ldi	r21, 0x3F	; 63
    2098:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    209c:	88 23       	and	r24, r24
    209e:	2c f4       	brge	.+10     	; 0x20aa <lcd_data+0x422>
		__ticks = 1;
    20a0:	81 e0       	ldi	r24, 0x01	; 1
    20a2:	90 e0       	ldi	r25, 0x00	; 0
    20a4:	9f ab       	std	Y+55, r25	; 0x37
    20a6:	8e ab       	std	Y+54, r24	; 0x36
    20a8:	3f c0       	rjmp	.+126    	; 0x2128 <lcd_data+0x4a0>
	else if (__tmp > 65535)
    20aa:	68 ad       	ldd	r22, Y+56	; 0x38
    20ac:	79 ad       	ldd	r23, Y+57	; 0x39
    20ae:	8a ad       	ldd	r24, Y+58	; 0x3a
    20b0:	9b ad       	ldd	r25, Y+59	; 0x3b
    20b2:	20 e0       	ldi	r18, 0x00	; 0
    20b4:	3f ef       	ldi	r19, 0xFF	; 255
    20b6:	4f e7       	ldi	r20, 0x7F	; 127
    20b8:	57 e4       	ldi	r21, 0x47	; 71
    20ba:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    20be:	18 16       	cp	r1, r24
    20c0:	4c f5       	brge	.+82     	; 0x2114 <lcd_data+0x48c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20c2:	6c ad       	ldd	r22, Y+60	; 0x3c
    20c4:	7d ad       	ldd	r23, Y+61	; 0x3d
    20c6:	8e ad       	ldd	r24, Y+62	; 0x3e
    20c8:	9f ad       	ldd	r25, Y+63	; 0x3f
    20ca:	20 e0       	ldi	r18, 0x00	; 0
    20cc:	30 e0       	ldi	r19, 0x00	; 0
    20ce:	40 e2       	ldi	r20, 0x20	; 32
    20d0:	51 e4       	ldi	r21, 0x41	; 65
    20d2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20d6:	dc 01       	movw	r26, r24
    20d8:	cb 01       	movw	r24, r22
    20da:	bc 01       	movw	r22, r24
    20dc:	cd 01       	movw	r24, r26
    20de:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20e2:	dc 01       	movw	r26, r24
    20e4:	cb 01       	movw	r24, r22
    20e6:	9f ab       	std	Y+55, r25	; 0x37
    20e8:	8e ab       	std	Y+54, r24	; 0x36
    20ea:	0f c0       	rjmp	.+30     	; 0x210a <lcd_data+0x482>
    20ec:	80 e9       	ldi	r24, 0x90	; 144
    20ee:	91 e0       	ldi	r25, 0x01	; 1
    20f0:	9d ab       	std	Y+53, r25	; 0x35
    20f2:	8c ab       	std	Y+52, r24	; 0x34
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    20f4:	8c a9       	ldd	r24, Y+52	; 0x34
    20f6:	9d a9       	ldd	r25, Y+53	; 0x35
    20f8:	01 97       	sbiw	r24, 0x01	; 1
    20fa:	f1 f7       	brne	.-4      	; 0x20f8 <lcd_data+0x470>
    20fc:	9d ab       	std	Y+53, r25	; 0x35
    20fe:	8c ab       	std	Y+52, r24	; 0x34
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2100:	8e a9       	ldd	r24, Y+54	; 0x36
    2102:	9f a9       	ldd	r25, Y+55	; 0x37
    2104:	01 97       	sbiw	r24, 0x01	; 1
    2106:	9f ab       	std	Y+55, r25	; 0x37
    2108:	8e ab       	std	Y+54, r24	; 0x36
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    210a:	8e a9       	ldd	r24, Y+54	; 0x36
    210c:	9f a9       	ldd	r25, Y+55	; 0x37
    210e:	00 97       	sbiw	r24, 0x00	; 0
    2110:	69 f7       	brne	.-38     	; 0x20ec <lcd_data+0x464>
    2112:	2d c0       	rjmp	.+90     	; 0x216e <lcd_data+0x4e6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2114:	68 ad       	ldd	r22, Y+56	; 0x38
    2116:	79 ad       	ldd	r23, Y+57	; 0x39
    2118:	8a ad       	ldd	r24, Y+58	; 0x3a
    211a:	9b ad       	ldd	r25, Y+59	; 0x3b
    211c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2120:	dc 01       	movw	r26, r24
    2122:	cb 01       	movw	r24, r22
    2124:	9f ab       	std	Y+55, r25	; 0x37
    2126:	8e ab       	std	Y+54, r24	; 0x36
    2128:	8e a9       	ldd	r24, Y+54	; 0x36
    212a:	9f a9       	ldd	r25, Y+55	; 0x37
    212c:	9b ab       	std	Y+51, r25	; 0x33
    212e:	8a ab       	std	Y+50, r24	; 0x32
    2130:	8a a9       	ldd	r24, Y+50	; 0x32
    2132:	9b a9       	ldd	r25, Y+51	; 0x33
    2134:	01 97       	sbiw	r24, 0x01	; 1
    2136:	f1 f7       	brne	.-4      	; 0x2134 <lcd_data+0x4ac>
    2138:	9b ab       	std	Y+51, r25	; 0x33
    213a:	8a ab       	std	Y+50, r24	; 0x32
    213c:	18 c0       	rjmp	.+48     	; 0x216e <lcd_data+0x4e6>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    213e:	fe 01       	movw	r30, r28
    2140:	ef 5b       	subi	r30, 0xBF	; 191
    2142:	ff 4f       	sbci	r31, 0xFF	; 255
    2144:	60 81       	ld	r22, Z
    2146:	71 81       	ldd	r23, Z+1	; 0x01
    2148:	82 81       	ldd	r24, Z+2	; 0x02
    214a:	93 81       	ldd	r25, Z+3	; 0x03
    214c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2150:	dc 01       	movw	r26, r24
    2152:	cb 01       	movw	r24, r22
    2154:	fe 01       	movw	r30, r28
    2156:	e0 5c       	subi	r30, 0xC0	; 192
    2158:	ff 4f       	sbci	r31, 0xFF	; 255
    215a:	80 83       	st	Z, r24
    215c:	fe 01       	movw	r30, r28
    215e:	e0 5c       	subi	r30, 0xC0	; 192
    2160:	ff 4f       	sbci	r31, 0xFF	; 255
    2162:	80 81       	ld	r24, Z
    2164:	89 ab       	std	Y+49, r24	; 0x31
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2166:	89 a9       	ldd	r24, Y+49	; 0x31
    2168:	8a 95       	dec	r24
    216a:	f1 f7       	brne	.-4      	; 0x2168 <lcd_data+0x4e0>
    216c:	89 ab       	std	Y+49, r24	; 0x31
	_delay_us(200);

	if(GET_BIT(data,7)){ Dio_write(D7,High);}else{ Dio_write(D7,Low);}
    216e:	fe 01       	movw	r30, r28
    2170:	ef 59       	subi	r30, 0x9F	; 159
    2172:	ff 4f       	sbci	r31, 0xFF	; 255
    2174:	80 81       	ld	r24, Z
    2176:	88 23       	and	r24, r24
    2178:	2c f4       	brge	.+10     	; 0x2184 <lcd_data+0x4fc>
    217a:	87 e0       	ldi	r24, 0x07	; 7
    217c:	61 e0       	ldi	r22, 0x01	; 1
    217e:	0e 94 78 06 	call	0xcf0	; 0xcf0 <Dio_write>
    2182:	04 c0       	rjmp	.+8      	; 0x218c <lcd_data+0x504>
    2184:	87 e0       	ldi	r24, 0x07	; 7
    2186:	60 e0       	ldi	r22, 0x00	; 0
    2188:	0e 94 78 06 	call	0xcf0	; 0xcf0 <Dio_write>
	if(GET_BIT(data,6)){ Dio_write(D6,High);}else{ Dio_write(D6,Low);}
    218c:	fe 01       	movw	r30, r28
    218e:	ef 59       	subi	r30, 0x9F	; 159
    2190:	ff 4f       	sbci	r31, 0xFF	; 255
    2192:	80 81       	ld	r24, Z
    2194:	88 2f       	mov	r24, r24
    2196:	90 e0       	ldi	r25, 0x00	; 0
    2198:	80 74       	andi	r24, 0x40	; 64
    219a:	90 70       	andi	r25, 0x00	; 0
    219c:	00 97       	sbiw	r24, 0x00	; 0
    219e:	29 f0       	breq	.+10     	; 0x21aa <lcd_data+0x522>
    21a0:	86 e0       	ldi	r24, 0x06	; 6
    21a2:	61 e0       	ldi	r22, 0x01	; 1
    21a4:	0e 94 78 06 	call	0xcf0	; 0xcf0 <Dio_write>
    21a8:	04 c0       	rjmp	.+8      	; 0x21b2 <lcd_data+0x52a>
    21aa:	86 e0       	ldi	r24, 0x06	; 6
    21ac:	60 e0       	ldi	r22, 0x00	; 0
    21ae:	0e 94 78 06 	call	0xcf0	; 0xcf0 <Dio_write>
	if(GET_BIT(data,5)){ Dio_write(D5,High);}else{ Dio_write(D5,Low);}
    21b2:	fe 01       	movw	r30, r28
    21b4:	ef 59       	subi	r30, 0x9F	; 159
    21b6:	ff 4f       	sbci	r31, 0xFF	; 255
    21b8:	80 81       	ld	r24, Z
    21ba:	88 2f       	mov	r24, r24
    21bc:	90 e0       	ldi	r25, 0x00	; 0
    21be:	80 72       	andi	r24, 0x20	; 32
    21c0:	90 70       	andi	r25, 0x00	; 0
    21c2:	00 97       	sbiw	r24, 0x00	; 0
    21c4:	29 f0       	breq	.+10     	; 0x21d0 <lcd_data+0x548>
    21c6:	85 e0       	ldi	r24, 0x05	; 5
    21c8:	61 e0       	ldi	r22, 0x01	; 1
    21ca:	0e 94 78 06 	call	0xcf0	; 0xcf0 <Dio_write>
    21ce:	04 c0       	rjmp	.+8      	; 0x21d8 <lcd_data+0x550>
    21d0:	85 e0       	ldi	r24, 0x05	; 5
    21d2:	60 e0       	ldi	r22, 0x00	; 0
    21d4:	0e 94 78 06 	call	0xcf0	; 0xcf0 <Dio_write>
	if(GET_BIT(data,4)){ Dio_write(D4,High);}else{ Dio_write(D4,Low);}
    21d8:	fe 01       	movw	r30, r28
    21da:	ef 59       	subi	r30, 0x9F	; 159
    21dc:	ff 4f       	sbci	r31, 0xFF	; 255
    21de:	80 81       	ld	r24, Z
    21e0:	88 2f       	mov	r24, r24
    21e2:	90 e0       	ldi	r25, 0x00	; 0
    21e4:	80 71       	andi	r24, 0x10	; 16
    21e6:	90 70       	andi	r25, 0x00	; 0
    21e8:	00 97       	sbiw	r24, 0x00	; 0
    21ea:	29 f0       	breq	.+10     	; 0x21f6 <lcd_data+0x56e>
    21ec:	84 e0       	ldi	r24, 0x04	; 4
    21ee:	61 e0       	ldi	r22, 0x01	; 1
    21f0:	0e 94 78 06 	call	0xcf0	; 0xcf0 <Dio_write>
    21f4:	04 c0       	rjmp	.+8      	; 0x21fe <lcd_data+0x576>
    21f6:	84 e0       	ldi	r24, 0x04	; 4
    21f8:	60 e0       	ldi	r22, 0x00	; 0
    21fa:	0e 94 78 06 	call	0xcf0	; 0xcf0 <Dio_write>

	Dio_write(E,High);
    21fe:	8b e0       	ldi	r24, 0x0B	; 11
    2200:	61 e0       	ldi	r22, 0x01	; 1
    2202:	0e 94 78 06 	call	0xcf0	; 0xcf0 <Dio_write>
    2206:	80 e0       	ldi	r24, 0x00	; 0
    2208:	90 e0       	ldi	r25, 0x00	; 0
    220a:	a0 e2       	ldi	r26, 0x20	; 32
    220c:	b1 e4       	ldi	r27, 0x41	; 65
    220e:	8d a7       	std	Y+45, r24	; 0x2d
    2210:	9e a7       	std	Y+46, r25	; 0x2e
    2212:	af a7       	std	Y+47, r26	; 0x2f
    2214:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2216:	6d a5       	ldd	r22, Y+45	; 0x2d
    2218:	7e a5       	ldd	r23, Y+46	; 0x2e
    221a:	8f a5       	ldd	r24, Y+47	; 0x2f
    221c:	98 a9       	ldd	r25, Y+48	; 0x30
    221e:	2b ea       	ldi	r18, 0xAB	; 171
    2220:	3a ea       	ldi	r19, 0xAA	; 170
    2222:	4a ea       	ldi	r20, 0xAA	; 170
    2224:	50 e4       	ldi	r21, 0x40	; 64
    2226:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    222a:	dc 01       	movw	r26, r24
    222c:	cb 01       	movw	r24, r22
    222e:	89 a7       	std	Y+41, r24	; 0x29
    2230:	9a a7       	std	Y+42, r25	; 0x2a
    2232:	ab a7       	std	Y+43, r26	; 0x2b
    2234:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    2236:	69 a5       	ldd	r22, Y+41	; 0x29
    2238:	7a a5       	ldd	r23, Y+42	; 0x2a
    223a:	8b a5       	ldd	r24, Y+43	; 0x2b
    223c:	9c a5       	ldd	r25, Y+44	; 0x2c
    223e:	20 e0       	ldi	r18, 0x00	; 0
    2240:	30 e0       	ldi	r19, 0x00	; 0
    2242:	40 e8       	ldi	r20, 0x80	; 128
    2244:	5f e3       	ldi	r21, 0x3F	; 63
    2246:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    224a:	88 23       	and	r24, r24
    224c:	1c f4       	brge	.+6      	; 0x2254 <lcd_data+0x5cc>
		__ticks = 1;
    224e:	81 e0       	ldi	r24, 0x01	; 1
    2250:	88 a7       	std	Y+40, r24	; 0x28
    2252:	91 c0       	rjmp	.+290    	; 0x2376 <lcd_data+0x6ee>
	else if (__tmp > 255)
    2254:	69 a5       	ldd	r22, Y+41	; 0x29
    2256:	7a a5       	ldd	r23, Y+42	; 0x2a
    2258:	8b a5       	ldd	r24, Y+43	; 0x2b
    225a:	9c a5       	ldd	r25, Y+44	; 0x2c
    225c:	20 e0       	ldi	r18, 0x00	; 0
    225e:	30 e0       	ldi	r19, 0x00	; 0
    2260:	4f e7       	ldi	r20, 0x7F	; 127
    2262:	53 e4       	ldi	r21, 0x43	; 67
    2264:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2268:	18 16       	cp	r1, r24
    226a:	0c f0       	brlt	.+2      	; 0x226e <lcd_data+0x5e6>
    226c:	7b c0       	rjmp	.+246    	; 0x2364 <lcd_data+0x6dc>
	{
		_delay_ms(__us / 1000.0);
    226e:	6d a5       	ldd	r22, Y+45	; 0x2d
    2270:	7e a5       	ldd	r23, Y+46	; 0x2e
    2272:	8f a5       	ldd	r24, Y+47	; 0x2f
    2274:	98 a9       	ldd	r25, Y+48	; 0x30
    2276:	20 e0       	ldi	r18, 0x00	; 0
    2278:	30 e0       	ldi	r19, 0x00	; 0
    227a:	4a e7       	ldi	r20, 0x7A	; 122
    227c:	54 e4       	ldi	r21, 0x44	; 68
    227e:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2282:	dc 01       	movw	r26, r24
    2284:	cb 01       	movw	r24, r22
    2286:	8c a3       	std	Y+36, r24	; 0x24
    2288:	9d a3       	std	Y+37, r25	; 0x25
    228a:	ae a3       	std	Y+38, r26	; 0x26
    228c:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    228e:	6c a1       	ldd	r22, Y+36	; 0x24
    2290:	7d a1       	ldd	r23, Y+37	; 0x25
    2292:	8e a1       	ldd	r24, Y+38	; 0x26
    2294:	9f a1       	ldd	r25, Y+39	; 0x27
    2296:	20 e0       	ldi	r18, 0x00	; 0
    2298:	30 e0       	ldi	r19, 0x00	; 0
    229a:	4a e7       	ldi	r20, 0x7A	; 122
    229c:	55 e4       	ldi	r21, 0x45	; 69
    229e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22a2:	dc 01       	movw	r26, r24
    22a4:	cb 01       	movw	r24, r22
    22a6:	88 a3       	std	Y+32, r24	; 0x20
    22a8:	99 a3       	std	Y+33, r25	; 0x21
    22aa:	aa a3       	std	Y+34, r26	; 0x22
    22ac:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    22ae:	68 a1       	ldd	r22, Y+32	; 0x20
    22b0:	79 a1       	ldd	r23, Y+33	; 0x21
    22b2:	8a a1       	ldd	r24, Y+34	; 0x22
    22b4:	9b a1       	ldd	r25, Y+35	; 0x23
    22b6:	20 e0       	ldi	r18, 0x00	; 0
    22b8:	30 e0       	ldi	r19, 0x00	; 0
    22ba:	40 e8       	ldi	r20, 0x80	; 128
    22bc:	5f e3       	ldi	r21, 0x3F	; 63
    22be:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    22c2:	88 23       	and	r24, r24
    22c4:	2c f4       	brge	.+10     	; 0x22d0 <lcd_data+0x648>
		__ticks = 1;
    22c6:	81 e0       	ldi	r24, 0x01	; 1
    22c8:	90 e0       	ldi	r25, 0x00	; 0
    22ca:	9f 8f       	std	Y+31, r25	; 0x1f
    22cc:	8e 8f       	std	Y+30, r24	; 0x1e
    22ce:	3f c0       	rjmp	.+126    	; 0x234e <lcd_data+0x6c6>
	else if (__tmp > 65535)
    22d0:	68 a1       	ldd	r22, Y+32	; 0x20
    22d2:	79 a1       	ldd	r23, Y+33	; 0x21
    22d4:	8a a1       	ldd	r24, Y+34	; 0x22
    22d6:	9b a1       	ldd	r25, Y+35	; 0x23
    22d8:	20 e0       	ldi	r18, 0x00	; 0
    22da:	3f ef       	ldi	r19, 0xFF	; 255
    22dc:	4f e7       	ldi	r20, 0x7F	; 127
    22de:	57 e4       	ldi	r21, 0x47	; 71
    22e0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    22e4:	18 16       	cp	r1, r24
    22e6:	4c f5       	brge	.+82     	; 0x233a <lcd_data+0x6b2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22e8:	6c a1       	ldd	r22, Y+36	; 0x24
    22ea:	7d a1       	ldd	r23, Y+37	; 0x25
    22ec:	8e a1       	ldd	r24, Y+38	; 0x26
    22ee:	9f a1       	ldd	r25, Y+39	; 0x27
    22f0:	20 e0       	ldi	r18, 0x00	; 0
    22f2:	30 e0       	ldi	r19, 0x00	; 0
    22f4:	40 e2       	ldi	r20, 0x20	; 32
    22f6:	51 e4       	ldi	r21, 0x41	; 65
    22f8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22fc:	dc 01       	movw	r26, r24
    22fe:	cb 01       	movw	r24, r22
    2300:	bc 01       	movw	r22, r24
    2302:	cd 01       	movw	r24, r26
    2304:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2308:	dc 01       	movw	r26, r24
    230a:	cb 01       	movw	r24, r22
    230c:	9f 8f       	std	Y+31, r25	; 0x1f
    230e:	8e 8f       	std	Y+30, r24	; 0x1e
    2310:	0f c0       	rjmp	.+30     	; 0x2330 <lcd_data+0x6a8>
    2312:	80 e9       	ldi	r24, 0x90	; 144
    2314:	91 e0       	ldi	r25, 0x01	; 1
    2316:	9d 8f       	std	Y+29, r25	; 0x1d
    2318:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    231a:	8c 8d       	ldd	r24, Y+28	; 0x1c
    231c:	9d 8d       	ldd	r25, Y+29	; 0x1d
    231e:	01 97       	sbiw	r24, 0x01	; 1
    2320:	f1 f7       	brne	.-4      	; 0x231e <lcd_data+0x696>
    2322:	9d 8f       	std	Y+29, r25	; 0x1d
    2324:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2326:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2328:	9f 8d       	ldd	r25, Y+31	; 0x1f
    232a:	01 97       	sbiw	r24, 0x01	; 1
    232c:	9f 8f       	std	Y+31, r25	; 0x1f
    232e:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2330:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2332:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2334:	00 97       	sbiw	r24, 0x00	; 0
    2336:	69 f7       	brne	.-38     	; 0x2312 <lcd_data+0x68a>
    2338:	24 c0       	rjmp	.+72     	; 0x2382 <lcd_data+0x6fa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    233a:	68 a1       	ldd	r22, Y+32	; 0x20
    233c:	79 a1       	ldd	r23, Y+33	; 0x21
    233e:	8a a1       	ldd	r24, Y+34	; 0x22
    2340:	9b a1       	ldd	r25, Y+35	; 0x23
    2342:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2346:	dc 01       	movw	r26, r24
    2348:	cb 01       	movw	r24, r22
    234a:	9f 8f       	std	Y+31, r25	; 0x1f
    234c:	8e 8f       	std	Y+30, r24	; 0x1e
    234e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2350:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2352:	9b 8f       	std	Y+27, r25	; 0x1b
    2354:	8a 8f       	std	Y+26, r24	; 0x1a
    2356:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2358:	9b 8d       	ldd	r25, Y+27	; 0x1b
    235a:	01 97       	sbiw	r24, 0x01	; 1
    235c:	f1 f7       	brne	.-4      	; 0x235a <lcd_data+0x6d2>
    235e:	9b 8f       	std	Y+27, r25	; 0x1b
    2360:	8a 8f       	std	Y+26, r24	; 0x1a
    2362:	0f c0       	rjmp	.+30     	; 0x2382 <lcd_data+0x6fa>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2364:	69 a5       	ldd	r22, Y+41	; 0x29
    2366:	7a a5       	ldd	r23, Y+42	; 0x2a
    2368:	8b a5       	ldd	r24, Y+43	; 0x2b
    236a:	9c a5       	ldd	r25, Y+44	; 0x2c
    236c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2370:	dc 01       	movw	r26, r24
    2372:	cb 01       	movw	r24, r22
    2374:	88 a7       	std	Y+40, r24	; 0x28
    2376:	88 a5       	ldd	r24, Y+40	; 0x28
    2378:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    237a:	89 8d       	ldd	r24, Y+25	; 0x19
    237c:	8a 95       	dec	r24
    237e:	f1 f7       	brne	.-4      	; 0x237c <lcd_data+0x6f4>
    2380:	89 8f       	std	Y+25, r24	; 0x19
	_delay_us(10);
	Dio_write(E,Low);
    2382:	8b e0       	ldi	r24, 0x0B	; 11
    2384:	60 e0       	ldi	r22, 0x00	; 0
    2386:	0e 94 78 06 	call	0xcf0	; 0xcf0 <Dio_write>
    238a:	80 e0       	ldi	r24, 0x00	; 0
    238c:	90 e0       	ldi	r25, 0x00	; 0
    238e:	a8 e4       	ldi	r26, 0x48	; 72
    2390:	b3 e4       	ldi	r27, 0x43	; 67
    2392:	8d 8b       	std	Y+21, r24	; 0x15
    2394:	9e 8b       	std	Y+22, r25	; 0x16
    2396:	af 8b       	std	Y+23, r26	; 0x17
    2398:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    239a:	6d 89       	ldd	r22, Y+21	; 0x15
    239c:	7e 89       	ldd	r23, Y+22	; 0x16
    239e:	8f 89       	ldd	r24, Y+23	; 0x17
    23a0:	98 8d       	ldd	r25, Y+24	; 0x18
    23a2:	2b ea       	ldi	r18, 0xAB	; 171
    23a4:	3a ea       	ldi	r19, 0xAA	; 170
    23a6:	4a ea       	ldi	r20, 0xAA	; 170
    23a8:	50 e4       	ldi	r21, 0x40	; 64
    23aa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23ae:	dc 01       	movw	r26, r24
    23b0:	cb 01       	movw	r24, r22
    23b2:	89 8b       	std	Y+17, r24	; 0x11
    23b4:	9a 8b       	std	Y+18, r25	; 0x12
    23b6:	ab 8b       	std	Y+19, r26	; 0x13
    23b8:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    23ba:	69 89       	ldd	r22, Y+17	; 0x11
    23bc:	7a 89       	ldd	r23, Y+18	; 0x12
    23be:	8b 89       	ldd	r24, Y+19	; 0x13
    23c0:	9c 89       	ldd	r25, Y+20	; 0x14
    23c2:	20 e0       	ldi	r18, 0x00	; 0
    23c4:	30 e0       	ldi	r19, 0x00	; 0
    23c6:	40 e8       	ldi	r20, 0x80	; 128
    23c8:	5f e3       	ldi	r21, 0x3F	; 63
    23ca:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    23ce:	88 23       	and	r24, r24
    23d0:	1c f4       	brge	.+6      	; 0x23d8 <lcd_data+0x750>
		__ticks = 1;
    23d2:	81 e0       	ldi	r24, 0x01	; 1
    23d4:	88 8b       	std	Y+16, r24	; 0x10
    23d6:	91 c0       	rjmp	.+290    	; 0x24fa <lcd_data+0x872>
	else if (__tmp > 255)
    23d8:	69 89       	ldd	r22, Y+17	; 0x11
    23da:	7a 89       	ldd	r23, Y+18	; 0x12
    23dc:	8b 89       	ldd	r24, Y+19	; 0x13
    23de:	9c 89       	ldd	r25, Y+20	; 0x14
    23e0:	20 e0       	ldi	r18, 0x00	; 0
    23e2:	30 e0       	ldi	r19, 0x00	; 0
    23e4:	4f e7       	ldi	r20, 0x7F	; 127
    23e6:	53 e4       	ldi	r21, 0x43	; 67
    23e8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    23ec:	18 16       	cp	r1, r24
    23ee:	0c f0       	brlt	.+2      	; 0x23f2 <lcd_data+0x76a>
    23f0:	7b c0       	rjmp	.+246    	; 0x24e8 <lcd_data+0x860>
	{
		_delay_ms(__us / 1000.0);
    23f2:	6d 89       	ldd	r22, Y+21	; 0x15
    23f4:	7e 89       	ldd	r23, Y+22	; 0x16
    23f6:	8f 89       	ldd	r24, Y+23	; 0x17
    23f8:	98 8d       	ldd	r25, Y+24	; 0x18
    23fa:	20 e0       	ldi	r18, 0x00	; 0
    23fc:	30 e0       	ldi	r19, 0x00	; 0
    23fe:	4a e7       	ldi	r20, 0x7A	; 122
    2400:	54 e4       	ldi	r21, 0x44	; 68
    2402:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2406:	dc 01       	movw	r26, r24
    2408:	cb 01       	movw	r24, r22
    240a:	8c 87       	std	Y+12, r24	; 0x0c
    240c:	9d 87       	std	Y+13, r25	; 0x0d
    240e:	ae 87       	std	Y+14, r26	; 0x0e
    2410:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2412:	6c 85       	ldd	r22, Y+12	; 0x0c
    2414:	7d 85       	ldd	r23, Y+13	; 0x0d
    2416:	8e 85       	ldd	r24, Y+14	; 0x0e
    2418:	9f 85       	ldd	r25, Y+15	; 0x0f
    241a:	20 e0       	ldi	r18, 0x00	; 0
    241c:	30 e0       	ldi	r19, 0x00	; 0
    241e:	4a e7       	ldi	r20, 0x7A	; 122
    2420:	55 e4       	ldi	r21, 0x45	; 69
    2422:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2426:	dc 01       	movw	r26, r24
    2428:	cb 01       	movw	r24, r22
    242a:	88 87       	std	Y+8, r24	; 0x08
    242c:	99 87       	std	Y+9, r25	; 0x09
    242e:	aa 87       	std	Y+10, r26	; 0x0a
    2430:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    2432:	68 85       	ldd	r22, Y+8	; 0x08
    2434:	79 85       	ldd	r23, Y+9	; 0x09
    2436:	8a 85       	ldd	r24, Y+10	; 0x0a
    2438:	9b 85       	ldd	r25, Y+11	; 0x0b
    243a:	20 e0       	ldi	r18, 0x00	; 0
    243c:	30 e0       	ldi	r19, 0x00	; 0
    243e:	40 e8       	ldi	r20, 0x80	; 128
    2440:	5f e3       	ldi	r21, 0x3F	; 63
    2442:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2446:	88 23       	and	r24, r24
    2448:	2c f4       	brge	.+10     	; 0x2454 <lcd_data+0x7cc>
		__ticks = 1;
    244a:	81 e0       	ldi	r24, 0x01	; 1
    244c:	90 e0       	ldi	r25, 0x00	; 0
    244e:	9f 83       	std	Y+7, r25	; 0x07
    2450:	8e 83       	std	Y+6, r24	; 0x06
    2452:	3f c0       	rjmp	.+126    	; 0x24d2 <lcd_data+0x84a>
	else if (__tmp > 65535)
    2454:	68 85       	ldd	r22, Y+8	; 0x08
    2456:	79 85       	ldd	r23, Y+9	; 0x09
    2458:	8a 85       	ldd	r24, Y+10	; 0x0a
    245a:	9b 85       	ldd	r25, Y+11	; 0x0b
    245c:	20 e0       	ldi	r18, 0x00	; 0
    245e:	3f ef       	ldi	r19, 0xFF	; 255
    2460:	4f e7       	ldi	r20, 0x7F	; 127
    2462:	57 e4       	ldi	r21, 0x47	; 71
    2464:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2468:	18 16       	cp	r1, r24
    246a:	4c f5       	brge	.+82     	; 0x24be <lcd_data+0x836>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    246c:	6c 85       	ldd	r22, Y+12	; 0x0c
    246e:	7d 85       	ldd	r23, Y+13	; 0x0d
    2470:	8e 85       	ldd	r24, Y+14	; 0x0e
    2472:	9f 85       	ldd	r25, Y+15	; 0x0f
    2474:	20 e0       	ldi	r18, 0x00	; 0
    2476:	30 e0       	ldi	r19, 0x00	; 0
    2478:	40 e2       	ldi	r20, 0x20	; 32
    247a:	51 e4       	ldi	r21, 0x41	; 65
    247c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2480:	dc 01       	movw	r26, r24
    2482:	cb 01       	movw	r24, r22
    2484:	bc 01       	movw	r22, r24
    2486:	cd 01       	movw	r24, r26
    2488:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    248c:	dc 01       	movw	r26, r24
    248e:	cb 01       	movw	r24, r22
    2490:	9f 83       	std	Y+7, r25	; 0x07
    2492:	8e 83       	std	Y+6, r24	; 0x06
    2494:	0f c0       	rjmp	.+30     	; 0x24b4 <lcd_data+0x82c>
    2496:	80 e9       	ldi	r24, 0x90	; 144
    2498:	91 e0       	ldi	r25, 0x01	; 1
    249a:	9d 83       	std	Y+5, r25	; 0x05
    249c:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    249e:	8c 81       	ldd	r24, Y+4	; 0x04
    24a0:	9d 81       	ldd	r25, Y+5	; 0x05
    24a2:	01 97       	sbiw	r24, 0x01	; 1
    24a4:	f1 f7       	brne	.-4      	; 0x24a2 <lcd_data+0x81a>
    24a6:	9d 83       	std	Y+5, r25	; 0x05
    24a8:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24aa:	8e 81       	ldd	r24, Y+6	; 0x06
    24ac:	9f 81       	ldd	r25, Y+7	; 0x07
    24ae:	01 97       	sbiw	r24, 0x01	; 1
    24b0:	9f 83       	std	Y+7, r25	; 0x07
    24b2:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24b4:	8e 81       	ldd	r24, Y+6	; 0x06
    24b6:	9f 81       	ldd	r25, Y+7	; 0x07
    24b8:	00 97       	sbiw	r24, 0x00	; 0
    24ba:	69 f7       	brne	.-38     	; 0x2496 <lcd_data+0x80e>
    24bc:	24 c0       	rjmp	.+72     	; 0x2506 <lcd_data+0x87e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24be:	68 85       	ldd	r22, Y+8	; 0x08
    24c0:	79 85       	ldd	r23, Y+9	; 0x09
    24c2:	8a 85       	ldd	r24, Y+10	; 0x0a
    24c4:	9b 85       	ldd	r25, Y+11	; 0x0b
    24c6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24ca:	dc 01       	movw	r26, r24
    24cc:	cb 01       	movw	r24, r22
    24ce:	9f 83       	std	Y+7, r25	; 0x07
    24d0:	8e 83       	std	Y+6, r24	; 0x06
    24d2:	8e 81       	ldd	r24, Y+6	; 0x06
    24d4:	9f 81       	ldd	r25, Y+7	; 0x07
    24d6:	9b 83       	std	Y+3, r25	; 0x03
    24d8:	8a 83       	std	Y+2, r24	; 0x02
    24da:	8a 81       	ldd	r24, Y+2	; 0x02
    24dc:	9b 81       	ldd	r25, Y+3	; 0x03
    24de:	01 97       	sbiw	r24, 0x01	; 1
    24e0:	f1 f7       	brne	.-4      	; 0x24de <lcd_data+0x856>
    24e2:	9b 83       	std	Y+3, r25	; 0x03
    24e4:	8a 83       	std	Y+2, r24	; 0x02
    24e6:	0f c0       	rjmp	.+30     	; 0x2506 <lcd_data+0x87e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    24e8:	69 89       	ldd	r22, Y+17	; 0x11
    24ea:	7a 89       	ldd	r23, Y+18	; 0x12
    24ec:	8b 89       	ldd	r24, Y+19	; 0x13
    24ee:	9c 89       	ldd	r25, Y+20	; 0x14
    24f0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24f4:	dc 01       	movw	r26, r24
    24f6:	cb 01       	movw	r24, r22
    24f8:	88 8b       	std	Y+16, r24	; 0x10
    24fa:	88 89       	ldd	r24, Y+16	; 0x10
    24fc:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    24fe:	89 81       	ldd	r24, Y+1	; 0x01
    2500:	8a 95       	dec	r24
    2502:	f1 f7       	brne	.-4      	; 0x2500 <lcd_data+0x878>
    2504:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(200);
}
    2506:	cf 59       	subi	r28, 0x9F	; 159
    2508:	df 4f       	sbci	r29, 0xFF	; 255
    250a:	0f b6       	in	r0, 0x3f	; 63
    250c:	f8 94       	cli
    250e:	de bf       	out	0x3e, r29	; 62
    2510:	0f be       	out	0x3f, r0	; 63
    2512:	cd bf       	out	0x3d, r28	; 61
    2514:	cf 91       	pop	r28
    2516:	df 91       	pop	r29
    2518:	1f 91       	pop	r17
    251a:	0f 91       	pop	r16
    251c:	08 95       	ret

0000251e <test>:

volatile int ctr = 0;
volatile int ctr2 = 0;


void test(){
    251e:	df 93       	push	r29
    2520:	cf 93       	push	r28
    2522:	cd b7       	in	r28, 0x3d	; 61
    2524:	de b7       	in	r29, 0x3e	; 62
	Dio_write(Led0,High);
    2526:	82 e1       	ldi	r24, 0x12	; 18
    2528:	61 e0       	ldi	r22, 0x01	; 1
    252a:	0e 94 78 06 	call	0xcf0	; 0xcf0 <Dio_write>
	Dio_write(Led1,High);
    252e:	87 e1       	ldi	r24, 0x17	; 23
    2530:	61 e0       	ldi	r22, 0x01	; 1
    2532:	0e 94 78 06 	call	0xcf0	; 0xcf0 <Dio_write>
}
    2536:	cf 91       	pop	r28
    2538:	df 91       	pop	r29
    253a:	08 95       	ret

0000253c <main>:

int main(){
    253c:	df 93       	push	r29
    253e:	cf 93       	push	r28
    2540:	cd b7       	in	r28, 0x3d	; 61
    2542:	de b7       	in	r29, 0x3e	; 62
    2544:	6d 97       	sbiw	r28, 0x1d	; 29
    2546:	0f b6       	in	r0, 0x3f	; 63
    2548:	f8 94       	cli
    254a:	de bf       	out	0x3e, r29	; 62
    254c:	0f be       	out	0x3f, r0	; 63
    254e:	cd bf       	out	0x3d, r28	; 61
	Dio_init();
    2550:	0e 94 a4 07 	call	0xf48	; 0xf48 <Dio_init>
	SPI_MasterInit();
    2554:	0e 94 4f 06 	call	0xc9e	; 0xc9e <SPI_MasterInit>
	UART_init(103);
    2558:	87 e6       	ldi	r24, 0x67	; 103
    255a:	90 e0       	ldi	r25, 0x00	; 0
    255c:	0e 94 19 09 	call	0x1232	; 0x1232 <UART_init>
    2560:	80 e0       	ldi	r24, 0x00	; 0
    2562:	90 e0       	ldi	r25, 0x00	; 0
    2564:	a0 e2       	ldi	r26, 0x20	; 32
    2566:	b1 e4       	ldi	r27, 0x41	; 65
    2568:	89 8f       	std	Y+25, r24	; 0x19
    256a:	9a 8f       	std	Y+26, r25	; 0x1a
    256c:	ab 8f       	std	Y+27, r26	; 0x1b
    256e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2570:	69 8d       	ldd	r22, Y+25	; 0x19
    2572:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2574:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2576:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2578:	20 e0       	ldi	r18, 0x00	; 0
    257a:	30 e0       	ldi	r19, 0x00	; 0
    257c:	4a e7       	ldi	r20, 0x7A	; 122
    257e:	55 e4       	ldi	r21, 0x45	; 69
    2580:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2584:	dc 01       	movw	r26, r24
    2586:	cb 01       	movw	r24, r22
    2588:	8d 8b       	std	Y+21, r24	; 0x15
    258a:	9e 8b       	std	Y+22, r25	; 0x16
    258c:	af 8b       	std	Y+23, r26	; 0x17
    258e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2590:	6d 89       	ldd	r22, Y+21	; 0x15
    2592:	7e 89       	ldd	r23, Y+22	; 0x16
    2594:	8f 89       	ldd	r24, Y+23	; 0x17
    2596:	98 8d       	ldd	r25, Y+24	; 0x18
    2598:	20 e0       	ldi	r18, 0x00	; 0
    259a:	30 e0       	ldi	r19, 0x00	; 0
    259c:	40 e8       	ldi	r20, 0x80	; 128
    259e:	5f e3       	ldi	r21, 0x3F	; 63
    25a0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    25a4:	88 23       	and	r24, r24
    25a6:	2c f4       	brge	.+10     	; 0x25b2 <main+0x76>
		__ticks = 1;
    25a8:	81 e0       	ldi	r24, 0x01	; 1
    25aa:	90 e0       	ldi	r25, 0x00	; 0
    25ac:	9c 8b       	std	Y+20, r25	; 0x14
    25ae:	8b 8b       	std	Y+19, r24	; 0x13
    25b0:	3f c0       	rjmp	.+126    	; 0x2630 <main+0xf4>
	else if (__tmp > 65535)
    25b2:	6d 89       	ldd	r22, Y+21	; 0x15
    25b4:	7e 89       	ldd	r23, Y+22	; 0x16
    25b6:	8f 89       	ldd	r24, Y+23	; 0x17
    25b8:	98 8d       	ldd	r25, Y+24	; 0x18
    25ba:	20 e0       	ldi	r18, 0x00	; 0
    25bc:	3f ef       	ldi	r19, 0xFF	; 255
    25be:	4f e7       	ldi	r20, 0x7F	; 127
    25c0:	57 e4       	ldi	r21, 0x47	; 71
    25c2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    25c6:	18 16       	cp	r1, r24
    25c8:	4c f5       	brge	.+82     	; 0x261c <main+0xe0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    25ca:	69 8d       	ldd	r22, Y+25	; 0x19
    25cc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    25ce:	8b 8d       	ldd	r24, Y+27	; 0x1b
    25d0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    25d2:	20 e0       	ldi	r18, 0x00	; 0
    25d4:	30 e0       	ldi	r19, 0x00	; 0
    25d6:	40 e2       	ldi	r20, 0x20	; 32
    25d8:	51 e4       	ldi	r21, 0x41	; 65
    25da:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25de:	dc 01       	movw	r26, r24
    25e0:	cb 01       	movw	r24, r22
    25e2:	bc 01       	movw	r22, r24
    25e4:	cd 01       	movw	r24, r26
    25e6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25ea:	dc 01       	movw	r26, r24
    25ec:	cb 01       	movw	r24, r22
    25ee:	9c 8b       	std	Y+20, r25	; 0x14
    25f0:	8b 8b       	std	Y+19, r24	; 0x13
    25f2:	0f c0       	rjmp	.+30     	; 0x2612 <main+0xd6>
    25f4:	80 e9       	ldi	r24, 0x90	; 144
    25f6:	91 e0       	ldi	r25, 0x01	; 1
    25f8:	9a 8b       	std	Y+18, r25	; 0x12
    25fa:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    25fc:	89 89       	ldd	r24, Y+17	; 0x11
    25fe:	9a 89       	ldd	r25, Y+18	; 0x12
    2600:	01 97       	sbiw	r24, 0x01	; 1
    2602:	f1 f7       	brne	.-4      	; 0x2600 <main+0xc4>
    2604:	9a 8b       	std	Y+18, r25	; 0x12
    2606:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2608:	8b 89       	ldd	r24, Y+19	; 0x13
    260a:	9c 89       	ldd	r25, Y+20	; 0x14
    260c:	01 97       	sbiw	r24, 0x01	; 1
    260e:	9c 8b       	std	Y+20, r25	; 0x14
    2610:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2612:	8b 89       	ldd	r24, Y+19	; 0x13
    2614:	9c 89       	ldd	r25, Y+20	; 0x14
    2616:	00 97       	sbiw	r24, 0x00	; 0
    2618:	69 f7       	brne	.-38     	; 0x25f4 <main+0xb8>
    261a:	14 c0       	rjmp	.+40     	; 0x2644 <main+0x108>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    261c:	6d 89       	ldd	r22, Y+21	; 0x15
    261e:	7e 89       	ldd	r23, Y+22	; 0x16
    2620:	8f 89       	ldd	r24, Y+23	; 0x17
    2622:	98 8d       	ldd	r25, Y+24	; 0x18
    2624:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2628:	dc 01       	movw	r26, r24
    262a:	cb 01       	movw	r24, r22
    262c:	9c 8b       	std	Y+20, r25	; 0x14
    262e:	8b 8b       	std	Y+19, r24	; 0x13
    2630:	8b 89       	ldd	r24, Y+19	; 0x13
    2632:	9c 89       	ldd	r25, Y+20	; 0x14
    2634:	98 8b       	std	Y+16, r25	; 0x10
    2636:	8f 87       	std	Y+15, r24	; 0x0f
    2638:	8f 85       	ldd	r24, Y+15	; 0x0f
    263a:	98 89       	ldd	r25, Y+16	; 0x10
    263c:	01 97       	sbiw	r24, 0x01	; 1
    263e:	f1 f7       	brne	.-4      	; 0x263c <main+0x100>
    2640:	98 8b       	std	Y+16, r25	; 0x10
    2642:	8f 87       	std	Y+15, r24	; 0x0f
//	DDRA |= (1<<2);
	while(1){
		_delay_ms(10);

		unsigned char rec = UART_recieve();
    2644:	0e 94 4f 09 	call	0x129e	; 0x129e <UART_recieve>
    2648:	8d 8f       	std	Y+29, r24	; 0x1d
//		if(rec=='a'){
//			PORTA ^= (1<<2);
//		}
		SPI_MasterTransmit(rec);
    264a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    264c:	0e 94 5a 06 	call	0xcb4	; 0xcb4 <SPI_MasterTransmit>
    2650:	80 e0       	ldi	r24, 0x00	; 0
    2652:	90 e0       	ldi	r25, 0x00	; 0
    2654:	a0 e2       	ldi	r26, 0x20	; 32
    2656:	b1 e4       	ldi	r27, 0x41	; 65
    2658:	8b 87       	std	Y+11, r24	; 0x0b
    265a:	9c 87       	std	Y+12, r25	; 0x0c
    265c:	ad 87       	std	Y+13, r26	; 0x0d
    265e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2660:	6b 85       	ldd	r22, Y+11	; 0x0b
    2662:	7c 85       	ldd	r23, Y+12	; 0x0c
    2664:	8d 85       	ldd	r24, Y+13	; 0x0d
    2666:	9e 85       	ldd	r25, Y+14	; 0x0e
    2668:	20 e0       	ldi	r18, 0x00	; 0
    266a:	30 e0       	ldi	r19, 0x00	; 0
    266c:	4a e7       	ldi	r20, 0x7A	; 122
    266e:	55 e4       	ldi	r21, 0x45	; 69
    2670:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2674:	dc 01       	movw	r26, r24
    2676:	cb 01       	movw	r24, r22
    2678:	8f 83       	std	Y+7, r24	; 0x07
    267a:	98 87       	std	Y+8, r25	; 0x08
    267c:	a9 87       	std	Y+9, r26	; 0x09
    267e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2680:	6f 81       	ldd	r22, Y+7	; 0x07
    2682:	78 85       	ldd	r23, Y+8	; 0x08
    2684:	89 85       	ldd	r24, Y+9	; 0x09
    2686:	9a 85       	ldd	r25, Y+10	; 0x0a
    2688:	20 e0       	ldi	r18, 0x00	; 0
    268a:	30 e0       	ldi	r19, 0x00	; 0
    268c:	40 e8       	ldi	r20, 0x80	; 128
    268e:	5f e3       	ldi	r21, 0x3F	; 63
    2690:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2694:	88 23       	and	r24, r24
    2696:	2c f4       	brge	.+10     	; 0x26a2 <main+0x166>
		__ticks = 1;
    2698:	81 e0       	ldi	r24, 0x01	; 1
    269a:	90 e0       	ldi	r25, 0x00	; 0
    269c:	9e 83       	std	Y+6, r25	; 0x06
    269e:	8d 83       	std	Y+5, r24	; 0x05
    26a0:	3f c0       	rjmp	.+126    	; 0x2720 <main+0x1e4>
	else if (__tmp > 65535)
    26a2:	6f 81       	ldd	r22, Y+7	; 0x07
    26a4:	78 85       	ldd	r23, Y+8	; 0x08
    26a6:	89 85       	ldd	r24, Y+9	; 0x09
    26a8:	9a 85       	ldd	r25, Y+10	; 0x0a
    26aa:	20 e0       	ldi	r18, 0x00	; 0
    26ac:	3f ef       	ldi	r19, 0xFF	; 255
    26ae:	4f e7       	ldi	r20, 0x7F	; 127
    26b0:	57 e4       	ldi	r21, 0x47	; 71
    26b2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    26b6:	18 16       	cp	r1, r24
    26b8:	4c f5       	brge	.+82     	; 0x270c <main+0x1d0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    26ba:	6b 85       	ldd	r22, Y+11	; 0x0b
    26bc:	7c 85       	ldd	r23, Y+12	; 0x0c
    26be:	8d 85       	ldd	r24, Y+13	; 0x0d
    26c0:	9e 85       	ldd	r25, Y+14	; 0x0e
    26c2:	20 e0       	ldi	r18, 0x00	; 0
    26c4:	30 e0       	ldi	r19, 0x00	; 0
    26c6:	40 e2       	ldi	r20, 0x20	; 32
    26c8:	51 e4       	ldi	r21, 0x41	; 65
    26ca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26ce:	dc 01       	movw	r26, r24
    26d0:	cb 01       	movw	r24, r22
    26d2:	bc 01       	movw	r22, r24
    26d4:	cd 01       	movw	r24, r26
    26d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26da:	dc 01       	movw	r26, r24
    26dc:	cb 01       	movw	r24, r22
    26de:	9e 83       	std	Y+6, r25	; 0x06
    26e0:	8d 83       	std	Y+5, r24	; 0x05
    26e2:	0f c0       	rjmp	.+30     	; 0x2702 <main+0x1c6>
    26e4:	80 e9       	ldi	r24, 0x90	; 144
    26e6:	91 e0       	ldi	r25, 0x01	; 1
    26e8:	9c 83       	std	Y+4, r25	; 0x04
    26ea:	8b 83       	std	Y+3, r24	; 0x03
    26ec:	8b 81       	ldd	r24, Y+3	; 0x03
    26ee:	9c 81       	ldd	r25, Y+4	; 0x04
    26f0:	01 97       	sbiw	r24, 0x01	; 1
    26f2:	f1 f7       	brne	.-4      	; 0x26f0 <main+0x1b4>
    26f4:	9c 83       	std	Y+4, r25	; 0x04
    26f6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26f8:	8d 81       	ldd	r24, Y+5	; 0x05
    26fa:	9e 81       	ldd	r25, Y+6	; 0x06
    26fc:	01 97       	sbiw	r24, 0x01	; 1
    26fe:	9e 83       	std	Y+6, r25	; 0x06
    2700:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2702:	8d 81       	ldd	r24, Y+5	; 0x05
    2704:	9e 81       	ldd	r25, Y+6	; 0x06
    2706:	00 97       	sbiw	r24, 0x00	; 0
    2708:	69 f7       	brne	.-38     	; 0x26e4 <main+0x1a8>
    270a:	2a cf       	rjmp	.-428    	; 0x2560 <main+0x24>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    270c:	6f 81       	ldd	r22, Y+7	; 0x07
    270e:	78 85       	ldd	r23, Y+8	; 0x08
    2710:	89 85       	ldd	r24, Y+9	; 0x09
    2712:	9a 85       	ldd	r25, Y+10	; 0x0a
    2714:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2718:	dc 01       	movw	r26, r24
    271a:	cb 01       	movw	r24, r22
    271c:	9e 83       	std	Y+6, r25	; 0x06
    271e:	8d 83       	std	Y+5, r24	; 0x05
    2720:	8d 81       	ldd	r24, Y+5	; 0x05
    2722:	9e 81       	ldd	r25, Y+6	; 0x06
    2724:	9a 83       	std	Y+2, r25	; 0x02
    2726:	89 83       	std	Y+1, r24	; 0x01
    2728:	89 81       	ldd	r24, Y+1	; 0x01
    272a:	9a 81       	ldd	r25, Y+2	; 0x02
    272c:	01 97       	sbiw	r24, 0x01	; 1
    272e:	f1 f7       	brne	.-4      	; 0x272c <main+0x1f0>
    2730:	9a 83       	std	Y+2, r25	; 0x02
    2732:	89 83       	std	Y+1, r24	; 0x01
    2734:	15 cf       	rjmp	.-470    	; 0x2560 <main+0x24>

00002736 <__prologue_saves__>:
    2736:	2f 92       	push	r2
    2738:	3f 92       	push	r3
    273a:	4f 92       	push	r4
    273c:	5f 92       	push	r5
    273e:	6f 92       	push	r6
    2740:	7f 92       	push	r7
    2742:	8f 92       	push	r8
    2744:	9f 92       	push	r9
    2746:	af 92       	push	r10
    2748:	bf 92       	push	r11
    274a:	cf 92       	push	r12
    274c:	df 92       	push	r13
    274e:	ef 92       	push	r14
    2750:	ff 92       	push	r15
    2752:	0f 93       	push	r16
    2754:	1f 93       	push	r17
    2756:	cf 93       	push	r28
    2758:	df 93       	push	r29
    275a:	cd b7       	in	r28, 0x3d	; 61
    275c:	de b7       	in	r29, 0x3e	; 62
    275e:	ca 1b       	sub	r28, r26
    2760:	db 0b       	sbc	r29, r27
    2762:	0f b6       	in	r0, 0x3f	; 63
    2764:	f8 94       	cli
    2766:	de bf       	out	0x3e, r29	; 62
    2768:	0f be       	out	0x3f, r0	; 63
    276a:	cd bf       	out	0x3d, r28	; 61
    276c:	09 94       	ijmp

0000276e <__epilogue_restores__>:
    276e:	2a 88       	ldd	r2, Y+18	; 0x12
    2770:	39 88       	ldd	r3, Y+17	; 0x11
    2772:	48 88       	ldd	r4, Y+16	; 0x10
    2774:	5f 84       	ldd	r5, Y+15	; 0x0f
    2776:	6e 84       	ldd	r6, Y+14	; 0x0e
    2778:	7d 84       	ldd	r7, Y+13	; 0x0d
    277a:	8c 84       	ldd	r8, Y+12	; 0x0c
    277c:	9b 84       	ldd	r9, Y+11	; 0x0b
    277e:	aa 84       	ldd	r10, Y+10	; 0x0a
    2780:	b9 84       	ldd	r11, Y+9	; 0x09
    2782:	c8 84       	ldd	r12, Y+8	; 0x08
    2784:	df 80       	ldd	r13, Y+7	; 0x07
    2786:	ee 80       	ldd	r14, Y+6	; 0x06
    2788:	fd 80       	ldd	r15, Y+5	; 0x05
    278a:	0c 81       	ldd	r16, Y+4	; 0x04
    278c:	1b 81       	ldd	r17, Y+3	; 0x03
    278e:	aa 81       	ldd	r26, Y+2	; 0x02
    2790:	b9 81       	ldd	r27, Y+1	; 0x01
    2792:	ce 0f       	add	r28, r30
    2794:	d1 1d       	adc	r29, r1
    2796:	0f b6       	in	r0, 0x3f	; 63
    2798:	f8 94       	cli
    279a:	de bf       	out	0x3e, r29	; 62
    279c:	0f be       	out	0x3f, r0	; 63
    279e:	cd bf       	out	0x3d, r28	; 61
    27a0:	ed 01       	movw	r28, r26
    27a2:	08 95       	ret

000027a4 <_exit>:
    27a4:	f8 94       	cli

000027a6 <__stop_program>:
    27a6:	ff cf       	rjmp	.-2      	; 0x27a6 <__stop_program>
